package com.korotkov.mainCurrentApp.service.file;

import com.korotkov.creditCRM.model.clients.ClientDocumentAndName;
import com.korotkov.creditCRM.model.clients.ExportClientDocumentForCheckingInsuranceReportObject;
import com.korotkov.creditCRM.model.clients.exportForUploadingNewLeads.ExportPassiveClients;
import com.korotkov.creditCRM.model.collection.commonDataWithAssignedCollectorReport.CommonDataAssignedCollectorReportObject;
import com.korotkov.creditCRM.model.collection.preSoftBonusReport.PreSoftActivePromissedPaymentsForAgent;
import com.korotkov.creditCRM.model.collection.preSoftBonusReport.PreSoftBackUserResult;
import com.korotkov.creditCRM.model.collection.preSoftBonusReport.PreSoftBonusReportObject;
import com.korotkov.creditCRM.model.collection.preSoftBonusReport.PreSoftResultedPTPCallsReportObject;
import com.korotkov.creditCRM.model.collection.stagesWithAssignedBonusReport.StagesWithAssignedBonusReportObject;
import com.korotkov.creditCRM.model.collection.stagesWithAssignedBonusReport.StagesWithAssignedUserResult;
import com.korotkov.creditCRM.model.loansInfo.ExportLoansAndPaymentByDate;
import com.korotkov.creditCRM.model.loansInfo.ExportLoansAndPaymentByDateReportObject;
import com.korotkov.creditCRM.model.loansInfo.ExportLoansInfoExpiredInfoReportObject;
import com.korotkov.creditCRM.model.loansInfo.LoanInfoExpiredInfo;
import com.korotkov.creditCRM.model.mainDailyReport.*;
import com.korotkov.creditCRM.model.reportsCreditConveyor.*;
import com.korotkov.creditCRM.model.payments.ExportPaymentWithPaidFees;
import com.korotkov.creditCRM.model.payments.ExportPaymentsWithFeesGroupedByDate;
import com.korotkov.creditCRM.model.payments.ExportPaymentsWithPaidFeesReportObject;
import com.korotkov.creditCRM.model.reportsCreditConveyor.analyticalReportRepayment.AnalyticalReportRepaymentObject;
import com.korotkov.mainCurrentApp.config.ConfigConstants;
import com.korotkov.mainCurrentApp.model.CurrencyRate;
import com.korotkov.mainCurrentApp.model.ModelPlan;
import com.korotkov.mainCurrentApp.service.reportBuilder.collection.StagesWithAssignedBonusReportBuilder;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import com.korotkov.mainCurrentApp.service.reportBuilder.collection.PreSoftBonusReportBuilder;

public interface ExcelBuildReport extends ConfigConstants {

    public static void buildExcelExportAnalyticalReportRepayment(Map<String, Object> model,
                                                                 Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        CellStyle stylePercent = workbook.createCellStyle();
        createCellStylePercent(stylePercent, fontSimpleCells, creationHelper);

        CellStyle stylePercentBold = workbook.createCellStyle();
        createCellStylePercentBold(stylePercentBold, fontHeaders, creationHelper);

        AnalyticalReportRepaymentObject object = (AnalyticalReportRepaymentObject) model.get("modelObject");

        createSheetForExportAnalyticalReportRepayment(workbook, object, styleTextHeaders, styleSimpleText,
                styleDateAndTime, styleDate, styleTitle, styleNumber, styleNumberBold, stylePercent, stylePercentBold);

    }

    public static void buildExcelExportLoanForCrossCheckReport(Map<String, Object> model,
                                                                  Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        ExportIssuedLoanForCrossCheckReportObject object = (ExportIssuedLoanForCrossCheckReportObject) model.get("modelObject");

        createSheetForExportLoanForCrossCheckReport(workbook, object, styleTextHeaders, styleSimpleText,
                styleDateAndTime, styleDate, styleTitle, styleNumber, styleNumberBold);
    }

    public static void buildExcelExportPaymentForCrossCheckReport(Map<String, Object> model,
                                                                  Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        ExportPaymentForCrossCheckReportObject object = (ExportPaymentForCrossCheckReportObject) model.get("modelObject");

        createSheetForExportPaymentForCrossCheckReport(workbook, object, styleTextHeaders, styleSimpleText,
                styleDateAndTime, styleDate, styleTitle, styleNumber, styleNumberBold);
    }

    public static void buildExcelExportPassiveClientsForSmsReport(Map<String, Object> model,
                                                                 Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        ExportPassiveClientsForSMSReportObject object = (ExportPassiveClientsForSMSReportObject) model.get("modelObject");

        createSheetForExportPassiveClientsForSmsReport(workbook, object, styleTextHeaders, styleSimpleText, styleDateAndTime,
                styleNumber);
    }

    public static void buildExcelExportDeactivatedPaymentsReport(Map<String, Object> model,
                                                               Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        ExportDeactivatedPaymentsReportObject object = (ExportDeactivatedPaymentsReportObject) model.get("modelObject");

        createSheetForExportDeactivatedPaymentsReport(workbook, object, styleTextHeaders, styleSimpleText, styleDateAndTime,
                styleDate, styleNumber);
    }

    public static void buildExcelExportRefundOverpaymentReport(Map<String, Object> model,
                                                               Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        ExportRefundOverpaymentReportObject object = (ExportRefundOverpaymentReportObject) model.get("modelObject");

        createSheetForExportRefundOverpaymentReport(workbook, object, styleTextHeaders, styleSimpleText, styleDateAndTime,
                styleDate, styleNumber);
    }

    public static void buildExcelExportApplicationsInfoDateReport(Map<String, Object> model,
                                                                     Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        CellStyle stylePercent = workbook.createCellStyle();
        createCellStylePercent(stylePercent, fontSimpleCells, creationHelper);

        CellStyle stylePercentBold = workbook.createCellStyle();
        createCellStylePercentBold(stylePercentBold, fontHeaders, creationHelper);

        ExportApplicationsInfoDateReportObject object = (ExportApplicationsInfoDateReportObject) model.get("modelObject");

        createSheetForExportApplicationsInfoDateReportTotal(workbook, object, styleTextHeaders, styleSimpleText,
                styleDateAndTime, styleDate, styleTitle, styleNumber, styleNumberBold, stylePercent, stylePercentBold);

        createSheetForExportApplicationsInfoDateReportNew(workbook, object, styleTextHeaders, styleSimpleText,
                styleDateAndTime, styleDate, styleTitle, styleNumber, styleNumberBold, stylePercent, stylePercentBold);

        createSheetForExportApplicationsInfoDateReportRepeat(workbook, object, styleTextHeaders, styleSimpleText,
                styleDateAndTime, styleDate, styleTitle, styleNumber, styleNumberBold, stylePercent, stylePercentBold);

    }

    public static void buildExcelExportAppByUnderwriterPerHourReport(Map<String, Object> model,
                                                                     Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        ExportAppByUnderwriterPerHourReportObject object = (ExportAppByUnderwriterPerHourReportObject) model.get("modelObject");

        createSheetForExcelExportAppByUnderwriterPerHourReport(workbook, object, styleTextHeaders, styleSimpleText,
                styleDateAndTime, styleDate, styleTitle, styleNumber, styleNumberBold);
    }

    public static void buildExcelExportAppProcessedByUnderwriterReport(Map<String, Object> model,
                                                                       Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        ExportAppProcessedByUnderwriterReportObject object = (ExportAppProcessedByUnderwriterReportObject) model.get("modelObject");

        createSheetForExcelExportAppProcessedByUnderwriterReport(workbook, object, styleTextHeaders, styleSimpleText,
                styleDateAndTime, styleDate);
    }

    public static void buildExcelExportUnderwritersResultWithAppReport(Map<String, Object> model,
                                                                       Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        CellStyle stylePercent = workbook.createCellStyle();
        createCellStylePercent(stylePercent, fontSimpleCells, creationHelper);

        CellStyle stylePercentBold = workbook.createCellStyle();
        createCellStylePercentBold(stylePercentBold, fontHeaders, creationHelper);

        UnderwritersResultWithAppReportObject object = (UnderwritersResultWithAppReportObject) model.get("modelObject");

        createSheetForExcelExportUnderwritersResultWithAppReport(workbook, object, styleTextHeaders, styleTitle,
                styleSimpleText, styleDateAndTime, styleDate, styleNumber, styleNumberBold, stylePercent,
                stylePercentBold);
    }

    public static void buildExcelExportDateHourCountAmountPaymentReport(Map<String, Object> model,
                                                                        Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        ExportDateHourCountAmountReportObject reportObject = (ExportDateHourCountAmountReportObject) model.get("modelObject");

        createSheetForExcelExportDateHourCountAmountReport(workbook, reportObject, styleTextHeaders, styleTitle,
                styleSimpleText, styleDateAndTime, styleDate, styleNumber, styleNumberBold, "Payment");

    }

    public static void buildExcelExportDateHourCountAmountLoanReport(Map<String, Object> model,
                                                                     Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        ExportDateHourCountAmountReportObject reportObject = (ExportDateHourCountAmountReportObject) model.get("modelObject");

        createSheetForExcelExportDateHourCountAmountReport(workbook, reportObject, styleTextHeaders, styleTitle,
                styleSimpleText, styleDateAndTime, styleDate, styleNumber, styleNumberBold, "Loan");

    }

    public static void buildExcelExportLoansAndPaymentByDateReport(Map<String, Object> model,
                                                                   Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        ExportLoansAndPaymentByDateReportObject reportObject = (ExportLoansAndPaymentByDateReportObject) model.get("modelObject");

        createSheetForExcelExportLoansAndPaymentByDateReport(workbook, reportObject, styleTextHeaders, styleTitle,
                styleSimpleText, styleDateAndTime, styleDate, styleNumber, styleNumberBold);

    }

    public static void buildExcelExportAppsBySourceReport(Map<String, Object> model,
                                                          Workbook workbook) {
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        ExportAppsBySourceReportObject reportObject = (ExportAppsBySourceReportObject) model.get("modelObject");

        createSheetForExportAppsBySourceReport(workbook, reportObject, styleTextHeaders, styleSimpleText, styleDateAndTime,
                styleDate, styleNumber);

    }

    public static void buildExcelExportLoansBySourceReport(Map<String, Object> model,
                                                          Workbook workbook) {
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        ExportLoansBySourceReportObject reportObject = (ExportLoansBySourceReportObject) model.get("modelObject");

        createSheetForExportLoansBySourceReport(workbook, reportObject, styleTextHeaders, styleSimpleText, styleDateAndTime,
                styleDate, styleNumber);


    }

    public static void buildExcelAppAndLoanBySourceReport(Map<String, Object> model,
                                                          Workbook workbook) {
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle stylePercent = workbook.createCellStyle();
        createCellStylePercent(stylePercent, fontSimpleCells, creationHelper);

        CellStyle stylePercentBold = workbook.createCellStyle();
        createCellStylePercentBold(stylePercentBold, fontHeaders, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        //get Object for Excel
        AppAndLoanBySourceReportObject reportObject = (AppAndLoanBySourceReportObject) model.get("modelObject");


        createSheetForAppAndLoanBySourceReport(workbook, reportObject, styleTextHeaders, styleSimpleText,
                styleTitle, styleDateAndTime, styleNumber, styleNumberBold, stylePercent, stylePercentBold, styleDate);

    }

    public static void buildExcelExportPtpPreSoftResultedCallsReport(Map<String, Object> model,
                                                                     Workbook workbook) {
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        PreSoftResultedPTPCallsReportObject object =
                (PreSoftResultedPTPCallsReportObject) model.get("modelObject");

        createSheetForExportPtpPreSoftResultedCallsReport(workbook, object, styleTextHeaders, styleSimpleText, styleDate,
                styleDateAndTime, styleNumber);

    }

    public static void buildExcelExportLoansInfoExpiredInfoReport(Map<String, Object> model,
                                                                  Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleDateBold = workbook.createCellStyle();
        createCellStyleDateBold(styleDateBold, fontHeaders, creationHelper);

        CellStyle styleMonth = workbook.createCellStyle();
        createCellStyleMonth(styleMonth, fontSimpleCells, creationHelper);

        CellStyle styleMonthBold = workbook.createCellStyle();
        createCellStyleMonthBold(styleMonthBold, fontHeaders, creationHelper);

        CellStyle stylePercent = workbook.createCellStyle();
        createCellStylePercent(stylePercent, fontSimpleCells, creationHelper);

        CellStyle stylePercentBold = workbook.createCellStyle();
        createCellStylePercentBold(stylePercentBold, fontHeaders, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);


        //get Object for Excel
        ExportLoansInfoExpiredInfoReportObject reportObject = (ExportLoansInfoExpiredInfoReportObject) model.get("modelObject");

        //Workbook. Creating sheets
        createSheetCommonInfoIfReportHaveOnlyDateFromAndDateTo(workbook, reportObject.getCreatedAt(),
                reportObject.getDateFrom(), reportObject.getDateTo(), styleTitle, styleDateAndTime,
                styleDate, styleSimpleText);

        createSheetsDailyInfoInUSDForInfoLoansInfoExpiredReport(workbook, reportObject, styleTextHeaders,
                styleDate, stylePercent, styleNumber, styleMonthBold, stylePercentBold, styleNumberBold);

        createSheetsDailyInfoInVNDForInfoLoansInfoExpiredReport(workbook, reportObject, styleTextHeaders,
                styleDate, stylePercent, styleNumber, styleMonthBold, stylePercentBold, styleNumberBold);

        createSheetCurrencyRates(workbook, reportObject.getCurrencyRateList(),
                reportObject.getMapMonthAndAverageCurrencyRateUsdVnd(),
                styleTextHeaders, styleDate, styleNumber, styleMonthBold, styleNumberBold);
    }


    public static void buildExcelExportClientDocsForCheckInsurance(Map<String, Object> model,
                                                                   Workbook workbook) {
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        ExportClientDocumentForCheckingInsuranceReportObject object =
                (ExportClientDocumentForCheckingInsuranceReportObject) model.get("modelObject");

        createSheetForExportListClientDocsForCheckInsuranceReport(workbook, object, styleTextHeaders, styleSimpleText, styleDate);

    }

    public static void buildExcelExportPaymentsWithFeesReport(Map<String, Object> model,
                                                              Workbook workbook) {
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        ExportPaymentsWithPaidFeesReportObject exportPaymentsWithPaidFeesReportObject =
                (ExportPaymentsWithPaidFeesReportObject) model.get("modelObject");

        createSheetCommonInfoForExportPaymentsWithFeesReport(workbook, exportPaymentsWithPaidFeesReportObject,
                styleTitle, styleDateAndTime, styleDate, styleSimpleText);

        createSheetPaymentsListExportPaymentsWithFeesReport(workbook, exportPaymentsWithPaidFeesReportObject,
                styleTextHeaders, styleSimpleText, styleTitle, styleNumber, styleNumberBold, styleDate);

        createSheetPaymentsGroupedByDateListExportPaymentsWithFeesReport(workbook, exportPaymentsWithPaidFeesReportObject,
                styleTextHeaders, styleTitle, styleNumber, styleNumberBold, styleDate);
    }

    public static void buildExcelStagesWithAssignedBonusReport(Map<String, Object> model,
                                                               Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle stylePercent = workbook.createCellStyle();
        createCellStylePercent(stylePercent, fontSimpleCells, creationHelper);

        CellStyle stylePercentBold = workbook.createCellStyle();
        createCellStylePercentBold(stylePercentBold, fontHeaders, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        StagesWithAssignedBonusReportObject stagesWithAssignedBonusReportObject =
                (StagesWithAssignedBonusReportObject) model.get("modelObject");

        StagesWithAssignedUserResult stagesWithAssignedUserResult = new StagesWithAssignedUserResult();

        for(StagesWithAssignedUserResult userResult : stagesWithAssignedBonusReportObject.getStagesWithAssignedUserResultList()) {
            stagesWithAssignedUserResult.setTotalPaymentCount(stagesWithAssignedUserResult.getTotalPaymentCount() +
                    userResult.getTotalPaymentCount());
            stagesWithAssignedUserResult.setPaymentCountFrom1To15OverdueDays(stagesWithAssignedUserResult.getPaymentCountFrom1To15OverdueDays() +
                    userResult.getPaymentCountFrom1To15OverdueDays());
            stagesWithAssignedUserResult.setPaymentCountFrom16To29OverdueDays(stagesWithAssignedUserResult.getPaymentCountFrom16To29OverdueDays() +
                    userResult.getPaymentCountFrom16To29OverdueDays());
            stagesWithAssignedUserResult.setPaymentCountFrom30To60OverdueDays(stagesWithAssignedUserResult.getPaymentCountFrom30To60OverdueDays() +
                    userResult.getPaymentCountFrom30To60OverdueDays());
            stagesWithAssignedUserResult.setPaymentCountFrom61AndMoreOverdueDays(stagesWithAssignedUserResult.getPaymentCountFrom61AndMoreOverdueDays() +
                    userResult.getPaymentCountFrom61AndMoreOverdueDays());
            stagesWithAssignedUserResult.setTotalPaymentAmount(stagesWithAssignedUserResult.getTotalPaymentAmount() +
                    userResult.getTotalPaymentAmount());
            stagesWithAssignedUserResult.setPaymentAmountFrom1To15OverdueDays(stagesWithAssignedUserResult.getPaymentAmountFrom1To15OverdueDays() +
                    userResult.getPaymentAmountFrom1To15OverdueDays());
            stagesWithAssignedUserResult.setPaymentAmountFrom30To60OverdueDays(stagesWithAssignedUserResult.getPaymentAmountFrom30To60OverdueDays() +
                    userResult.getPaymentAmountFrom30To60OverdueDays());
            stagesWithAssignedUserResult.setPaymentAmountFrom16To29OverdueDays(stagesWithAssignedUserResult.getPaymentAmountFrom16To29OverdueDays() +
                    userResult.getPaymentAmountFrom16To29OverdueDays());
            stagesWithAssignedUserResult.setPaymentAmountFrom61AndMoreOverdueDays(stagesWithAssignedUserResult.getPaymentAmountFrom61AndMoreOverdueDays() +
                    userResult.getPaymentAmountFrom61AndMoreOverdueDays());
            stagesWithAssignedUserResult.setBonusAmountTotal(stagesWithAssignedUserResult.getBonusAmountTotal() +
                    userResult.getBonusAmountTotal());
            stagesWithAssignedUserResult.setBonusAmountFrom1To15DaysOverdue(stagesWithAssignedUserResult.getBonusAmountFrom1To15DaysOverdue() +
                    userResult.getBonusAmountFrom1To15DaysOverdue());
            stagesWithAssignedUserResult.setBonusAmountFrom16To29DaysOverdue(stagesWithAssignedUserResult.getBonusAmountFrom16To29DaysOverdue() +
                    userResult.getBonusAmountFrom16To29DaysOverdue());
            stagesWithAssignedUserResult.setBonusAmountFrom30To60DaysOverdue(stagesWithAssignedUserResult.getBonusAmountFrom30To60DaysOverdue() +
                    userResult.getBonusAmountFrom30To60DaysOverdue());
            stagesWithAssignedUserResult.setBonusAmountFrom61AndMoreDaysOverdue(stagesWithAssignedUserResult.getBonusAmountFrom61AndMoreDaysOverdue() +
                    userResult.getBonusAmountFrom61AndMoreDaysOverdue());
        }


        // Creating Sheets
        createSheetCommonInfoForStagesWithAssignedBonusReport(workbook, stagesWithAssignedBonusReportObject,
                styleTitle, styleDateAndTime, styleDate, styleSimpleText, styleTextHeaders, styleNumber, stylePercent);

        createSheetBonusAmountForStagesWithAssignedBonusReport(workbook, stagesWithAssignedBonusReportObject,
                stagesWithAssignedUserResult, styleSimpleText, styleTextHeaders, styleNumber, styleNumberBold);

        createSheetUsersResultsForStagesWithAssignedBonusReport(workbook, stagesWithAssignedBonusReportObject,
                stagesWithAssignedUserResult, styleSimpleText, styleTextHeaders, styleNumber, styleNumberBold,
                stylePercent, stylePercentBold);

    }

    public static void buildExcelPreSoftBonusReport(Map<String, Object> model,
                                                    Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle stylePercent = workbook.createCellStyle();
        createCellStylePercent(stylePercent, fontSimpleCells, creationHelper);

        CellStyle stylePercentBold = workbook.createCellStyle();
        createCellStylePercentBold(stylePercentBold, fontHeaders, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);


        //get Object for Excel
        PreSoftBonusReportObject preSoftBonusReportObject =
                (PreSoftBonusReportObject) model.get("modelObject");

        PreSoftBackUserResult userResultTotal = new PreSoftBackUserResult();

        for (int a = 0; a < preSoftBonusReportObject.getPreSoftBackUserResultList().size(); a++) {
            userResultTotal.setTotalCountCalls(userResultTotal.getTotalCountCalls() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalCountCalls());
            userResultTotal.setCountManualCalls(userResultTotal.getCountManualCalls() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountManualCalls());
            userResultTotal.setCountInboundCalls(userResultTotal.getCountInboundCalls() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountInboundCalls());
            userResultTotal.setCountOutboundCalls(userResultTotal.getCountOutboundCalls() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountOutboundCalls());
            userResultTotal.setCountCallsWithMinTalkSec(userResultTotal.getCountCallsWithMinTalkSec() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountCallsWithMinTalkSec());
            userResultTotal.setCountCallsWithMinTalkAndNeededStatuses(userResultTotal.getCountCallsWithMinTalkAndNeededStatuses() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountCallsWithMinTalkAndNeededStatuses());
            userResultTotal.setCountResultPayment(userResultTotal.getCountResultPayment() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountResultPayment());
            userResultTotal.setTotalPaymentAmount(userResultTotal.getTotalPaymentAmount() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmount());
            userResultTotal.setPaymentAmountFrom1To15OverdueDays(userResultTotal.getPaymentAmountFrom1To15OverdueDays() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom1To15OverdueDays());
            userResultTotal.setPaymentAmountFrom16To29OverdueDays(userResultTotal.getPaymentAmountFrom16To29OverdueDays() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom16To29OverdueDays());
            userResultTotal.setPaymentAmountFrom30To60OverdueDays(userResultTotal.getPaymentAmountFrom30To60OverdueDays() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom30To60OverdueDays());
            userResultTotal.setPaymentAmountFrom61AndMoreOverdueDays(userResultTotal.getPaymentAmountFrom61AndMoreOverdueDays() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom61AndMoreOverdueDays());
            userResultTotal.setTotalPaymentAmountWithAssigned(userResultTotal.getTotalPaymentAmountWithAssigned() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountWithAssigned());
            userResultTotal.setPaymentAmountFrom1To15OverdueDaysWithAssigned(userResultTotal.getPaymentAmountFrom1To15OverdueDaysWithAssigned() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom1To15OverdueDaysWithAssigned());
            userResultTotal.setPaymentAmountFrom16To29OverdueDaysWithAssigned(userResultTotal.getPaymentAmountFrom16To29OverdueDaysWithAssigned() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom16To29OverdueDaysWithAssigned());
            userResultTotal.setPaymentAmountFrom30To60OverdueDaysWithAssigned(userResultTotal.getPaymentAmountFrom30To60OverdueDaysWithAssigned() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom30To60OverdueDaysWithAssigned());
            userResultTotal.setPaymentAmountFrom61AndMoreOverdueDaysWithAssigned(userResultTotal.getPaymentAmountFrom61AndMoreOverdueDaysWithAssigned() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom61AndMoreOverdueDaysWithAssigned());
            userResultTotal.setTotalPaymentAmountNoAssigned(userResultTotal.getTotalPaymentAmountNoAssigned() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountNoAssigned());
            userResultTotal.setPaymentAmountFrom1To15OverdueDaysNoAssigned(userResultTotal.getPaymentAmountFrom1To15OverdueDaysNoAssigned() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom1To15OverdueDaysNoAssigned());
            userResultTotal.setPaymentAmountFrom16To29OverdueDaysNoAssigned(userResultTotal.getPaymentAmountFrom16To29OverdueDaysNoAssigned() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom16To29OverdueDaysNoAssigned());
            userResultTotal.setPaymentAmountFrom30To60OverdueDaysNoAssigned(userResultTotal.getPaymentAmountFrom30To60OverdueDaysNoAssigned() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom30To60OverdueDaysNoAssigned());
            userResultTotal.setPaymentAmountFrom61AndMoreOverdueDaysNoAssigned(userResultTotal.getPaymentAmountFrom61AndMoreOverdueDaysNoAssigned() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom61AndMoreOverdueDaysNoAssigned());
            userResultTotal.setBonusAmountTotal(userResultTotal.getBonusAmountTotal() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountTotal());
            userResultTotal.setBonusAmountFrom1To15DaysOverdue(userResultTotal.getBonusAmountFrom1To15DaysOverdue() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountFrom1To15DaysOverdue());
            userResultTotal.setBonusAmountFrom16To29DaysOverdue(userResultTotal.getBonusAmountFrom16To29DaysOverdue() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountFrom16To29DaysOverdue());
            userResultTotal.setBonusAmountFrom30To60DaysOverdue(userResultTotal.getBonusAmountFrom30To60DaysOverdue() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountFrom30To60DaysOverdue());
            userResultTotal.setBonusAmountFrom61AndMoreDaysOverdue(userResultTotal.getBonusAmountFrom61AndMoreDaysOverdue() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountFrom61AndMoreDaysOverdue());
            userResultTotal.setCountCallsInListRemindingPromisedPayments(userResultTotal.getCountCallsInListRemindingPromisedPayments() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountCallsInListRemindingPromisedPayments());
            userResultTotal.setBonusAmountForRemindingCalls(userResultTotal.getBonusAmountForRemindingCalls() +
                    preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountForRemindingCalls());
            userResultTotal
                    .setCountCallsInListRemindingPromisedPaymentsWithMinTalkSecAndResultStatus(userResultTotal.getCountCallsInListRemindingPromisedPaymentsWithMinTalkSecAndResultStatus() +
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountCallsInListRemindingPromisedPaymentsWithMinTalkSecAndResultStatus());
        }

        //build Workbooks

        createSheetCommonInfoForPreSoftCollectionBonusReport(workbook, preSoftBonusReportObject, styleTitle,
                styleDateAndTime, styleDate, styleSimpleText, styleTextHeaders, styleNumber, stylePercent);

        createSheetBonusAmountForPreSoftCollectionBonusReport(workbook, preSoftBonusReportObject, userResultTotal,
                styleSimpleText, styleTextHeaders, styleNumber, styleNumberBold);

        createSheetUsersResultsForPreSoftCollectionBonusReport(workbook, preSoftBonusReportObject, userResultTotal,
                styleSimpleText, styleTextHeaders, styleNumber, styleNumberBold, stylePercent, stylePercentBold);
    }



    public static void buildExcelCommonDataWithAssignedCollectorReport(Map<String, Object> model,
                                                                       Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleSimpleText = workbook.createCellStyle();
        createCellStyleSimpleText(styleSimpleText, fontSimpleCells);

        //get Object for Excel
        CommonDataAssignedCollectorReportObject commonDataAssignedCollectorReportObject =
                (CommonDataAssignedCollectorReportObject) model.get("modelObject");

        createSheetForCommonDataWithAssignedCollectorReport(workbook, commonDataAssignedCollectorReportObject,
                styleTextHeaders, styleNumber, styleSimpleText, styleDate);

    }

    public static void buildExcelMainDailyReport(Map<String, Object> model,
                                          Workbook workbook) {
        //Creating of cell styles
        CreationHelper creationHelper = workbook.getCreationHelper();
        Font fontHeaders = workbook.createFont();
        createFontHeaders(fontHeaders);

        Font fontSimpleCells = workbook.createFont();
        createFontSimpleCells(fontSimpleCells);

        CellStyle styleTitle = workbook.createCellStyle();
        createCellStyleTitle(styleTitle, fontHeaders);

        CellStyle styleTextHeaders = workbook.createCellStyle();
        createCellStyleTextHeaders(styleTextHeaders, fontHeaders);

        CellStyle styleDateAndTime = workbook.createCellStyle();
        createCellStyleDateAndTime(styleDateAndTime, fontSimpleCells, creationHelper);

        CellStyle styleDate = workbook.createCellStyle();
        createCellStyleDate(styleDate, fontSimpleCells, creationHelper);

        CellStyle styleDateBold = workbook.createCellStyle();
        createCellStyleDateBold(styleDateBold, fontHeaders, creationHelper);

        CellStyle styleMonth = workbook.createCellStyle();
        createCellStyleMonth(styleMonth, fontSimpleCells, creationHelper);

        CellStyle styleMonthBold = workbook.createCellStyle();
        createCellStyleMonthBold(styleMonthBold, fontHeaders, creationHelper);

        CellStyle stylePercent = workbook.createCellStyle();
        createCellStylePercent(stylePercent, fontSimpleCells, creationHelper);

        CellStyle stylePercentBold = workbook.createCellStyle();
        createCellStylePercentBold(stylePercentBold, fontHeaders, creationHelper);

        CellStyle styleNumber = workbook.createCellStyle();
        createCellStyleNumber(styleNumber, fontSimpleCells, creationHelper);

        CellStyle styleNumberBold = workbook.createCellStyle();
        createCellStyleNumberBold(styleNumberBold, fontHeaders, creationHelper);


        //get Object for Excel
        MainDailyReportObject mainDailyReportObject = (MainDailyReportObject) model.get("modelObject");


        //Workbook. Creating sheets

        createSheetMain(workbook, mainDailyReportObject, styleTitle, styleTextHeaders, styleDateBold, styleDateAndTime,
                styleMonth, styleNumber, styleNumberBold, stylePercent, stylePercentBold);

        createSheetsCommonDailyUsd(workbook, mainDailyReportObject, styleTextHeaders, styleDate, stylePercent,
                styleNumber, styleMonthBold, stylePercentBold, styleNumberBold);

        createSheetsExpiredLoansUsd(workbook, mainDailyReportObject, styleTextHeaders, styleDate, stylePercent,
                styleNumber, styleMonthBold, stylePercentBold, styleNumberBold);

        createSheetCurrencyRates(workbook, mainDailyReportObject.getCurrencyRateList(),
                mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd(),
                styleTextHeaders, styleDate, styleNumber, styleMonthBold, styleNumberBold);

        createSheetsCommonDailyVnd(workbook, mainDailyReportObject, styleTextHeaders, styleDate, stylePercent,
                styleNumber, styleMonthBold, stylePercentBold, styleNumberBold);

        createSheetsExpiredLoansVnd(workbook, mainDailyReportObject, styleTextHeaders, styleDate, stylePercent,
                styleNumber, styleMonthBold, stylePercentBold, styleNumberBold);
    }

    private static void createSheetUsersResultsForStagesWithAssignedBonusReport(Workbook workbook,
                                                                                StagesWithAssignedBonusReportObject stagesWithAssignedBonusReportObject,
                                                                                StagesWithAssignedUserResult resultTotal,
                                                                                CellStyle styleSimpleText,
                                                                                CellStyle styleTextHeaders,
                                                                                CellStyle styleNumber,
                                                                                CellStyle styleNumberBold,
                                                                                CellStyle stylePercent,
                                                                                CellStyle stylePercentBold) {
        Sheet sheet = workbook.createSheet("Agents' results");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        rowHead.createCell(0).setCellValue("Employee's full name");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 0, 0));
        rowHead.createCell(1).setCellValue("Employee's email");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 1, 1));
        rowHead.createCell(2).setCellValue("Employee's role");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 2, 2));
        rowHead.createCell(3).setCellValue("Payments on 1 - 15 DPD");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 3, 5));
        rowHead.createCell(6).setCellValue("Payments on 16 - 60 DPD");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 6, 8));
        rowHead.createCell(9).setCellValue("Payments on ... - ... DPD");
        rowHead.getCell(9).setCellStyle(styleTextHeaders);
        rowHead.createCell(10).setCellStyle(styleTextHeaders);
        rowHead.createCell(11).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 9, 11));
        rowHead.createCell(12).setCellValue("Payments on 61 and more DPD");
        rowHead.getCell(12).setCellStyle(styleTextHeaders);
        rowHead.createCell(13).setCellStyle(styleTextHeaders);
        rowHead.createCell(14).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 12, 14));
        rowHead.createCell(15).setCellValue("Total payments");
        rowHead.getCell(15).setCellStyle(styleTextHeaders);
        rowHead.createCell(16).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 15, 16));

        rowNumber += 1;

        Row rowUnderHead = sheet.createRow(rowNumber);
        rowUnderHead.createCell(0).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(1).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(2).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(3).setCellValue("Count");
        rowUnderHead.getCell(3).setCellStyle(styleNumber);
        rowUnderHead.createCell(4).setCellValue("Amount");
        rowUnderHead.getCell(4).setCellStyle(styleNumber);
        rowUnderHead.createCell(5).setCellValue("% from total");
        rowUnderHead.getCell(5).setCellStyle(stylePercent);
        rowUnderHead.createCell(6).setCellValue("Count");
        rowUnderHead.getCell(6).setCellStyle(styleNumber);
        rowUnderHead.createCell(7).setCellValue("Amount");
        rowUnderHead.getCell(7).setCellStyle(styleNumber);
        rowUnderHead.createCell(8).setCellValue("% from total");
        rowUnderHead.getCell(8).setCellStyle(stylePercent);
        rowUnderHead.createCell(9).setCellValue("Count");
        rowUnderHead.getCell(9).setCellStyle(styleNumber);
        rowUnderHead.createCell(10).setCellValue("Amount");
        rowUnderHead.getCell(10).setCellStyle(styleNumber);
        rowUnderHead.createCell(11).setCellValue("% from total");
        rowUnderHead.getCell(11).setCellStyle(stylePercent);
        rowUnderHead.createCell(12).setCellValue("Count");
        rowUnderHead.getCell(12).setCellStyle(styleNumber);
        rowUnderHead.createCell(13).setCellValue("Amount");
        rowUnderHead.getCell(13).setCellStyle(styleNumber);
        rowUnderHead.createCell(14).setCellValue("% from total");
        rowUnderHead.getCell(14).setCellStyle(stylePercent);
        rowUnderHead.createCell(15).setCellValue("Count");
        rowUnderHead.getCell(15).setCellStyle(styleNumber);
        rowUnderHead.createCell(16).setCellValue("Amount");
        rowUnderHead.getCell(16).setCellStyle(styleNumber);
        
        rowNumber += 1;
        
        for (StagesWithAssignedUserResult result : stagesWithAssignedBonusReportObject.getStagesWithAssignedUserResultList()) {
            Row row = sheet.createRow(rowNumber);
            
            row.createCell(0).setCellValue(result.getUserFullName());
            row.getCell(0).setCellStyle(styleSimpleText);
            row.createCell(1).setCellValue(result.getUserEmail());
            row.getCell(1).setCellStyle(styleSimpleText);
            row.createCell(2).setCellValue(result.getUserRole());
            row.getCell(2).setCellStyle(styleSimpleText);
            row.createCell(3).setCellValue(result.getPaymentCountFrom1To15OverdueDays());
            row.getCell(3).setCellStyle(styleNumber);
            row.createCell(4).setCellValue(result.getPaymentAmountFrom1To15OverdueDays());
            row.getCell(4).setCellStyle(styleNumber);
            row.createCell(5).setCellValue(result.getPaymentAmountFrom1To15OverdueDays() / 
                    result.getTotalPaymentAmount());
            row.getCell(5).setCellStyle(stylePercent);
            row.createCell(6).setCellValue(result.getPaymentCountFrom16To29OverdueDays());
            row.getCell(6).setCellStyle(styleNumber);
            row.createCell(7).setCellValue(result.getPaymentAmountFrom16To29OverdueDays());
            row.getCell(7).setCellStyle(styleNumber);
            row.createCell(8).setCellValue(result.getPaymentAmountFrom16To29OverdueDays() /
                    result.getTotalPaymentAmount());
            row.getCell(8).setCellStyle(stylePercent);
            row.createCell(9).setCellValue(result.getPaymentCountFrom30To60OverdueDays());
            row.getCell(9).setCellStyle(styleNumber);
            row.createCell(10).setCellValue(result.getPaymentAmountFrom30To60OverdueDays());
            row.getCell(10).setCellStyle(styleNumber);
            row.createCell(11).setCellValue(result.getPaymentAmountFrom30To60OverdueDays() /
                    result.getTotalPaymentAmount());
            row.getCell(11).setCellStyle(stylePercent);
            row.createCell(12).setCellValue(result.getPaymentCountFrom61AndMoreOverdueDays());
            row.getCell(12).setCellStyle(styleNumber);
            row.createCell(13).setCellValue(result.getPaymentAmountFrom61AndMoreOverdueDays());
            row.getCell(13).setCellStyle(styleNumber);
            row.createCell(14).setCellValue(result.getPaymentAmountFrom61AndMoreOverdueDays() /
                    result.getTotalPaymentAmount());
            row.getCell(14).setCellStyle(stylePercent);
            row.createCell(15).setCellValue(result.getTotalPaymentCount());
            row.getCell(15).setCellStyle(styleNumber);
            row.createCell(16).setCellValue(result.getTotalPaymentAmount());
            row.getCell(16).setCellStyle(styleNumber);
            
            rowNumber += 1;
        }

        Row row = sheet.createRow(rowNumber);
        row.createCell(0)
                .setCellValue("Total");
        row.getCell(0).setCellStyle(styleTextHeaders);
        row.createCell(1).setCellStyle(styleTextHeaders);
        row.createCell(2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 0, 2));
        row.createCell(3).setCellValue(resultTotal.getPaymentCountFrom1To15OverdueDays());
        row.getCell(3).setCellStyle(styleNumberBold);
        row.createCell(4).setCellValue(resultTotal.getPaymentAmountFrom1To15OverdueDays());
        row.getCell(4).setCellStyle(styleNumberBold);
        row.createCell(5).setCellValue(resultTotal.getPaymentAmountFrom1To15OverdueDays() /
                resultTotal.getTotalPaymentAmount());
        row.getCell(5).setCellStyle(stylePercentBold);
        row.createCell(6).setCellValue(resultTotal.getPaymentCountFrom16To29OverdueDays());
        row.getCell(6).setCellStyle(styleNumberBold);
        row.createCell(7).setCellValue(resultTotal.getPaymentAmountFrom16To29OverdueDays());
        row.getCell(7).setCellStyle(styleNumberBold);
        row.createCell(8).setCellValue(resultTotal.getPaymentAmountFrom16To29OverdueDays() /
                resultTotal.getTotalPaymentAmount());
        row.getCell(8).setCellStyle(stylePercentBold);
        row.createCell(9).setCellValue(resultTotal.getPaymentCountFrom30To60OverdueDays());
        row.getCell(9).setCellStyle(styleNumberBold);
        row.createCell(10).setCellValue(resultTotal.getPaymentAmountFrom30To60OverdueDays());
        row.getCell(10).setCellStyle(styleNumberBold);
        row.createCell(11).setCellValue(resultTotal.getPaymentAmountFrom30To60OverdueDays() /
                resultTotal.getTotalPaymentAmount());
        row.getCell(11).setCellStyle(stylePercentBold);
        row.createCell(12).setCellValue(resultTotal.getPaymentCountFrom61AndMoreOverdueDays());
        row.getCell(12).setCellStyle(styleNumberBold);
        row.createCell(13).setCellValue(resultTotal.getPaymentAmountFrom61AndMoreOverdueDays());
        row.getCell(13).setCellStyle(styleNumberBold);
        row.createCell(14).setCellValue(resultTotal.getPaymentAmountFrom61AndMoreOverdueDays() /
                resultTotal.getTotalPaymentAmount());
        row.getCell(14).setCellStyle(stylePercentBold);
        row.createCell(15).setCellValue(resultTotal.getTotalPaymentCount());
        row.getCell(15).setCellStyle(styleNumberBold);
        row.createCell(16).setCellValue(resultTotal.getTotalPaymentAmount());
        row.getCell(16).setCellStyle(styleNumberBold);

        //column width
        sheet.groupColumn(3,14);

        sheet.setColumnWidth(0, 35 * 256);
        sheet.setColumnWidth(1, 35 * 256);
        sheet.setColumnWidth(2, 30 * 256);
        int a = 3;
        while (a <= 16) {
            sheet.setColumnWidth(a, 22 * 256);
            a++;
        }
        sheet.createFreezePane(1,2);

    }

    private static void createSheetUsersResultsForPreSoftCollectionBonusReport(Workbook workbook,
                                                                               PreSoftBonusReportObject preSoftBonusReportObject,
                                                                               PreSoftBackUserResult userResultTotal,
                                                                               CellStyle styleSimpleText,
                                                                               CellStyle styleTextHeaders,
                                                                               CellStyle styleNumber,
                                                                               CellStyle styleNumberBold,
                                                                               CellStyle stylePercent,
                                                                               CellStyle stylePercentBold) {
        Sheet sheet = workbook.createSheet("Agents' results");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        rowHead.createCell(0).setCellValue("Employee's full name");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 0, 0));
        rowHead.createCell(1).setCellValue("Employee's email");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 1, 1));
        rowHead.createCell(2).setCellValue("Employee's role");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 2, 2));
        rowHead.createCell(3).setCellValue("Inbound calls");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 3, 4));
        rowHead.createCell(5).setCellValue("Outbound manual calls");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 5, 6));
        rowHead.createCell(7).setCellValue("Outbound auto calls");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 7, 8));
        rowHead.createCell(9).setCellValue("Total count of calls");
        rowHead.getCell(9).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 9, 9));
        rowHead.createCell(10).setCellValue("Calls with min duration of talk");
        rowHead.getCell(10).setCellStyle(styleTextHeaders);
        rowHead.createCell(11).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 10, 11));
        rowHead.createCell(12).setCellValue("Calls with min duration of talk and resulting statuses");
        rowHead.getCell(12).setCellStyle(styleTextHeaders);
        rowHead.createCell(13).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 12, 13));
        rowHead.createCell(14).setCellValue("Payments after resulting calls");
        rowHead.getCell(14).setCellStyle(styleTextHeaders);
        rowHead.createCell(15).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 14, 15));
        rowHead.createCell(16).setCellValue("Payments on 1 - 15 DPD (with Assigned)");
        rowHead.getCell(16).setCellStyle(styleTextHeaders);
        rowHead.createCell(17).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 16, 17));
        rowHead.createCell(18).setCellValue("Payments on 16 - 29 DPD (with Assigned)");
        rowHead.getCell(18).setCellStyle(styleTextHeaders);
        rowHead.createCell(19).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 18, 19));
        rowHead.createCell(20).setCellValue("Payments on 30 - 60 DPD (with Assigned)");
        rowHead.getCell(20).setCellStyle(styleTextHeaders);
        rowHead.createCell(21).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 20, 21));
        rowHead.createCell(22).setCellValue("Payments on 61 and more DPD (with Assigned)");
        rowHead.getCell(22).setCellStyle(styleTextHeaders);
        rowHead.createCell(23).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 22, 23));
        rowHead.createCell(24).setCellValue("Total payments (with Assigned)");
        rowHead.getCell(24).setCellStyle(styleTextHeaders);
        rowHead.createCell(25).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 24, 25));
        rowHead.createCell(26).setCellValue("Payments on 1 - 15 DPD (without Assigned)");
        rowHead.getCell(26).setCellStyle(styleTextHeaders);
        rowHead.createCell(27).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 26, 27));
        rowHead.createCell(28).setCellValue("Payments on 16 - 29 DPD (without Assigned)");
        rowHead.getCell(28).setCellStyle(styleTextHeaders);
        rowHead.createCell(29).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 28, 29));
        rowHead.createCell(30).setCellValue("Payments on 30 - 60 DPD (without Assigned)");
        rowHead.getCell(30).setCellStyle(styleTextHeaders);
        rowHead.createCell(31).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 30, 31));
        rowHead.createCell(32).setCellValue("Payments on 61 and more DPD (without Assigned)");
        rowHead.getCell(32).setCellStyle(styleTextHeaders);
        rowHead.createCell(33).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 32, 33));
        rowHead.createCell(34).setCellValue("Total payments (without Assigned)");
        rowHead.getCell(34).setCellStyle(styleTextHeaders);
        rowHead.createCell(35).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 34, 35));
        rowHead.createCell(36).setCellValue("Payments on 1 - 15 DPD");
        rowHead.getCell(36).setCellStyle(styleTextHeaders);
        rowHead.createCell(37).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 36, 37));
        rowHead.createCell(38).setCellValue("Payments on 16 - 29 DPD");
        rowHead.getCell(38).setCellStyle(styleTextHeaders);
        rowHead.createCell(39).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 38, 39));
        rowHead.createCell(40).setCellValue("Payments on 30 - 60 DPD");
        rowHead.getCell(40).setCellStyle(styleTextHeaders);
        rowHead.createCell(41).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 40, 41));
        rowHead.createCell(42).setCellValue("Payments on 61 and more DPD");
        rowHead.getCell(42).setCellStyle(styleTextHeaders);
        rowHead.createCell(43).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 42, 43));
        rowHead.createCell(44).setCellValue("Total amount of payments");
        rowHead.getCell(44).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 44, 44));

        rowHead.createCell(45).setCellValue("Service calls (Reminding PTP)");
        rowHead.getCell(45).setCellStyle(styleTextHeaders);
        rowHead.createCell(46).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 45, 46));

        rowNumber += 1;

        Row rowUnderHead = sheet.createRow(rowNumber);
        rowUnderHead.createCell(0).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(1).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(2).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(9).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(44).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(3).setCellValue("Count");
        rowUnderHead.getCell(3).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(4).setCellValue("% from total");
        rowUnderHead.getCell(4).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(5).setCellValue("Count");
        rowUnderHead.getCell(5).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(6).setCellValue("% from total");
        rowUnderHead.getCell(6).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(7).setCellValue("Count");
        rowUnderHead.getCell(7).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(8).setCellValue("% from total");
        rowUnderHead.getCell(8).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(10).setCellValue("Count");
        rowUnderHead.getCell(10).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(11).setCellValue("% from total");
        rowUnderHead.getCell(11).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(12).setCellValue("Count");
        rowUnderHead.getCell(12).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(13).setCellValue("% from total");
        rowUnderHead.getCell(13).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(14).setCellValue("Count");
        rowUnderHead.getCell(14).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(15).setCellValue("% from resulting calls");
        rowUnderHead.getCell(15).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(16).setCellValue("Amount");
        rowUnderHead.getCell(16).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(17).setCellValue("% from total amount (with assigned)");
        rowUnderHead.getCell(17).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(18).setCellValue("Amount");
        rowUnderHead.getCell(18).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(19).setCellValue("% from total amount (with assigned)");
        rowUnderHead.getCell(19).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(20).setCellValue("Amount");
        rowUnderHead.getCell(20).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(21).setCellValue("% from total amount (with assigned)");
        rowUnderHead.getCell(21).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(22).setCellValue("Amount");
        rowUnderHead.getCell(22).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(23).setCellValue("% from total amount (with assigned)");
        rowUnderHead.getCell(23).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(24).setCellValue("Amount");
        rowUnderHead.getCell(24).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(25).setCellValue("% from total amount of payments");
        rowUnderHead.getCell(25).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(26).setCellValue("Amount");
        rowUnderHead.getCell(26).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(27).setCellValue("% from total amount (without assigned)");
        rowUnderHead.getCell(27).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(28).setCellValue("Amount");
        rowUnderHead.getCell(28).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(29).setCellValue("% from total amount (without assigned)");
        rowUnderHead.getCell(29).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(30).setCellValue("Amount");
        rowUnderHead.getCell(30).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(31).setCellValue("% from total amount (without assigned)");
        rowUnderHead.getCell(31).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(32).setCellValue("Amount");
        rowUnderHead.getCell(32).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(33).setCellValue("% from total amount (without assigned)");
        rowUnderHead.getCell(33).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(34).setCellValue("Amount");
        rowUnderHead.getCell(34).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(35).setCellValue("% from total amount of payments");
        rowUnderHead.getCell(35).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(36).setCellValue("Amount");
        rowUnderHead.getCell(36).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(37).setCellValue("% from total amount");
        rowUnderHead.getCell(37).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(38).setCellValue("Amount");
        rowUnderHead.getCell(38).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(39).setCellValue("% from total amount");
        rowUnderHead.getCell(39).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(40).setCellValue("Amount");
        rowUnderHead.getCell(40).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(41).setCellValue("% from total amount");
        rowUnderHead.getCell(41).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(42).setCellValue("Amount");
        rowUnderHead.getCell(42).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(43).setCellValue("% from total amount");
        rowUnderHead.getCell(43).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(45).setCellValue("Total count of calls");
        rowUnderHead.getCell(45).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(46).setCellValue("Calls with min duration talk and resulted statuses");
        rowUnderHead.getCell(46).setCellStyle(styleTextHeaders);

        rowNumber += 1;

        for(int a = 0; a < preSoftBonusReportObject.getPreSoftBackUserResultList().size(); a++) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getUserFullName());
            row.getCell(0).setCellStyle(styleSimpleText);
            row.createCell(1)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getUserEmail());
            row.getCell(1).setCellStyle(styleSimpleText);
            row.createCell(2)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getUserRole());
            row.getCell(2).setCellStyle(styleSimpleText);
            row.createCell(3)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountInboundCalls());
            row.getCell(3).setCellStyle(styleNumber);
            row.createCell(4)
                    .setCellValue((double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountInboundCalls() /
                            (double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalCountCalls());
            row.getCell(4).setCellStyle(stylePercent);
            row.createCell(5)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountManualCalls());
            row.getCell(5).setCellStyle(styleNumber);
            row.createCell(6)
                    .setCellValue((double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountManualCalls() /
                            (double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalCountCalls());
            row.getCell(6).setCellStyle(stylePercent);
            row.createCell(7)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountOutboundCalls());
            row.getCell(7).setCellStyle(styleNumber);
            row.createCell(8)
                    .setCellValue((double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountOutboundCalls() /
                            (double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalCountCalls());
            row.getCell(8).setCellStyle(stylePercent);
            row.createCell(9)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalCountCalls());
            row.getCell(9).setCellStyle(styleNumber);
            row.createCell(10)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountCallsWithMinTalkSec());
            row.getCell(10).setCellStyle(styleNumber);
            row.createCell(11)
                    .setCellValue((double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountCallsWithMinTalkSec() /
                            (double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalCountCalls());
            row.getCell(11).setCellStyle(stylePercent);
            row.createCell(12)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountCallsWithMinTalkAndNeededStatuses());
            row.getCell(12).setCellStyle(styleNumber);
            row.createCell(13)
                    .setCellValue((double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountCallsWithMinTalkAndNeededStatuses() /
                            (double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalCountCalls());
            row.getCell(13).setCellStyle(stylePercent);
            row.createCell(14)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountResultPayment());
            row.getCell(14).setCellStyle(styleNumber);
            row.createCell(15)
                    .setCellValue((double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountResultPayment() /
                            (double) preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountCallsWithMinTalkAndNeededStatuses());
            row.getCell(15).setCellStyle(stylePercent);
            row.createCell(16)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom1To15OverdueDaysWithAssigned());
            row.getCell(16).setCellStyle(styleNumber);
            row.createCell(17)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom1To15OverdueDaysWithAssigned() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountWithAssigned());
            row.getCell(17).setCellStyle(stylePercent);
            row.createCell(18)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom16To29OverdueDaysWithAssigned());
            row.getCell(18).setCellStyle(styleNumber);
            row.createCell(19)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom16To29OverdueDaysWithAssigned() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountWithAssigned());
            row.getCell(19).setCellStyle(stylePercent);
            row.createCell(20)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom30To60OverdueDaysWithAssigned());
            row.getCell(20).setCellStyle(styleNumber);
            row.createCell(21)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom30To60OverdueDaysWithAssigned() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountWithAssigned());
            row.getCell(21).setCellStyle(stylePercent);
            row.createCell(22)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom61AndMoreOverdueDaysWithAssigned());
            row.getCell(22).setCellStyle(styleNumber);
            row.createCell(23)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom61AndMoreOverdueDaysWithAssigned() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountWithAssigned());
            row.getCell(23).setCellStyle(stylePercent);
            row.createCell(24)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountWithAssigned());
            row.getCell(24).setCellStyle(styleNumber);
            row.createCell(25)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountWithAssigned() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmount());
            row.getCell(25).setCellStyle(stylePercent);
            row.createCell(26)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom1To15OverdueDaysNoAssigned());
            row.getCell(26).setCellStyle(styleNumber);
            row.createCell(27)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom1To15OverdueDaysNoAssigned() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountNoAssigned());
            row.getCell(27).setCellStyle(stylePercent);
            row.createCell(28)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom16To29OverdueDaysNoAssigned());
            row.getCell(28).setCellStyle(styleNumber);
            row.createCell(29)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom16To29OverdueDaysNoAssigned() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountNoAssigned());
            row.getCell(29).setCellStyle(stylePercent);
            row.createCell(30)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom30To60OverdueDaysNoAssigned());
            row.getCell(30).setCellStyle(styleNumber);
            row.createCell(31)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom30To60OverdueDaysNoAssigned() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountNoAssigned());
            row.getCell(31).setCellStyle(stylePercent);
            row.createCell(32)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom61AndMoreOverdueDaysNoAssigned());
            row.getCell(32).setCellStyle(styleNumber);
            row.createCell(33)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom61AndMoreOverdueDaysNoAssigned() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountNoAssigned());
            row.getCell(33).setCellStyle(stylePercent);
            row.createCell(34)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountNoAssigned());
            row.getCell(34).setCellStyle(styleNumber);
            row.createCell(35)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmountNoAssigned() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmount());
            row.getCell(35).setCellStyle(stylePercent);
            row.createCell(36)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom1To15OverdueDays());
            row.getCell(36).setCellStyle(styleNumber);
            row.createCell(37)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom1To15OverdueDays() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmount());
            row.getCell(37).setCellStyle(stylePercent);
            row.createCell(38)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom16To29OverdueDays());
            row.getCell(38).setCellStyle(styleNumber);
            row.createCell(39)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom16To29OverdueDays() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmount());
            row.getCell(39).setCellStyle(stylePercent);
            row.createCell(40)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom30To60OverdueDays());
            row.getCell(40).setCellStyle(styleNumber);
            row.createCell(41)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom30To60OverdueDays() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmount());
            row.getCell(41).setCellStyle(stylePercent);
            row.createCell(42)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom61AndMoreOverdueDays());
            row.getCell(42).setCellStyle(styleNumber);
            row.createCell(43)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getPaymentAmountFrom61AndMoreOverdueDays() /
                            preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmount());
            row.getCell(43).setCellStyle(stylePercent);
            row.createCell(44)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getTotalPaymentAmount());
            row.getCell(44).setCellStyle(styleNumber);

            row.createCell(45)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountCallsInListRemindingPromisedPayments());
            row.getCell(45).setCellStyle(styleNumber);

            row.createCell(46)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getCountCallsInListRemindingPromisedPaymentsWithMinTalkSecAndResultStatus());
            row.getCell(46).setCellStyle(styleNumber);

            rowNumber += 1;
        }

        Row row = sheet.createRow(rowNumber);
        row.createCell(0)
                .setCellValue("Total");
        row.getCell(0).setCellStyle(styleTextHeaders);
        row.createCell(1).setCellStyle(styleTextHeaders);
        row.createCell(2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 0, 2));
        row.createCell(3)
                .setCellValue(userResultTotal.getCountInboundCalls());
        row.getCell(3).setCellStyle(styleNumberBold);
        row.createCell(4)
                .setCellValue((double) userResultTotal.getCountInboundCalls() /
                        (double) userResultTotal.getTotalCountCalls());
        row.getCell(4).setCellStyle(stylePercentBold);
        row.createCell(5)
                .setCellValue(userResultTotal.getCountManualCalls());
        row.getCell(5).setCellStyle(styleNumberBold);
        row.createCell(6)
                .setCellValue((double) userResultTotal.getCountManualCalls() /
                        (double) userResultTotal.getTotalCountCalls());
        row.getCell(6).setCellStyle(stylePercentBold);
        row.createCell(7)
                .setCellValue(userResultTotal.getCountOutboundCalls());
        row.getCell(7).setCellStyle(styleNumberBold);
        row.createCell(8)
                .setCellValue((double) userResultTotal.getCountOutboundCalls() /
                        (double) userResultTotal.getTotalCountCalls());
        row.getCell(8).setCellStyle(stylePercentBold);
        row.createCell(9)
                .setCellValue(userResultTotal.getTotalCountCalls());
        row.getCell(9).setCellStyle(styleNumberBold);
        row.createCell(10)
                .setCellValue(userResultTotal.getCountCallsWithMinTalkSec());
        row.getCell(10).setCellStyle(styleNumberBold);
        row.createCell(11)
                .setCellValue((double) userResultTotal.getCountCallsWithMinTalkSec() /
                        (double) userResultTotal.getTotalCountCalls());
        row.getCell(11).setCellStyle(stylePercentBold);
        row.createCell(12)
                .setCellValue(userResultTotal.getCountCallsWithMinTalkAndNeededStatuses());
        row.getCell(12).setCellStyle(styleNumberBold);
        row.createCell(13)
                .setCellValue((double) userResultTotal.getCountCallsWithMinTalkAndNeededStatuses() /
                        (double) userResultTotal.getTotalCountCalls());
        row.getCell(13).setCellStyle(stylePercentBold);
        row.createCell(14)
                .setCellValue(userResultTotal.getCountResultPayment());
        row.getCell(14).setCellStyle(styleNumberBold);
        row.createCell(15)
                .setCellValue((double) userResultTotal.getCountResultPayment() /
                        (double) userResultTotal.getCountCallsWithMinTalkAndNeededStatuses());
        row.getCell(15).setCellStyle(stylePercentBold);
        row.createCell(16)
                .setCellValue(userResultTotal.getPaymentAmountFrom1To15OverdueDaysWithAssigned());
        row.getCell(16).setCellStyle(styleNumberBold);
        row.createCell(17)
                .setCellValue(userResultTotal.getPaymentAmountFrom1To15OverdueDaysWithAssigned() /
                        userResultTotal.getTotalPaymentAmountWithAssigned());
        row.getCell(17).setCellStyle(stylePercentBold);
        row.createCell(18)
                .setCellValue(userResultTotal.getPaymentAmountFrom16To29OverdueDaysWithAssigned());
        row.getCell(18).setCellStyle(styleNumberBold);
        row.createCell(19)
                .setCellValue(userResultTotal.getPaymentAmountFrom16To29OverdueDaysWithAssigned() /
                        userResultTotal.getTotalPaymentAmountWithAssigned());
        row.getCell(19).setCellStyle(stylePercentBold);
        row.createCell(20)
                .setCellValue(userResultTotal.getPaymentAmountFrom30To60OverdueDaysWithAssigned());
        row.getCell(20).setCellStyle(styleNumberBold);
        row.createCell(21)
                .setCellValue(userResultTotal.getPaymentAmountFrom30To60OverdueDaysWithAssigned() /
                        userResultTotal.getTotalPaymentAmountWithAssigned());
        row.getCell(21).setCellStyle(stylePercentBold);
        row.createCell(22)
                .setCellValue(userResultTotal.getPaymentAmountFrom61AndMoreOverdueDaysWithAssigned());
        row.getCell(22).setCellStyle(styleNumberBold);
        row.createCell(23)
                .setCellValue(userResultTotal.getPaymentAmountFrom61AndMoreOverdueDaysWithAssigned() /
                        userResultTotal.getTotalPaymentAmountWithAssigned());
        row.getCell(23).setCellStyle(stylePercentBold);
        row.createCell(24)
                .setCellValue(userResultTotal.getTotalPaymentAmountWithAssigned());
        row.getCell(24).setCellStyle(styleNumberBold);
        row.createCell(25)
                .setCellValue(userResultTotal.getTotalPaymentAmountWithAssigned() /
                        userResultTotal.getTotalPaymentAmount());
        row.getCell(25).setCellStyle(stylePercentBold);
        row.createCell(26)
                .setCellValue(userResultTotal.getPaymentAmountFrom1To15OverdueDaysNoAssigned());
        row.getCell(26).setCellStyle(styleNumberBold);
        row.createCell(27)
                .setCellValue(userResultTotal.getPaymentAmountFrom1To15OverdueDaysNoAssigned() /
                        userResultTotal.getTotalPaymentAmountNoAssigned());
        row.getCell(27).setCellStyle(stylePercentBold);
        row.createCell(28)
                .setCellValue(userResultTotal.getPaymentAmountFrom16To29OverdueDaysNoAssigned());
        row.getCell(28).setCellStyle(styleNumberBold);
        row.createCell(29)
                .setCellValue(userResultTotal.getPaymentAmountFrom16To29OverdueDaysNoAssigned() /
                        userResultTotal.getTotalPaymentAmountNoAssigned());
        row.getCell(29).setCellStyle(stylePercentBold);
        row.createCell(30)
                .setCellValue(userResultTotal.getPaymentAmountFrom30To60OverdueDaysNoAssigned());
        row.getCell(30).setCellStyle(styleNumberBold);
        row.createCell(31)
                .setCellValue(userResultTotal.getPaymentAmountFrom30To60OverdueDaysNoAssigned() /
                        userResultTotal.getTotalPaymentAmountNoAssigned());
        row.getCell(31).setCellStyle(stylePercentBold);
        row.createCell(32)
                .setCellValue(userResultTotal.getPaymentAmountFrom61AndMoreOverdueDaysNoAssigned());
        row.getCell(32).setCellStyle(styleNumberBold);
        row.createCell(33)
                .setCellValue(userResultTotal.getPaymentAmountFrom61AndMoreOverdueDaysNoAssigned() /
                        userResultTotal.getTotalPaymentAmountNoAssigned());
        row.getCell(33).setCellStyle(stylePercentBold);
        row.createCell(34)
                .setCellValue(userResultTotal.getTotalPaymentAmountNoAssigned());
        row.getCell(34).setCellStyle(styleNumberBold);
        row.createCell(35)
                .setCellValue(userResultTotal.getTotalPaymentAmountNoAssigned() /
                        userResultTotal.getTotalPaymentAmount());
        row.getCell(35).setCellStyle(stylePercentBold);
        row.createCell(36)
                .setCellValue(userResultTotal.getPaymentAmountFrom1To15OverdueDays());
        row.getCell(36).setCellStyle(styleNumberBold);
        row.createCell(37)
                .setCellValue(userResultTotal.getPaymentAmountFrom1To15OverdueDays() /
                        userResultTotal.getTotalPaymentAmount());
        row.getCell(37).setCellStyle(stylePercentBold);
        row.createCell(38)
                .setCellValue(userResultTotal.getPaymentAmountFrom16To29OverdueDays());
        row.getCell(38).setCellStyle(styleNumberBold);
        row.createCell(39)
                .setCellValue(userResultTotal.getPaymentAmountFrom16To29OverdueDays() /
                        userResultTotal.getTotalPaymentAmount());
        row.getCell(39).setCellStyle(stylePercentBold);
        row.createCell(40)
                .setCellValue(userResultTotal.getPaymentAmountFrom30To60OverdueDays());
        row.getCell(40).setCellStyle(styleNumberBold);
        row.createCell(41)
                .setCellValue(userResultTotal.getPaymentAmountFrom30To60OverdueDays() /
                        userResultTotal.getTotalPaymentAmount());
        row.getCell(41).setCellStyle(stylePercentBold);
        row.createCell(42)
                .setCellValue(userResultTotal.getPaymentAmountFrom61AndMoreOverdueDays());
        row.getCell(42).setCellStyle(styleNumberBold);
        row.createCell(43)
                .setCellValue(userResultTotal.getPaymentAmountFrom61AndMoreOverdueDays() /
                        userResultTotal.getTotalPaymentAmount());
        row.getCell(43).setCellStyle(stylePercentBold);
        row.createCell(44)
                .setCellValue(userResultTotal.getTotalPaymentAmount());
        row.getCell(44).setCellStyle(styleNumberBold);

        row.createCell(45)
                .setCellValue(userResultTotal.getCountCallsInListRemindingPromisedPayments());
        row.getCell(45).setCellStyle(styleNumberBold);

        row.createCell(46)
                .setCellValue(userResultTotal.getCountCallsInListRemindingPromisedPaymentsWithMinTalkSecAndResultStatus());
        row.getCell(46).setCellStyle(styleNumberBold);


        //column width
        sheet.groupColumn(3,8);
        sheet.groupColumn(16,23);
        sheet.groupColumn(26,33);
        sheet.groupColumn(36,43);

        sheet.setColumnWidth(0, 35 * 256);
        sheet.setColumnWidth(1, 35 * 256);
        sheet.setColumnWidth(2, 30 * 256);
        int a = 3;
        while (a <= 46) {
            sheet.setColumnWidth(a, 22 * 256);
            a++;
        }
        sheet.createFreezePane(1,2);


    }

    private static void createSheetPaymentsGroupedByDateListExportPaymentsWithFeesReport(Workbook workbook,
                                                                                         ExportPaymentsWithPaidFeesReportObject reportObject,
                                                                                         CellStyle styleTextHeaders,
                                                                                         CellStyle styleTitle,
                                                                                         CellStyle styleNumber,
                                                                                         CellStyle styleNumberBold,
                                                                                         CellStyle styleDate) {
        Sheet sheet = workbook.createSheet("Grouped results");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        int columnForRowHead = 0;

        Row rowHead = sheet.createRow(rowNumber);
        Row rowUnderHead = sheet.createRow(rowNumber + 1);

        rowHead.createCell(columnForRowHead).setCellValue("Date");
        rowHead.getCell(columnForRowHead).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(columnForRowHead).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,columnForRowHead, columnForRowHead));
        columnForRowHead++;

        int columnForUnderHead = columnForRowHead;

        rowHead.createCell(columnForRowHead).setCellValue("Credit broker");
        rowHead.getCell(columnForRowHead).setCellStyle(styleTextHeaders);
        rowHead.createCell(columnForRowHead + 1).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,columnForRowHead, columnForRowHead + 1));
        columnForRowHead += 2;

        rowUnderHead.createCell(columnForUnderHead).setCellValue("Revenue (exclude VAT)");
        rowUnderHead.getCell(columnForUnderHead).setCellStyle(styleTextHeaders);
        columnForUnderHead++;

        rowUnderHead.createCell(columnForUnderHead).setCellValue("VAT");
        rowUnderHead.getCell(columnForUnderHead).setCellStyle(styleTextHeaders);
        columnForUnderHead++;

        rowHead.createCell(columnForRowHead).setCellValue("Pawnshop");
        rowHead.getCell(columnForRowHead).setCellStyle(styleTextHeaders);
        rowHead.createCell(columnForRowHead + 1).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,columnForRowHead, columnForRowHead + 1));
        columnForRowHead += 2;

        rowUnderHead.createCell(columnForUnderHead).setCellValue("Revenue (exclude VAT)");
        rowUnderHead.getCell(columnForUnderHead).setCellStyle(styleTextHeaders);
        columnForUnderHead++;

        rowUnderHead.createCell(columnForUnderHead).setCellValue("VAT");
        rowUnderHead.getCell(columnForUnderHead).setCellStyle(styleTextHeaders);
        columnForUnderHead++;


        rowHead.createCell(columnForRowHead).setCellValue("Total");
        rowHead.getCell(columnForRowHead).setCellStyle(styleTextHeaders);
        rowHead.createCell(columnForRowHead + 1).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,columnForRowHead, columnForRowHead + 1));
        int columnForPass = columnForRowHead + 2;
        columnForRowHead += 3;

        rowUnderHead.createCell(columnForUnderHead).setCellValue("Revenue (exclude VAT)");
        rowUnderHead.getCell(columnForUnderHead).setCellStyle(styleTextHeaders);
        columnForUnderHead++;

        rowUnderHead.createCell(columnForUnderHead).setCellValue("VAT");
        rowUnderHead.getCell(columnForUnderHead).setCellStyle(styleTextHeaders);

        rowHead.createCell(columnForRowHead).setCellValue("Paid principal");
        rowHead.getCell(columnForRowHead).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(columnForRowHead).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,columnForRowHead, columnForRowHead));

        rowNumber += 2;

        for (ExportPaymentsWithFeesGroupedByDate payments : reportObject.getExportPaymentsWithFeesGroupedByDateList()) {
            if (!payments.isTotal()) {
                int columnNumber = 0;

                Row row = sheet.createRow(rowNumber);

                row.createCell(columnNumber).setCellValue(payments.getDate());
                row.getCell(columnNumber).setCellStyle(styleDate);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getRevenueBroker().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getOutgoingVATBroker().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getRevenuePawnShop().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getOutgoingVATPawnShop().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getTotalRevenue().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getTotalOutgoingVAT().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber += 2;

                row.createCell(columnNumber).setCellValue(payments.getPaidPrincipal().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);

                rowNumber++;
            }
        }

        for (ExportPaymentsWithFeesGroupedByDate payments : reportObject.getExportPaymentsWithFeesGroupedByDateList()) {
            if (payments.isTotal()) {
                int columnNumber = 0;

                Row row = sheet.createRow(rowNumber);

                row.createCell(columnNumber).setCellValue("Total");
                row.getCell(columnNumber).setCellStyle(styleTitle);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getRevenueBroker().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getOutgoingVATBroker().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getRevenuePawnShop().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getOutgoingVATPawnShop().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getTotalRevenue().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payments.getTotalOutgoingVAT().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber += 2;

                row.createCell(columnNumber).setCellValue(payments.getPaidPrincipal().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);

                rowNumber++;
            }
        }

        int b = 0;
        while (b <= columnForRowHead) {
            if (b != columnForPass) {
                sheet.setColumnWidth(b, 21 * 256);
            } else {
                sheet.setColumnWidth(b, 256);
            }
            b++;
        }
        sheet.createFreezePane(1,2);
    }

    private static void createSheetForExportLoansBySourceReport(Workbook workbook,
                                                               ExportLoansBySourceReportObject object,
                                                               CellStyle styleTextHeaders,
                                                               CellStyle styleSimpleText,
                                                               CellStyle styleDateTime,
                                                               CellStyle styleDate,
                                                               CellStyle styleNumber) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);

        rowHead.createCell(0).setCellValue("Source");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Date");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Application id");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("Utm source");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("Utm campaign");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("Utm content");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("Utm medium");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellValue("Utm referrer");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellValue("Utm term");
        rowHead.getCell(8).setCellStyle(styleTextHeaders);
        rowHead.createCell(9).setCellValue("Client type");
        rowHead.getCell(9).setCellStyle(styleTextHeaders);

        rowNumber++;

        for (ExportLoansBySource i : object.getExportLoansBySourceList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getSourceName());
            row.getCell(0).setCellStyle(styleSimpleText);
            row.createCell(1).setCellValue(i.getDateTime());
            row.getCell(1).setCellStyle(styleDateTime);
            row.createCell(2).setCellValue(i.getApplicationId());
            row.getCell(2).setCellStyle(styleNumber);
            row.createCell(3).setCellValue(i.getUtmSource());
            row.getCell(3).setCellStyle(styleSimpleText);
            row.createCell(4).setCellValue(i.getUtmCampaign());
            row.getCell(4).setCellStyle(styleSimpleText);
            row.createCell(5).setCellValue(i.getUtmContent());
            row.getCell(5).setCellStyle(styleSimpleText);
            row.createCell(6).setCellValue(i.getUtmMedium());
            row.getCell(6).setCellStyle(styleSimpleText);
            row.createCell(7).setCellValue(i.getUtmReferrer());
            row.getCell(7).setCellStyle(styleSimpleText);
            row.createCell(8).setCellValue(i.getUtmTerm());
            row.getCell(8).setCellStyle(styleSimpleText);
            row.createCell(9).setCellValue(i.getClientType());
            row.getCell(9).setCellStyle(styleSimpleText);

            rowNumber++;
        }
        rowNumber ++;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 11) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.createFreezePane(0,1);
    }

    private static void createSheetForExportDeactivatedPaymentsReport(Workbook workbook,
                                                                      ExportDeactivatedPaymentsReportObject object,
                                                                      CellStyle styleTextHeaders,
                                                                      CellStyle styleSimpleText,
                                                                      CellStyle styleDateTime,
                                                                      CellStyle styleDate,
                                                                      CellStyle styleNumber) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);

        rowHead.createCell(0).setCellValue("Deactivated at");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Link to loan");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Deactivated by");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("Contract");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("Amount");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("Comment");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("Activated at");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellValue("Created at");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);

        rowNumber++;

        for (ExportDeactivatedPayments i : object.getExportDeactivatedPaymentsList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getDeactivatedAt());
            row.getCell(0).setCellStyle(styleDateTime);
            row.createCell(1).setCellValue("https://app.tienoi.com.vn/back-office/loan/" + i.getLoanId());
            row.getCell(1).setCellStyle(styleSimpleText);
            row.createCell(2).setCellValue(i.getDeactivatedBy());
            row.getCell(2).setCellStyle(styleSimpleText);
            row.createCell(3).setCellValue(i.getContract());
            row.getCell(3).setCellStyle(styleSimpleText);
            row.createCell(4).setCellValue(i.getAmount());
            row.getCell(4).setCellStyle(styleNumber);
            row.createCell(5).setCellValue(i.getComment());
            row.getCell(5).setCellStyle(styleSimpleText);
            row.createCell(6).setCellValue(i.getActivatedAt());
            row.getCell(6).setCellStyle(styleDateTime);
            row.createCell(7).setCellValue(i.getCreatedAt());
            row.getCell(7).setCellStyle(styleDateTime);

            rowNumber++;

        }

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 8) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.setColumnWidth(1, 42 * 256);
        sheet.setColumnWidth(5, 42 * 256);

        sheet.createFreezePane(0,1);
    }

    private static void createSheetForExportPassiveClientsForSmsReport(Workbook workbook,
                                                                       ExportPassiveClientsForSMSReportObject object,
                                                                       CellStyle styleTextHeaders,
                                                                       CellStyle styleSimpleText,
                                                                       CellStyle styleDateTime,
                                                                       CellStyle styleNumber) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        rowHead.createCell(0).setCellValue("Phone");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Days after finish loan");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);

        rowNumber++;

        for (ExportPassiveClients i : object.getPassiveClientsList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getPhone());
            row.getCell(0).setCellStyle(styleSimpleText);
            row.createCell(1).setCellValue(i.getPassiveDays());
            row.getCell(1).setCellStyle(styleNumber);
            rowNumber++;

        }
        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        int a = 0;
        while (a < 3) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }

        sheet.createFreezePane(0,1);

    }

    private static void createSheetForExportRefundOverpaymentReport(Workbook workbook,
                                                                    ExportRefundOverpaymentReportObject object,
                                                                    CellStyle styleTextHeaders,
                                                                    CellStyle styleSimpleText,
                                                                    CellStyle styleDateTime,
                                                                    CellStyle styleDate,
                                                                    CellStyle styleNumber) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);

        rowHead.createCell(0).setCellValue("Activated at");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Link to loan");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Contract");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("Amount");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("Comment");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("Created at");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("Created by");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);

        rowNumber++;

        for (ExportRefundOverpayment i : object.getExportRefundOverpaymentList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getActivatedAt());
            row.getCell(0).setCellStyle(styleDateTime);
            row.createCell(1).setCellValue("https://app.tienoi.com.vn/back-office/loan/" + i.getLoanId());
            row.getCell(1).setCellStyle(styleSimpleText);
            row.createCell(2).setCellValue(i.getContractNumber());
            row.getCell(2).setCellStyle(styleSimpleText);
            row.createCell(3).setCellValue(i.getAmount());
            row.getCell(3).setCellStyle(styleNumber);
            row.createCell(4).setCellValue(i.getComment());
            row.getCell(4).setCellStyle(styleSimpleText);
            row.createCell(5).setCellValue(i.getCreatedAt());
            row.getCell(5).setCellStyle(styleDateTime);
            row.createCell(6).setCellValue(i.getCreatedBy());
            row.getCell(6).setCellStyle(styleSimpleText);
            rowNumber++;
        }

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 7) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.setColumnWidth(1, 42 * 256);
        sheet.setColumnWidth(4, 42 * 256);

        sheet.createFreezePane(0,1);
    }

    private static void createSheetForExportLoanForCrossCheckReport(Workbook workbook,
                                                                    ExportIssuedLoanForCrossCheckReportObject object,
                                                                    CellStyle styleTextHeaders,
                                                                    CellStyle styleSimpleText,
                                                                    CellStyle styleDateTime,
                                                                    CellStyle styleDate,
                                                                    CellStyle styleTitle,
                                                                    CellStyle styleNumber,
                                                                    CellStyle styleNumberBold) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        rowHead.createCell(0).setCellValue("Date");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Document");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Contract");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("Amount");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("Tx id");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("Link to loan");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);

        rowNumber++;

        for (ExportIssuedLoanForCrossCheck i : object.getExportIssuedLoanForCrossCheckList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getDate());
            row.getCell(0).setCellStyle(styleDate);
            row.createCell(1).setCellValue(i.getDocId());
            row.getCell(1).setCellStyle(styleSimpleText);
            row.createCell(2).setCellValue(i.getContract());
            row.getCell(2).setCellStyle(styleSimpleText);
            row.createCell(3).setCellValue(i.getAmount());
            row.getCell(3).setCellStyle(styleNumber);
            row.createCell(4).setCellValue(i.getTxId());
            row.getCell(4).setCellStyle(styleSimpleText);
            row.createCell(5).setCellValue("https://app.tienoi.com.vn/back-office/loan/" + i.getId());
            row.getCell(5).setCellStyle(styleSimpleText);
            rowNumber++;
        }

        Row row = sheet.createRow(rowNumber);
        row.createCell(0).setCellValue("Total");
        row.getCell(0).setCellStyle(styleTitle);
        row.createCell(3).setCellValue(object.getTotal().getAmount());
        row.getCell(3).setCellStyle(styleNumberBold);

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 5) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }

        sheet.setColumnWidth(5, 42 * 256);

        sheet.createFreezePane(1,1);

    }

    private static void createSheetForExportPaymentForCrossCheckReport(Workbook workbook,
                                                                       ExportPaymentForCrossCheckReportObject object,
                                                                       CellStyle styleTextHeaders,
                                                                       CellStyle styleSimpleText,
                                                                       CellStyle styleDateTime,
                                                                       CellStyle styleDate,
                                                                       CellStyle styleTitle,
                                                                       CellStyle styleNumber,
                                                                       CellStyle styleNumberBold) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        rowHead.createCell(0).setCellValue("Date");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Document");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Contract");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("Payment");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("Auto");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("Manual");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("Baokim virtual account");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellValue("Link to loan");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);

        rowNumber++;

        for (ExportPaymentForCrossCheck i : object.getExportPaymentForCrossCheckList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getDate());
            row.getCell(0).setCellStyle(styleDate);
            row.createCell(1).setCellValue(i.getDocId());
            row.getCell(1).setCellStyle(styleSimpleText);
            row.createCell(2).setCellValue(i.getContract());
            row.getCell(2).setCellStyle(styleSimpleText);
            row.createCell(3).setCellValue(i.getPayment());
            row.getCell(3).setCellStyle(styleNumber);
            row.createCell(4).setCellValue(i.getAuto());
            row.getCell(4).setCellStyle(styleNumber);
            row.createCell(5).setCellValue(i.getManual());
            row.getCell(5).setCellStyle(styleNumber);
            row.createCell(6).setCellValue(i.getAccount());
            row.getCell(6).setCellStyle(styleSimpleText);
            row.createCell(7).setCellValue("https://app.tienoi.com.vn/back-office/loan/" + i.getLoanId());
            row.getCell(7).setCellStyle(styleSimpleText);
            rowNumber++;
        }

        Row row = sheet.createRow(rowNumber);
        row.createCell(0).setCellValue("Total");
        row.getCell(0).setCellStyle(styleTitle);
        row.createCell(3).setCellValue(object.getTotal().getPayment());
        row.getCell(3).setCellStyle(styleNumberBold);
        row.createCell(4).setCellValue(object.getTotal().getAuto());
        row.getCell(4).setCellStyle(styleNumberBold);
        row.createCell(5).setCellValue(object.getTotal().getManual());
        row.getCell(5).setCellStyle(styleNumberBold);

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 7) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }

        sheet.setColumnWidth(7, 42 * 256);

        sheet.createFreezePane(1,1);

    }

    private static void createSheetForExportAnalyticalReportRepayment(Workbook workbook,
                                                                      AnalyticalReportRepaymentObject object,
                                                                      CellStyle styleTextHeaders,
                                                                      CellStyle styleSimpleText,
                                                                      CellStyle styleDateTime,
                                                                      CellStyle styleDate,
                                                                      CellStyle styleTitle,
                                                                      CellStyle styleNumber,
                                                                      CellStyle styleNumberBold,
                                                                      CellStyle stylePercent,
                                                                      CellStyle stylePercentBold) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);

        rowHead.createCell(1).setCellValue("Total");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("New clients");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("Repeat clients");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);

        rowNumber++;
        Row row = sheet.createRow(rowNumber);
        row.createCell(0).setCellValue("Active loan portfolio for started date of period");
        row.getCell(0).setCellStyle(styleTitle);
        row.createCell(1).setCellValue(object.getLoanPortfolioOfDate().getPrincipleActiveTotal());
        row.getCell(1).setCellStyle(styleNumberBold);
        row.createCell(2).setCellValue(object.getLoanPortfolioOfDate().getPrincipleActiveNew());
        row.getCell(2).setCellStyle(styleNumberBold);
        row.createCell(3).setCellValue(object.getLoanPortfolioOfDate().getPrincipleActiveRepeat());
        row.getCell(3).setCellStyle(styleNumberBold);

        rowNumber++;
        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Issued loan amount in period");
        row1.getCell(0).setCellStyle(styleTitle);
        row1.createCell(1).setCellValue(object.getIssuedAmountInPeriod().getAmountTotal());
        row1.getCell(1).setCellStyle(styleNumberBold);
        row1.createCell(2).setCellValue(object.getIssuedAmountInPeriod().getAmountNew());
        row1.getCell(2).setCellStyle(styleNumberBold);
        row1.createCell(3).setCellValue(object.getIssuedAmountInPeriod().getAmountRepeat());
        row1.getCell(3).setCellStyle(styleNumberBold);

        rowNumber++;
        Row row2 = sheet.createRow(rowNumber);
        row2.createCell(0).setCellValue("Prolonged amount in period");
        row2.getCell(0).setCellStyle(styleTitle);
        row2.createCell(1).setCellValue(object.getProlongationAmountInPeriod().getProlongationAllTotal());
        row2.getCell(1).setCellStyle(styleNumberBold);
        row2.createCell(2).setCellValue(object.getProlongationAmountInPeriod().getProlongationAllNew());
        row2.getCell(2).setCellStyle(styleNumberBold);
        row2.createCell(3).setCellValue(object.getProlongationAmountInPeriod().getProlongationAllRepeat());
        row2.getCell(3).setCellStyle(styleNumberBold);

        rowNumber++;
        Row row3 = sheet.createRow(rowNumber);
        row3.createCell(0).setCellValue("Total contracts' amount in period");
        row3.getCell(0).setCellStyle(styleTitle);
        row3.createCell(1).setCellValue(object.getContractsAmountInPeriod().getAmountTotal());
        row3.getCell(1).setCellStyle(styleNumberBold);
        row3.createCell(2).setCellValue(object.getContractsAmountInPeriod().getAmountNew());
        row3.getCell(2).setCellStyle(styleNumberBold);
        row3.createCell(3).setCellValue(object.getContractsAmountInPeriod().getAmountRepeat());
        row3.getCell(3).setCellStyle(styleNumberBold);

        rowNumber++;
        Row row4 = sheet.createRow(rowNumber);
        row4.createCell(0).setCellValue("Active stage");
        row4.getCell(0).setCellStyle(styleTextHeaders);
        row4.createCell(1).setCellStyle(styleTextHeaders);
        row4.createCell(2).setCellStyle(styleTextHeaders);
        row4.createCell(3).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 0, 3));

        rowNumber++;
        Row row5 = sheet.createRow(rowNumber);
        row5.createCell(0).setCellValue("Paid principal in active stage");
        row5.getCell(0).setCellStyle(styleSimpleText);
        row5.createCell(1).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInActiveTotal());
        row5.getCell(1).setCellStyle(styleNumber);
        row5.createCell(2).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInActiveNew());
        row5.getCell(2).setCellStyle(styleNumber);
        row5.createCell(3).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInActiveRepeat());
        row5.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row6 = sheet.createRow(rowNumber);
        row6.createCell(0).setCellValue("Prolonged loans in active stage");
        row6.getCell(0).setCellStyle(styleSimpleText);
        row6.createCell(1).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromActiveTotal());
        row6.getCell(1).setCellStyle(styleNumber);
        row6.createCell(2).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromActiveNew());
        row6.getCell(2).setCellStyle(styleNumber);
        row6.createCell(3).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromActiveRepeat());
        row6.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row7 = sheet.createRow(rowNumber);
        row7.createCell(0).setCellValue("Income in active stage");
        row7.getCell(0).setCellStyle(styleSimpleText);
        row7.createCell(1).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInActiveTotal());
        row7.getCell(1).setCellStyle(styleNumber);
        row7.createCell(2).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInActiveNew());
        row7.getCell(2).setCellStyle(styleNumber);
        row7.createCell(3).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInActiveRepeat());
        row7.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row8 = sheet.createRow(rowNumber);
        row8.createCell(0).setCellValue("Total repayments in active stage");
        row8.getCell(0).setCellStyle(styleSimpleText);
        row8.createCell(1).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInActiveTotal());
        row8.getCell(1).setCellStyle(styleNumber);
        row8.createCell(2).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInActiveNew());
        row8.getCell(2).setCellStyle(styleNumber);
        row8.createCell(3).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInActiveRepeat());
        row8.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row9 = sheet.createRow(rowNumber);
        row9.createCell(0).setCellValue("Expired stage #1. Overdue days: 1 - " + object.getLastDayOverdueStage1());
        row9.getCell(0).setCellStyle(styleTextHeaders);
        row9.createCell(1).setCellStyle(styleTextHeaders);
        row9.createCell(2).setCellStyle(styleTextHeaders);
        row9.createCell(3).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 0, 3));

        rowNumber++;
        Row row10 = sheet.createRow(rowNumber);
        row10.createCell(0).setCellValue("Loan portfolio for started date of period in Expired stage #1");
        row10.getCell(0).setCellStyle(styleTitle);
        row10.createCell(1).setCellValue(object.getLoanPortfolioOfDate().getPrincipleExpiredStage1Total());
        row10.getCell(1).setCellStyle(styleNumberBold);
        row10.createCell(2).setCellValue(object.getLoanPortfolioOfDate().getPrincipleExpiredStage1New());
        row10.getCell(2).setCellStyle(styleNumberBold);
        row10.createCell(3).setCellValue(object.getLoanPortfolioOfDate().getPrincipleExpiredStage1Repeat());
        row10.getCell(3).setCellStyle(styleNumberBold);

        rowNumber++;
        Row row11 = sheet.createRow(rowNumber);
        row11.createCell(0).setCellValue("New overdue amount in period in Expired stage #1");
        row11.getCell(0).setCellStyle(styleTitle);
        row11.createCell(1).setCellValue(object.getNewStartedOverdueAmountInPeriod().getPrincipleStage1Total());
        row11.getCell(1).setCellStyle(styleNumberBold);
        row11.createCell(2).setCellValue(object.getNewStartedOverdueAmountInPeriod().getPrincipleStage1New());
        row11.getCell(2).setCellStyle(styleNumberBold);
        row11.createCell(3).setCellValue(object.getNewStartedOverdueAmountInPeriod().getPrincipleStage1Repeat());
        row11.getCell(3).setCellStyle(styleNumberBold);


        rowNumber++;
        Row row12 = sheet.createRow(rowNumber);
        row12.createCell(0).setCellValue("Paid principal in expired stage #1");
        row12.getCell(0).setCellStyle(styleSimpleText);
        row12.createCell(1).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInExpiredStage1Total());
        row12.getCell(1).setCellStyle(styleNumber);
        row12.createCell(2).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInExpiredStage1New());
        row12.getCell(2).setCellStyle(styleNumber);
        row12.createCell(3).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInExpiredStage1Repeat());
        row12.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row13 = sheet.createRow(rowNumber);
        row13.createCell(0).setCellValue("Prolonged loans in expired stage #1");
        row13.getCell(0).setCellStyle(styleSimpleText);
        row13.createCell(1).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromExpiredStage1Total());
        row13.getCell(1).setCellStyle(styleNumber);
        row13.createCell(2).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromExpiredStage1New());
        row13.getCell(2).setCellStyle(styleNumber);
        row13.createCell(3).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromExpiredStage1Repeat());
        row13.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row14 = sheet.createRow(rowNumber);
        row14.createCell(0).setCellValue("Income in expired stage #1");
        row14.getCell(0).setCellStyle(styleSimpleText);
        row14.createCell(1).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInExpiredStage1Total());
        row14.getCell(1).setCellStyle(styleNumber);
        row14.createCell(2).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInExpiredStage1New());
        row14.getCell(2).setCellStyle(styleNumber);
        row14.createCell(3).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInExpiredStage1Repeat());
        row14.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row15 = sheet.createRow(rowNumber);
        row15.createCell(0).setCellValue("Total repayments in expired stage #1");
        row15.getCell(0).setCellStyle(styleSimpleText);
        row15.createCell(1).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage1Total());
        row15.getCell(1).setCellStyle(styleNumber);
        row15.createCell(2).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage1New());
        row15.getCell(2).setCellStyle(styleNumber);
        row15.createCell(3).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage1Repeat());
        row15.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row16 = sheet.createRow(rowNumber);
        row16.createCell(0).setCellValue("Expired stage #2. Overdue days: " + (object.getLastDayOverdueStage1() + 1) +
                " - " + object.getLastDayOverdueStage2());
        row16.getCell(0).setCellStyle(styleTextHeaders);
        row16.createCell(1).setCellStyle(styleTextHeaders);
        row16.createCell(2).setCellStyle(styleTextHeaders);
        row16.createCell(3).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 0, 3));

        rowNumber++;
        Row row17 = sheet.createRow(rowNumber);
        row17.createCell(0).setCellValue("Loan portfolio for started date of period in Expired stage #2");
        row17.getCell(0).setCellStyle(styleTitle);
        row17.createCell(1).setCellValue(object.getLoanPortfolioOfDate().getPrincipleExpiredStage2Total());
        row17.getCell(1).setCellStyle(styleNumberBold);
        row17.createCell(2).setCellValue(object.getLoanPortfolioOfDate().getPrincipleExpiredStage2New());
        row17.getCell(2).setCellStyle(styleNumberBold);
        row17.createCell(3).setCellValue(object.getLoanPortfolioOfDate().getPrincipleExpiredStage2Repeat());
        row17.getCell(3).setCellStyle(styleNumberBold);

        rowNumber++;
        Row row18 = sheet.createRow(rowNumber);
        row18.createCell(0).setCellValue("New overdue amount in period in Expired stage #2");
        row18.getCell(0).setCellStyle(styleTitle);
        row18.createCell(1).setCellValue(object.getNewStartedOverdueAmountInPeriod().getPrincipleStage2Total());
        row18.getCell(1).setCellStyle(styleNumberBold);
        row18.createCell(2).setCellValue(object.getNewStartedOverdueAmountInPeriod().getPrincipleStage2New());
        row18.getCell(2).setCellStyle(styleNumberBold);
        row18.createCell(3).setCellValue(object.getNewStartedOverdueAmountInPeriod().getPrincipleStage2Repeat());
        row18.getCell(3).setCellStyle(styleNumberBold);


        rowNumber++;
        Row row19 = sheet.createRow(rowNumber);
        row19.createCell(0).setCellValue("Paid principal in expired stage #2");
        row19.getCell(0).setCellStyle(styleSimpleText);
        row19.createCell(1).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInExpiredStage2Total());
        row19.getCell(1).setCellStyle(styleNumber);
        row19.createCell(2).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInExpiredStage2New());
        row19.getCell(2).setCellStyle(styleNumber);
        row19.createCell(3).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInExpiredStage2Repeat());
        row19.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row20 = sheet.createRow(rowNumber);
        row20.createCell(0).setCellValue("Prolonged loans in expired stage #2");
        row20.getCell(0).setCellStyle(styleSimpleText);
        row20.createCell(1).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromExpiredStage2Total());
        row20.getCell(1).setCellStyle(styleNumber);
        row20.createCell(2).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromExpiredStage2New());
        row20.getCell(2).setCellStyle(styleNumber);
        row20.createCell(3).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromExpiredStage2Repeat());
        row20.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row21 = sheet.createRow(rowNumber);
        row21.createCell(0).setCellValue("Income in expired stage #2");
        row21.getCell(0).setCellStyle(styleSimpleText);
        row21.createCell(1).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInExpiredStage2Total());
        row21.getCell(1).setCellStyle(styleNumber);
        row21.createCell(2).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInExpiredStage2New());
        row21.getCell(2).setCellStyle(styleNumber);
        row21.createCell(3).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInExpiredStage2Repeat());
        row21.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row22 = sheet.createRow(rowNumber);
        row22.createCell(0).setCellValue("Total repayments in expired stage #2");
        row22.getCell(0).setCellStyle(styleSimpleText);
        row22.createCell(1).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage2Total());
        row22.getCell(1).setCellStyle(styleNumber);
        row22.createCell(2).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage2New());
        row22.getCell(2).setCellStyle(styleNumber);
        row22.createCell(3).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage2Repeat());
        row22.getCell(3).setCellStyle(styleNumber);


        rowNumber++;
        Row row23 = sheet.createRow(rowNumber);
        row23.createCell(0).setCellValue("Expired final stage. Overdue days from " + (object.getLastDayOverdueStage2() + 1));
        row23.getCell(0).setCellStyle(styleTextHeaders);
        row23.createCell(1).setCellStyle(styleTextHeaders);
        row23.createCell(2).setCellStyle(styleTextHeaders);
        row23.createCell(3).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 0, 3));

        rowNumber++;
        Row row24 = sheet.createRow(rowNumber);
        row24.createCell(0).setCellValue("Loan portfolio for started date of period in Expired final stage");
        row24.getCell(0).setCellStyle(styleTitle);
        row24.createCell(1).setCellValue(object.getLoanPortfolioOfDate().getPrincipleExpiredStageOtherTotal());
        row24.getCell(1).setCellStyle(styleNumberBold);
        row24.createCell(2).setCellValue(object.getLoanPortfolioOfDate().getPrincipleExpiredStageOtherNew());
        row24.getCell(2).setCellStyle(styleNumberBold);
        row24.createCell(3).setCellValue(object.getLoanPortfolioOfDate().getPrincipleExpiredStageOtherRepeat());
        row24.getCell(3).setCellStyle(styleNumberBold);

        rowNumber++;
        Row row25 = sheet.createRow(rowNumber);
        row25.createCell(0).setCellValue("New overdue amount in period in Expired final stage");
        row25.getCell(0).setCellStyle(styleTitle);
        row25.createCell(1).setCellValue(object.getNewStartedOverdueAmountInPeriod().getPrincipleStageOtherTotal());
        row25.getCell(1).setCellStyle(styleNumberBold);
        row25.createCell(2).setCellValue(object.getNewStartedOverdueAmountInPeriod().getPrincipleStageOtherNew());
        row25.getCell(2).setCellStyle(styleNumberBold);
        row25.createCell(3).setCellValue(object.getNewStartedOverdueAmountInPeriod().getPrincipleStageOtherRepeat());
        row25.getCell(3).setCellStyle(styleNumberBold);


        rowNumber++;
        Row row26 = sheet.createRow(rowNumber);
        row26.createCell(0).setCellValue("Paid principal in expired final stage");
        row26.getCell(0).setCellStyle(styleSimpleText);
        row26.createCell(1).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInExpiredStageOtherTotal());
        row26.getCell(1).setCellStyle(styleNumber);
        row26.createCell(2).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInExpiredStageOtherNew());
        row26.getCell(2).setCellStyle(styleNumber);
        row26.createCell(3).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleInExpiredStageOtherRepeat());
        row26.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row27 = sheet.createRow(rowNumber);
        row27.createCell(0).setCellValue("Prolonged loans in expired final stage");
        row27.getCell(0).setCellStyle(styleSimpleText);
        row27.createCell(1).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromExpiredStageOtherTotal());
        row27.getCell(1).setCellStyle(styleNumber);
        row27.createCell(2).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromExpiredStageOtherNew());
        row27.getCell(2).setCellStyle(styleNumber);
        row27.createCell(3).setCellValue(object.getProlongationAmountInPeriod().getProlongationFromExpiredStageOtherRepeat());
        row27.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row28 = sheet.createRow(rowNumber);
        row28.createCell(0).setCellValue("Income in expired final stage");
        row28.getCell(0).setCellStyle(styleSimpleText);
        row28.createCell(1).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInExpiredStageOtherTotal());
        row28.getCell(1).setCellStyle(styleNumber);
        row28.createCell(2).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInExpiredStageOtherNew());
        row28.getCell(2).setCellStyle(styleNumber);
        row28.createCell(3).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeInExpiredStageOtherRepeat());
        row28.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row29 = sheet.createRow(rowNumber);
        row29.createCell(0).setCellValue("Total repayments in expired final stage");
        row29.getCell(0).setCellStyle(styleSimpleText);
        row29.createCell(1).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStageOtherTotal());
        row29.getCell(1).setCellStyle(styleNumber);
        row29.createCell(2).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStageOtherNew());
        row29.getCell(2).setCellStyle(styleNumber);
        row29.createCell(3).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStageOtherRepeat());
        row29.getCell(3).setCellStyle(styleNumber);


        rowNumber++;
        Row row30 = sheet.createRow(rowNumber);
        row30.createCell(0).setCellValue("Analytical part of the report");
        row30.getCell(0).setCellStyle(styleTextHeaders);
        row30.createCell(1).setCellStyle(styleTextHeaders);
        row30.createCell(2).setCellStyle(styleTextHeaders);
        row30.createCell(3).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 0, 3));

        rowNumber++;
        Row row31 = sheet.createRow(rowNumber);
        row31.createCell(0).setCellValue("Repayment level in active stage");
        row31.getCell(0).setCellStyle(styleTitle);
        row31.createCell(1).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInActiveStageTotal());
        row31.getCell(1).setCellStyle(stylePercentBold);
        row31.createCell(2).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInActiveStageNew());
        row31.getCell(2).setCellStyle(stylePercentBold);
        row31.createCell(3).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInActiveStageRepeat());
        row31.getCell(3).setCellStyle(stylePercentBold);

        rowNumber++;
        Row row32 = sheet.createRow(rowNumber);
        row32.createCell(0).setCellValue("Income level in active stage");
        row32.getCell(0).setCellStyle(styleTitle);
        row32.createCell(1).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInActiveStageTotal());
        row32.getCell(1).setCellStyle(stylePercentBold);
        row32.createCell(2).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInActiveStageNew());
        row32.getCell(2).setCellStyle(stylePercentBold);
        row32.createCell(3).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInActiveStageRepeat());
        row32.getCell(3).setCellStyle(stylePercentBold);

        rowNumber++;
        Row row33 = sheet.createRow(rowNumber);
        row33.createCell(0).setCellValue("Amount in work in expired stage #1");
        row33.getCell(0).setCellStyle(styleSimpleText);
        row33.createCell(1).setCellValue(object.getAnalyticalPartForRepaymentReport().getAmountInWorkInExpiredStage1Total());
        row33.getCell(1).setCellStyle(styleNumber);
        row33.createCell(2).setCellValue(object.getAnalyticalPartForRepaymentReport().getAmountInWorkInExpiredStage1New());
        row33.getCell(2).setCellStyle(styleNumber);
        row33.createCell(3).setCellValue(object.getAnalyticalPartForRepaymentReport().getAmountInWorkInExpiredStage1Repeat());
        row33.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row34 = sheet.createRow(rowNumber);
        row34.createCell(0).setCellValue("Repayment level in expired stage #1");
        row34.getCell(0).setCellStyle(styleTitle);
        row34.createCell(1).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInExpiredStage1Total());
        row34.getCell(1).setCellStyle(stylePercentBold);
        row34.createCell(2).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInExpiredStage1New());
        row34.getCell(2).setCellStyle(stylePercentBold);
        row34.createCell(3).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInExpiredStage1Repeat());
        row34.getCell(3).setCellStyle(stylePercentBold);

        rowNumber++;
        Row row35 = sheet.createRow(rowNumber);
        row35.createCell(0).setCellValue("Income level in expired stage #1");
        row35.getCell(0).setCellStyle(styleTitle);
        row35.createCell(1).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInExpiredStage1Total());
        row35.getCell(1).setCellStyle(stylePercentBold);
        row35.createCell(2).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInExpiredStage1New());
        row35.getCell(2).setCellStyle(stylePercentBold);
        row35.createCell(3).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInExpiredStage1Repeat());
        row35.getCell(3).setCellStyle(stylePercentBold);

        rowNumber++;
        Row row36 = sheet.createRow(rowNumber);
        row36.createCell(0).setCellValue("Total repayments in expired stage #1");
        row36.getCell(0).setCellStyle(styleSimpleText);
        row36.createCell(1).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage1Total());
        row36.getCell(1).setCellStyle(styleNumber);
        row36.createCell(2).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage1New());
        row36.getCell(2).setCellStyle(styleNumber);
        row36.createCell(3).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage1Repeat());
        row36.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row37 = sheet.createRow(rowNumber);
        row37.createCell(0).setCellValue("Amount in work in expired stage #2");
        row37.getCell(0).setCellStyle(styleSimpleText);
        row37.createCell(1).setCellValue(object.getAnalyticalPartForRepaymentReport().getAmountInWorkInExpiredStage2Total());
        row37.getCell(1).setCellStyle(styleNumber);
        row37.createCell(2).setCellValue(object.getAnalyticalPartForRepaymentReport().getAmountInWorkInExpiredStage2New());
        row37.getCell(2).setCellStyle(styleNumber);
        row37.createCell(3).setCellValue(object.getAnalyticalPartForRepaymentReport().getAmountInWorkInExpiredStage2Repeat());
        row37.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row38 = sheet.createRow(rowNumber);
        row38.createCell(0).setCellValue("Repayment level in expired stage #2");
        row38.getCell(0).setCellStyle(styleTitle);
        row38.createCell(1).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInExpiredStage2Total());
        row38.getCell(1).setCellStyle(stylePercentBold);
        row38.createCell(2).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInExpiredStage2New());
        row38.getCell(2).setCellStyle(stylePercentBold);
        row38.createCell(3).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInExpiredStage2Repeat());
        row38.getCell(3).setCellStyle(stylePercentBold);

        rowNumber++;
        Row row39 = sheet.createRow(rowNumber);
        row39.createCell(0).setCellValue("Income level in expired stage #2");
        row39.getCell(0).setCellStyle(styleTitle);
        row39.createCell(1).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInExpiredStage2Total());
        row39.getCell(1).setCellStyle(stylePercentBold);
        row39.createCell(2).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInExpiredStage2New());
        row39.getCell(2).setCellStyle(stylePercentBold);
        row39.createCell(3).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInExpiredStage2Repeat());
        row39.getCell(3).setCellStyle(stylePercentBold);

        rowNumber++;
        Row row40 = sheet.createRow(rowNumber);
        row40.createCell(0).setCellValue("Total repayments in expired stage #2");
        row40.getCell(0).setCellStyle(styleSimpleText);
        row40.createCell(1).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage2Total());
        row40.getCell(1).setCellStyle(styleNumber);
        row40.createCell(2).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage2New());
        row40.getCell(2).setCellStyle(styleNumber);
        row40.createCell(3).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStage2Repeat());
        row40.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row41 = sheet.createRow(rowNumber);
        row41.createCell(0).setCellValue("Amount in work in expired final stage");
        row41.getCell(0).setCellStyle(styleSimpleText);
        row41.createCell(1).setCellValue(object.getAnalyticalPartForRepaymentReport().getAmountInWorkInExpiredStageOtherTotal());
        row41.getCell(1).setCellStyle(styleNumber);
        row41.createCell(2).setCellValue(object.getAnalyticalPartForRepaymentReport().getAmountInWorkInExpiredStageOtherNew());
        row41.getCell(2).setCellStyle(styleNumber);
        row41.createCell(3).setCellValue(object.getAnalyticalPartForRepaymentReport().getAmountInWorkInExpiredStageOtherRepeat());
        row41.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row42 = sheet.createRow(rowNumber);
        row42.createCell(0).setCellValue("Repayment level in expired final stage");
        row42.getCell(0).setCellStyle(styleTitle);
        row42.createCell(1).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInExpiredStageOtherTotal());
        row42.getCell(1).setCellStyle(stylePercentBold);
        row42.createCell(2).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInExpiredStageOtherNew());
        row42.getCell(2).setCellStyle(stylePercentBold);
        row42.createCell(3).setCellValue(object.getAnalyticalPartForRepaymentReport().getRepaymentLevelInExpiredStageOtherRepeat());
        row42.getCell(3).setCellStyle(stylePercentBold);

        rowNumber++;
        Row row43 = sheet.createRow(rowNumber);
        row43.createCell(0).setCellValue("Income level in expired final stage");
        row43.getCell(0).setCellStyle(styleTitle);
        row43.createCell(1).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInExpiredStageOtherTotal());
        row43.getCell(1).setCellStyle(stylePercentBold);
        row43.createCell(2).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInExpiredStageOtherNew());
        row43.getCell(2).setCellStyle(stylePercentBold);
        row43.createCell(3).setCellValue(object.getAnalyticalPartForRepaymentReport().getIncomeLevelInExpiredStageOtherRepeat());
        row43.getCell(3).setCellStyle(stylePercentBold);

        rowNumber++;
        Row row44 = sheet.createRow(rowNumber);
        row44.createCell(0).setCellValue("Total repayments in expired final stage");
        row44.getCell(0).setCellStyle(styleSimpleText);
        row44.createCell(1).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStageOtherTotal());
        row44.getCell(1).setCellStyle(styleNumber);
        row44.createCell(2).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStageOtherNew());
        row44.getCell(2).setCellStyle(styleNumber);
        row44.createCell(3).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInExpiredStageOtherRepeat());
        row44.getCell(3).setCellStyle(styleNumber);

        rowNumber++;
        Row row45 = sheet.createRow(rowNumber);
        row45.createCell(0).setCellValue("Repayment structure");
        row45.getCell(0).setCellStyle(styleTextHeaders);
        row45.createCell(1).setCellStyle(styleTextHeaders);
        row45.createCell(2).setCellStyle(styleTextHeaders);
        row45.createCell(3).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 0, 3));

        rowNumber++;
        Row row46 = sheet.createRow(rowNumber);
        row46.createCell(0).setCellValue("Paid principal in all stages");
        row46.getCell(0).setCellStyle(styleTitle);
        row46.createCell(1).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleAllTotal());
        row46.getCell(1).setCellStyle(styleNumberBold);
        row46.createCell(2).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleAllNew());
        row46.getCell(2).setCellStyle(styleNumberBold);
        row46.createCell(3).setCellValue(object.getPaymentsAmountInPeriod().getPaidPrincipleAllRepeat());
        row46.getCell(3).setCellStyle(styleNumberBold);

        rowNumber++;
        Row row47 = sheet.createRow(rowNumber);
        row47.createCell(0).setCellValue("Prolonged loans in all stages");
        row47.getCell(0).setCellStyle(styleTitle);
        row47.createCell(1).setCellValue(object.getProlongationAmountInPeriod().getProlongationAllTotal());
        row47.getCell(1).setCellStyle(styleNumberBold);
        row47.createCell(2).setCellValue(object.getProlongationAmountInPeriod().getProlongationAllNew());
        row47.getCell(2).setCellStyle(styleNumberBold);
        row47.createCell(3).setCellValue(object.getProlongationAmountInPeriod().getProlongationAllRepeat());
        row47.getCell(3).setCellStyle(styleNumberBold);

        rowNumber++;
        Row row48 = sheet.createRow(rowNumber);
        row48.createCell(0).setCellValue("Income in all stages");
        row48.getCell(0).setCellStyle(styleTitle);
        row48.createCell(1).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeAllTotal());
        row48.getCell(1).setCellStyle(styleNumberBold);
        row48.createCell(2).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeAllNew());
        row48.getCell(2).setCellStyle(styleNumberBold);
        row48.createCell(3).setCellValue(object.getPaymentsAmountInPeriod().getPaidIncomeAllRepeat());
        row48.getCell(3).setCellStyle(styleNumberBold);

        rowNumber++;
        Row row49 = sheet.createRow(rowNumber);
        row49.createCell(0).setCellValue("Total repayments in all stages");
        row49.getCell(0).setCellStyle(styleTitle);
        row49.createCell(1).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInAllTotal());
        row49.getCell(1).setCellStyle(styleNumberBold);
        row49.createCell(2).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInAllNew());
        row49.getCell(2).setCellStyle(styleNumberBold);
        row49.createCell(3).setCellValue(object.getRepaymentsInPeriod().getTotalRepaymentInAllRepeat());
        row49.getCell(3).setCellStyle(styleNumberBold);

        rowNumber++;
        Row row50 = sheet.createRow(rowNumber);
        row50.createCell(0).setCellValue("Common profitability in company");
        row50.getCell(0).setCellStyle(styleTitle);
        row50.createCell(1).setCellValue(object.getRepaymentStructure().getCommonProfitabilityInCompanyTotal());
        row50.getCell(1).setCellStyle(stylePercentBold);
        row50.createCell(2).setCellValue(object.getRepaymentStructure().getCommonProfitabilityInCompanyNew());
        row50.getCell(2).setCellStyle(stylePercentBold);
        row50.createCell(3).setCellValue(object.getRepaymentStructure().getCommonProfitabilityInCompanyRepeat());
        row50.getCell(3).setCellStyle(stylePercentBold);

        rowNumber++;
        Row row51 = sheet.createRow(rowNumber);
        row51.createCell(0).setCellValue("Share of repayment level in active stage");
        row51.getCell(0).setCellStyle(styleSimpleText);
        row51.createCell(1).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInActiveStageTotal());
        row51.getCell(1).setCellStyle(stylePercent);
        row51.createCell(2).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInActiveStageNew());
        row51.getCell(2).setCellStyle(stylePercent);
        row51.createCell(3).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInActiveStageRepeat());
        row51.getCell(3).setCellStyle(stylePercent);

        rowNumber++;
        Row row52 = sheet.createRow(rowNumber);
        row52.createCell(0).setCellValue("Share of repayment level in expired stage #1");
        row52.getCell(0).setCellStyle(styleSimpleText);
        row52.createCell(1).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInExpiredStage1Total());
        row52.getCell(1).setCellStyle(stylePercent);
        row52.createCell(2).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInExpiredStage1New());
        row52.getCell(2).setCellStyle(stylePercent);
        row52.createCell(3).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInExpiredStage1Repeat());
        row52.getCell(3).setCellStyle(stylePercent);

        rowNumber++;
        Row row53 = sheet.createRow(rowNumber);
        row53.createCell(0).setCellValue("Share of repayment level in expired stage #2");
        row53.getCell(0).setCellStyle(styleSimpleText);
        row53.createCell(1).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInExpiredStage2Total());
        row53.getCell(1).setCellStyle(stylePercent);
        row53.createCell(2).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInExpiredStage2New());
        row53.getCell(2).setCellStyle(stylePercent);
        row53.createCell(3).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInExpiredStage2Repeat());
        row53.getCell(3).setCellStyle(stylePercent);

        rowNumber++;
        Row row54 = sheet.createRow(rowNumber);
        row54.createCell(0).setCellValue("Share of repayment level in expired final stage");
        row54.getCell(0).setCellStyle(styleSimpleText);
        row54.createCell(1).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInExpiredStageOtherTotal());
        row54.getCell(1).setCellStyle(stylePercent);
        row54.createCell(2).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInExpiredStageOtherNew());
        row54.getCell(2).setCellStyle(stylePercent);
        row54.createCell(3).setCellValue(object.getRepaymentStructure().getShareLevelRepaymentInExpiredStageOtherRepeat());
        row54.getCell(3).setCellStyle(stylePercent);

        rowNumber++;
        Row row55 = sheet.createRow(rowNumber);
        row55.createCell(0).setCellValue("Share of income level in active stage");
        row55.getCell(0).setCellStyle(styleSimpleText);
        row55.createCell(1).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInActiveStageTotal());
        row55.getCell(1).setCellStyle(stylePercent);
        row55.createCell(2).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInActiveStageNew());
        row55.getCell(2).setCellStyle(stylePercent);
        row55.createCell(3).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInActiveStageRepeat());
        row55.getCell(3).setCellStyle(stylePercent);

        rowNumber++;
        Row row56 = sheet.createRow(rowNumber);
        row56.createCell(0).setCellValue("Share of income level in expired stage #1");
        row56.getCell(0).setCellStyle(styleSimpleText);
        row56.createCell(1).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInExpiredStage1Total());
        row56.getCell(1).setCellStyle(stylePercent);
        row56.createCell(2).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInExpiredStage1New());
        row56.getCell(2).setCellStyle(stylePercent);
        row56.createCell(3).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInExpiredStage1Repeat());
        row56.getCell(3).setCellStyle(stylePercent);

        rowNumber++;
        Row row57 = sheet.createRow(rowNumber);
        row57.createCell(0).setCellValue("Share of income level in expired stage #2");
        row57.getCell(0).setCellStyle(styleSimpleText);
        row57.createCell(1).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInExpiredStage2Total());
        row57.getCell(1).setCellStyle(stylePercent);
        row57.createCell(2).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInExpiredStage2New());
        row57.getCell(2).setCellStyle(stylePercent);
        row57.createCell(3).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInExpiredStage2Repeat());
        row57.getCell(3).setCellStyle(stylePercent);

        rowNumber++;
        Row row58 = sheet.createRow(rowNumber);
        row58.createCell(0).setCellValue("Share of income level in expired final stage");
        row58.getCell(0).setCellStyle(styleSimpleText);
        row58.createCell(1).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInExpiredStageOtherTotal());
        row58.getCell(1).setCellStyle(stylePercent);
        row58.createCell(2).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInExpiredStageOtherNew());
        row58.getCell(2).setCellStyle(stylePercent);
        row58.createCell(3).setCellValue(object.getRepaymentStructure().getShareLevelIncomeInExpiredStageOtherRepeat());
        row58.getCell(3).setCellStyle(stylePercent);


        rowNumber += 2;

        Row row59 = sheet.createRow(rowNumber);
        row59.createCell(0).setCellValue("Report was created at: ");
        row59.getCell(0).setCellStyle(styleSimpleText);
        row59.createCell(1).setCellValue(object.getCreatedAt());
        row59.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row60 = sheet.createRow(rowNumber);

        row60.createCell(0).setCellValue("For period:");
        row60.getCell(0).setCellStyle(styleSimpleText);
        row60.createCell(1).setCellValue(object.getDateFrom());
        row60.getCell(1).setCellStyle(styleDate);
        row60.createCell(2).setCellValue("-");
        row60.getCell(2).setCellStyle(styleSimpleText);
        row60.createCell(3).setCellValue(object.getDateTo());
        row60.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 4) {
            sheet.setColumnWidth(a, 50 * 256);
            a++;
        }

        sheet.createFreezePane(1,1);


    }

    private static void createSheetForExportApplicationsInfoDateReportTotal(Workbook workbook,
                                                                            ExportApplicationsInfoDateReportObject object,
                                                                            CellStyle styleTextHeaders,
                                                                            CellStyle styleSimpleText,
                                                                            CellStyle styleDateTime,
                                                                            CellStyle styleDate,
                                                                            CellStyle styleTitle,
                                                                            CellStyle styleNumber,
                                                                            CellStyle styleNumberBold,
                                                                            CellStyle stylePercent,
                                                                            CellStyle stylePercentBold) {
        Sheet sheet = workbook.createSheet("All apps");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        Row rowUnderHead = sheet.createRow(rowNumber + 1);

        rowHead.createCell(0).setCellValue("Date");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(0).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 0, 0));

        rowHead.createCell(1).setCellValue("In progress");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 1, 2));
        rowUnderHead.createCell(1).setCellValue("Count");
        rowUnderHead.getCell(1).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(2).setCellValue("%");
        rowUnderHead.getCell(2).setCellStyle(styleTextHeaders);

        rowHead.createCell(3).setCellValue("Canceled by system");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 3, 4));
        rowUnderHead.createCell(3).setCellValue("Count");
        rowUnderHead.getCell(3).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(4).setCellValue("%");
        rowUnderHead.getCell(4).setCellStyle(styleTextHeaders);

        rowHead.createCell(5).setCellValue("Canceled by client");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 5, 6));
        rowUnderHead.createCell(5).setCellValue("Count");
        rowUnderHead.getCell(5).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(6).setCellValue("%");
        rowUnderHead.getCell(6).setCellStyle(styleTextHeaders);

        rowHead.createCell(7).setCellValue("Rejected");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 7, 8));
        rowUnderHead.createCell(7).setCellValue("Count");
        rowUnderHead.getCell(7).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(8).setCellValue("%");
        rowUnderHead.getCell(8).setCellStyle(styleTextHeaders);

        rowHead.createCell(9).setCellValue("Was approved");
        rowHead.getCell(9).setCellStyle(styleTextHeaders);
        rowHead.createCell(10).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 9, 10));
        rowUnderHead.createCell(9).setCellValue("Count");
        rowUnderHead.getCell(9).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(10).setCellValue("%");
        rowUnderHead.getCell(10).setCellStyle(styleTextHeaders);

        rowHead.createCell(11).setCellValue("Issued");
        rowHead.getCell(11).setCellStyle(styleTextHeaders);
        rowHead.createCell(12).setCellStyle(styleTextHeaders);
        rowHead.createCell(13).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 11, 13));
        rowUnderHead.createCell(11).setCellValue("Count");
        rowUnderHead.getCell(11).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(12).setCellValue("% from approved");
        rowUnderHead.getCell(12).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(13).setCellValue("% from all apps");
        rowUnderHead.getCell(13).setCellStyle(styleTextHeaders);

        rowHead.createCell(14).setCellValue("Total");
        rowHead.getCell(14).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(14).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber+1, 14, 14));

        rowNumber+=2;

        for (ExportApplicationsInfoDate i : object.getExportApplicationsInfoDateList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getDate());
            row.getCell(0).setCellStyle(styleDate);
            row.createCell(1).setCellValue(i.getCountAppsInProgress());
            row.getCell(1).setCellStyle(styleNumber);
            if (!i.getCountAppsTotal().equals(0L)) {
                row.createCell(2).setCellValue((double) i.getCountAppsInProgress() /
                        (double) i.getCountAppsTotal());
                row.getCell(2).setCellStyle(stylePercent);
            }
            row.createCell(3).setCellValue(i.getCountAppsCanceledBySystem());
            row.getCell(3).setCellStyle(styleNumber);
            if (!i.getCountAppsTotal().equals(0L)) {
                row.createCell(4).setCellValue((double) i.getCountAppsCanceledBySystem() /
                        (double) i.getCountAppsTotal());
                row.getCell(4).setCellStyle(stylePercent);
            }

            row.createCell(5).setCellValue(i.getCountAppsCanceledByClient());
            row.getCell(5).setCellStyle(styleNumber);
            if (!i.getCountAppsTotal().equals(0L)) {
                row.createCell(6).setCellValue((double) i.getCountAppsCanceledByClient() /
                        (double) i.getCountAppsTotal());
                row.getCell(6).setCellStyle(stylePercent);
            }

            row.createCell(7).setCellValue(i.getCountAppsRejected());
            row.getCell(7).setCellStyle(styleNumber);
            if (!i.getCountAppsTotal().equals(0L)) {
                row.createCell(8).setCellValue((double) i.getCountAppsRejected() /
                        (double) i.getCountAppsTotal());
                row.getCell(8).setCellStyle(stylePercent);
            }

            row.createCell(9).setCellValue(i.getCountAppsWasApproved());
            row.getCell(9).setCellStyle(styleNumber);
            if (!i.getCountAppsTotal().equals(0L)) {
                row.createCell(10).setCellValue((double) i.getCountAppsWasApproved() /
                        (double) i.getCountAppsTotal());
                row.getCell(10).setCellStyle(stylePercent);
            }

            row.createCell(11).setCellValue(i.getCountAppsIssued());
            row.getCell(11).setCellStyle(styleNumber);
            if (!i.getCountAppsWasApproved().equals(0L)) {
                row.createCell(12).setCellValue((double) i.getCountAppsIssued() /
                        (double) i.getCountAppsWasApproved());
                row.getCell(12).setCellStyle(stylePercent);
            }
            if (!i.getCountAppsTotal().equals(0L)) {
                row.createCell(13).setCellValue((double) i.getCountAppsIssued() /
                        (double) i.getCountAppsTotal());
                row.getCell(13).setCellStyle(stylePercent);
            }

            row.createCell(14).setCellValue(i.getCountAppsTotal());
            row.getCell(14).setCellStyle(styleNumberBold);

            rowNumber++;

        }

        Row row = sheet.createRow(rowNumber);

        row.createCell(0).setCellValue("Total");
        row.getCell(0).setCellStyle(styleTitle);
        row.createCell(1).setCellValue(object.getTotal().getCountAppsInProgress());
        row.getCell(1).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotal().equals(0L)) {
            row.createCell(2).setCellValue((double) object.getTotal().getCountAppsInProgress() /
                    (double) object.getTotal().getCountAppsTotal());
            row.getCell(2).setCellStyle(stylePercentBold);
        }
        row.createCell(3).setCellValue(object.getTotal().getCountAppsCanceledBySystem());
        row.getCell(3).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotal().equals(0L)) {
            row.createCell(4).setCellValue((double) object.getTotal().getCountAppsCanceledBySystem() /
                    (double) object.getTotal().getCountAppsTotal());
            row.getCell(4).setCellStyle(stylePercentBold);
        }

        row.createCell(5).setCellValue(object.getTotal().getCountAppsCanceledByClient());
        row.getCell(5).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotal().equals(0L)) {
            row.createCell(6).setCellValue((double) object.getTotal().getCountAppsCanceledByClient() /
                    (double) object.getTotal().getCountAppsTotal());
            row.getCell(6).setCellStyle(stylePercentBold);
        }

        row.createCell(7).setCellValue(object.getTotal().getCountAppsRejected());
        row.getCell(7).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotal().equals(0L)) {
            row.createCell(8).setCellValue((double) object.getTotal().getCountAppsRejected() /
                    (double) object.getTotal().getCountAppsTotal());
            row.getCell(8).setCellStyle(stylePercentBold);
        }

        row.createCell(9).setCellValue(object.getTotal().getCountAppsWasApproved());
        row.getCell(9).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotal().equals(0L)) {
            row.createCell(10).setCellValue((double) object.getTotal().getCountAppsWasApproved() /
                    (double) object.getTotal().getCountAppsTotal());
            row.getCell(10).setCellStyle(stylePercentBold);
        }

        row.createCell(11).setCellValue(object.getTotal().getCountAppsIssued());
        row.getCell(11).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsWasApproved().equals(0L)) {
            row.createCell(12).setCellValue((double) object.getTotal().getCountAppsIssued() /
                    (double) object.getTotal().getCountAppsWasApproved());
            row.getCell(12).setCellStyle(stylePercentBold);
        }
        if (!object.getTotal().getCountAppsTotal().equals(0L)) {
            row.createCell(13).setCellValue((double) object.getTotal().getCountAppsIssued() /
                    (double) object.getTotal().getCountAppsTotal());
            row.getCell(13).setCellStyle(stylePercentBold);
        }

        row.createCell(14).setCellValue(object.getTotal().getCountAppsTotal());
        row.getCell(14).setCellStyle(styleNumberBold);

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 15) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }

        sheet.createFreezePane(1,2);

    }

    private static void createSheetForExportApplicationsInfoDateReportNew(Workbook workbook,
                                                                          ExportApplicationsInfoDateReportObject object,
                                                                          CellStyle styleTextHeaders,
                                                                          CellStyle styleSimpleText,
                                                                          CellStyle styleDateTime,
                                                                          CellStyle styleDate,
                                                                          CellStyle styleTitle,
                                                                          CellStyle styleNumber,
                                                                          CellStyle styleNumberBold,
                                                                          CellStyle stylePercent,
                                                                          CellStyle stylePercentBold) {
        Sheet sheet = workbook.createSheet("New clients");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        Row rowUnderHead = sheet.createRow(rowNumber + 1);

        rowHead.createCell(0).setCellValue("Date");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(0).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 0, 0));

        rowHead.createCell(1).setCellValue("In progress");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 1, 2));
        rowUnderHead.createCell(1).setCellValue("Count");
        rowUnderHead.getCell(1).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(2).setCellValue("%");
        rowUnderHead.getCell(2).setCellStyle(styleTextHeaders);

        rowHead.createCell(3).setCellValue("Canceled by system");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 3, 4));
        rowUnderHead.createCell(3).setCellValue("Count");
        rowUnderHead.getCell(3).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(4).setCellValue("%");
        rowUnderHead.getCell(4).setCellStyle(styleTextHeaders);

        rowHead.createCell(5).setCellValue("Canceled by client");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 5, 6));
        rowUnderHead.createCell(5).setCellValue("Count");
        rowUnderHead.getCell(5).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(6).setCellValue("%");
        rowUnderHead.getCell(6).setCellStyle(styleTextHeaders);

        rowHead.createCell(7).setCellValue("Rejected");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 7, 8));
        rowUnderHead.createCell(7).setCellValue("Count");
        rowUnderHead.getCell(7).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(8).setCellValue("%");
        rowUnderHead.getCell(8).setCellStyle(styleTextHeaders);

        rowHead.createCell(9).setCellValue("Was approved");
        rowHead.getCell(9).setCellStyle(styleTextHeaders);
        rowHead.createCell(10).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 9, 10));
        rowUnderHead.createCell(9).setCellValue("Count");
        rowUnderHead.getCell(9).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(10).setCellValue("%");
        rowUnderHead.getCell(10).setCellStyle(styleTextHeaders);

        rowHead.createCell(11).setCellValue("Issued");
        rowHead.getCell(11).setCellStyle(styleTextHeaders);
        rowHead.createCell(12).setCellStyle(styleTextHeaders);
        rowHead.createCell(13).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 11, 13));
        rowUnderHead.createCell(11).setCellValue("Count");
        rowUnderHead.getCell(11).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(12).setCellValue("% from approved");
        rowUnderHead.getCell(12).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(13).setCellValue("% from all apps");
        rowUnderHead.getCell(13).setCellStyle(styleTextHeaders);

        rowHead.createCell(14).setCellValue("Total");
        rowHead.getCell(14).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(14).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber+1, 14, 14));

        rowNumber+=2;

        for (ExportApplicationsInfoDate i : object.getExportApplicationsInfoDateList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getDate());
            row.getCell(0).setCellStyle(styleDate);
            row.createCell(1).setCellValue(i.getCountAppsInProgressNew());
            row.getCell(1).setCellStyle(styleNumber);
            if (!i.getCountAppsTotalNew().equals(0L)) {
                row.createCell(2).setCellValue((double) i.getCountAppsInProgressNew() /
                        (double) i.getCountAppsTotalNew());
                row.getCell(2).setCellStyle(stylePercent);
            }
            row.createCell(3).setCellValue(i.getCountAppsCanceledBySystemNew());
            row.getCell(3).setCellStyle(styleNumber);
            if (!i.getCountAppsTotalNew().equals(0L)) {
                row.createCell(4).setCellValue((double) i.getCountAppsCanceledBySystemNew() /
                        (double) i.getCountAppsTotalNew());
                row.getCell(4).setCellStyle(stylePercent);
            }

            row.createCell(5).setCellValue(i.getCountAppsCanceledByClientNew());
            row.getCell(5).setCellStyle(styleNumber);
            if (!i.getCountAppsTotalNew().equals(0L)) {
                row.createCell(6).setCellValue((double) i.getCountAppsCanceledByClientNew() /
                        (double) i.getCountAppsTotalNew());
                row.getCell(6).setCellStyle(stylePercent);
            }

            row.createCell(7).setCellValue(i.getCountAppsRejectedNew());
            row.getCell(7).setCellStyle(styleNumber);
            if (!i.getCountAppsTotalNew().equals(0L)) {
                row.createCell(8).setCellValue((double) i.getCountAppsRejectedNew() /
                        (double) i.getCountAppsTotalNew());
                row.getCell(8).setCellStyle(stylePercent);
            }

            row.createCell(9).setCellValue(i.getCountAppsWasApprovedNew());
            row.getCell(9).setCellStyle(styleNumber);
            if (!i.getCountAppsTotalNew().equals(0L)) {
                row.createCell(10).setCellValue((double) i.getCountAppsWasApprovedNew() /
                        (double) i.getCountAppsTotalNew());
                row.getCell(10).setCellStyle(stylePercent);
            }

            row.createCell(11).setCellValue(i.getCountAppsIssuedNew());
            row.getCell(11).setCellStyle(styleNumber);
            if (!i.getCountAppsWasApprovedNew().equals(0L)) {
                row.createCell(12).setCellValue((double) i.getCountAppsIssuedNew() /
                        (double) i.getCountAppsWasApprovedNew());
                row.getCell(12).setCellStyle(stylePercent);
            }
            if (!i.getCountAppsTotalNew().equals(0L)) {
                row.createCell(13).setCellValue((double) i.getCountAppsIssuedNew() /
                        (double) i.getCountAppsTotalNew());
                row.getCell(13).setCellStyle(stylePercent);
            }

            row.createCell(14).setCellValue(i.getCountAppsTotalNew());
            row.getCell(14).setCellStyle(styleNumberBold);

            rowNumber++;

        }

        Row row = sheet.createRow(rowNumber);

        row.createCell(0).setCellValue("Total");
        row.getCell(0).setCellStyle(styleTitle);
        row.createCell(1).setCellValue(object.getTotal().getCountAppsInProgressNew());
        row.getCell(1).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotalNew().equals(0L)) {
            row.createCell(2).setCellValue((double) object.getTotal().getCountAppsInProgressNew() /
                    (double) object.getTotal().getCountAppsTotalNew());
            row.getCell(2).setCellStyle(stylePercentBold);
        }
        row.createCell(3).setCellValue(object.getTotal().getCountAppsCanceledBySystemNew());
        row.getCell(3).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotalNew().equals(0L)) {
            row.createCell(4).setCellValue((double) object.getTotal().getCountAppsCanceledBySystemNew() /
                    (double) object.getTotal().getCountAppsTotalNew());
            row.getCell(4).setCellStyle(stylePercentBold);
        }

        row.createCell(5).setCellValue(object.getTotal().getCountAppsCanceledByClientNew());
        row.getCell(5).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotalNew().equals(0L)) {
            row.createCell(6).setCellValue((double) object.getTotal().getCountAppsCanceledByClientNew() /
                    (double) object.getTotal().getCountAppsTotalNew());
            row.getCell(6).setCellStyle(stylePercentBold);
        }

        row.createCell(7).setCellValue(object.getTotal().getCountAppsRejectedNew());
        row.getCell(7).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotalNew().equals(0L)) {
            row.createCell(8).setCellValue((double) object.getTotal().getCountAppsRejectedNew() /
                    (double) object.getTotal().getCountAppsTotalNew());
            row.getCell(8).setCellStyle(stylePercentBold);
        }

        row.createCell(9).setCellValue(object.getTotal().getCountAppsWasApprovedNew());
        row.getCell(9).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotalNew().equals(0L)) {
            row.createCell(10).setCellValue((double) object.getTotal().getCountAppsWasApprovedNew() /
                    (double) object.getTotal().getCountAppsTotalNew());
            row.getCell(10).setCellStyle(stylePercentBold);
        }

        row.createCell(11).setCellValue(object.getTotal().getCountAppsIssuedNew());
        row.getCell(11).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsWasApprovedNew().equals(0L)) {
            row.createCell(12).setCellValue((double) object.getTotal().getCountAppsIssuedNew() /
                    (double) object.getTotal().getCountAppsWasApprovedNew());
            row.getCell(12).setCellStyle(stylePercentBold);
        }
        if (!object.getTotal().getCountAppsTotalNew().equals(0L)) {
            row.createCell(13).setCellValue((double) object.getTotal().getCountAppsIssuedNew() /
                    (double) object.getTotal().getCountAppsTotalNew());
            row.getCell(13).setCellStyle(stylePercentBold);
        }

        row.createCell(14).setCellValue(object.getTotal().getCountAppsTotalNew());
        row.getCell(14).setCellStyle(styleNumberBold);

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 15) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }

        sheet.createFreezePane(1,2);

    }

    private static void createSheetForExportApplicationsInfoDateReportRepeat(Workbook workbook,
                                                                             ExportApplicationsInfoDateReportObject object,
                                                                             CellStyle styleTextHeaders,
                                                                             CellStyle styleSimpleText,
                                                                             CellStyle styleDateTime,
                                                                             CellStyle styleDate,
                                                                             CellStyle styleTitle,
                                                                             CellStyle styleNumber,
                                                                             CellStyle styleNumberBold,
                                                                             CellStyle stylePercent,
    CellStyle stylePercentBold) {
        Sheet sheet = workbook.createSheet("Repeat clients");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        Row rowUnderHead = sheet.createRow(rowNumber + 1);

        rowHead.createCell(0).setCellValue("Date");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(0).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 0, 0));

        rowHead.createCell(1).setCellValue("In progress");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 1, 2));
        rowUnderHead.createCell(1).setCellValue("Count");
        rowUnderHead.getCell(1).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(2).setCellValue("%");
        rowUnderHead.getCell(2).setCellStyle(styleTextHeaders);

        rowHead.createCell(3).setCellValue("Canceled by system");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 3, 4));
        rowUnderHead.createCell(3).setCellValue("Count");
        rowUnderHead.getCell(3).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(4).setCellValue("%");
        rowUnderHead.getCell(4).setCellStyle(styleTextHeaders);

        rowHead.createCell(5).setCellValue("Canceled by client");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 5, 6));
        rowUnderHead.createCell(5).setCellValue("Count");
        rowUnderHead.getCell(5).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(6).setCellValue("%");
        rowUnderHead.getCell(6).setCellStyle(styleTextHeaders);

        rowHead.createCell(7).setCellValue("Rejected");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 7, 8));
        rowUnderHead.createCell(7).setCellValue("Count");
        rowUnderHead.getCell(7).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(8).setCellValue("%");
        rowUnderHead.getCell(8).setCellStyle(styleTextHeaders);

        rowHead.createCell(9).setCellValue("Was approved");
        rowHead.getCell(9).setCellStyle(styleTextHeaders);
        rowHead.createCell(10).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 9, 10));
        rowUnderHead.createCell(9).setCellValue("Count");
        rowUnderHead.getCell(9).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(10).setCellValue("%");
        rowUnderHead.getCell(10).setCellStyle(styleTextHeaders);

        rowHead.createCell(11).setCellValue("Issued");
        rowHead.getCell(11).setCellStyle(styleTextHeaders);
        rowHead.createCell(12).setCellStyle(styleTextHeaders);
        rowHead.createCell(13).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 11, 13));
        rowUnderHead.createCell(11).setCellValue("Count");
        rowUnderHead.getCell(11).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(12).setCellValue("% from approved");
        rowUnderHead.getCell(12).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(13).setCellValue("% from all apps");
        rowUnderHead.getCell(13).setCellStyle(styleTextHeaders);

        rowHead.createCell(14).setCellValue("Total");
        rowHead.getCell(14).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(14).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber+1, 14, 14));

        rowNumber+=2;

        for (ExportApplicationsInfoDate i : object.getExportApplicationsInfoDateList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getDate());
            row.getCell(0).setCellStyle(styleDate);
            row.createCell(1).setCellValue(i.getCountAppsInProgressRepeat());
            row.getCell(1).setCellStyle(styleNumber);
            if (!i.getCountAppsTotalRepeat().equals(0L)) {
                row.createCell(2).setCellValue((double) i.getCountAppsInProgressRepeat() /
                        (double) i.getCountAppsTotalRepeat());
                row.getCell(2).setCellStyle(stylePercent);
            }
            row.createCell(3).setCellValue(i.getCountAppsCanceledBySystemRepeat());
            row.getCell(3).setCellStyle(styleNumber);
            if (!i.getCountAppsTotalRepeat().equals(0L)) {
                row.createCell(4).setCellValue((double) i.getCountAppsCanceledBySystemRepeat() /
                        (double) i.getCountAppsTotalRepeat());
                row.getCell(4).setCellStyle(stylePercent);
            }

            row.createCell(5).setCellValue(i.getCountAppsCanceledByClientRepeat());
            row.getCell(5).setCellStyle(styleNumber);
            if (!i.getCountAppsTotalRepeat().equals(0L)) {
                row.createCell(6).setCellValue((double) i.getCountAppsCanceledByClientRepeat() /
                        (double) i.getCountAppsTotalRepeat());
                row.getCell(6).setCellStyle(stylePercent);
            }

            row.createCell(7).setCellValue(i.getCountAppsRejectedRepeat());
            row.getCell(7).setCellStyle(styleNumber);
            if (!i.getCountAppsTotalRepeat().equals(0L)) {
                row.createCell(8).setCellValue((double) i.getCountAppsRejectedRepeat() /
                        (double) i.getCountAppsTotalRepeat());
                row.getCell(8).setCellStyle(stylePercent);
            }

            row.createCell(9).setCellValue(i.getCountAppsWasApprovedRepeat());
            row.getCell(9).setCellStyle(styleNumber);
            if (!i.getCountAppsTotalRepeat().equals(0L)) {
                row.createCell(10).setCellValue((double) i.getCountAppsWasApprovedRepeat() /
                        (double) i.getCountAppsTotalRepeat());
                row.getCell(10).setCellStyle(stylePercent);
            }

            row.createCell(11).setCellValue(i.getCountAppsIssuedRepeat());
            row.getCell(11).setCellStyle(styleNumber);
            if (!i.getCountAppsWasApprovedRepeat().equals(0L)) {
                row.createCell(12).setCellValue((double) i.getCountAppsIssuedRepeat() /
                        (double) i.getCountAppsWasApprovedRepeat());
                row.getCell(12).setCellStyle(stylePercent);
            }
            if (!i.getCountAppsTotalRepeat().equals(0L)) {
                row.createCell(13).setCellValue((double) i.getCountAppsIssuedRepeat() /
                        (double) i.getCountAppsTotalRepeat());
                row.getCell(13).setCellStyle(stylePercent);
            }

            row.createCell(14).setCellValue(i.getCountAppsTotalRepeat());
            row.getCell(14).setCellStyle(styleNumberBold);

            rowNumber++;

        }

        Row row = sheet.createRow(rowNumber);

        row.createCell(0).setCellValue("Total");
        row.getCell(0).setCellStyle(styleTitle);
        row.createCell(1).setCellValue(object.getTotal().getCountAppsInProgressRepeat());
        row.getCell(1).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotalRepeat().equals(0L)) {
            row.createCell(2).setCellValue((double) object.getTotal().getCountAppsInProgressRepeat() /
                    (double) object.getTotal().getCountAppsTotalRepeat());
            row.getCell(2).setCellStyle(stylePercentBold);
        }
        row.createCell(3).setCellValue(object.getTotal().getCountAppsCanceledBySystemRepeat());
        row.getCell(3).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotalRepeat().equals(0L)) {
            row.createCell(4).setCellValue((double) object.getTotal().getCountAppsCanceledBySystemRepeat() /
                    (double) object.getTotal().getCountAppsTotalRepeat());
            row.getCell(4).setCellStyle(stylePercentBold);
        }

        row.createCell(5).setCellValue(object.getTotal().getCountAppsCanceledByClientRepeat());
        row.getCell(5).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotalRepeat().equals(0L)) {
            row.createCell(6).setCellValue((double) object.getTotal().getCountAppsCanceledByClientRepeat() /
                    (double) object.getTotal().getCountAppsTotalRepeat());
            row.getCell(6).setCellStyle(stylePercentBold);
        }

        row.createCell(7).setCellValue(object.getTotal().getCountAppsRejectedRepeat());
        row.getCell(7).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotalRepeat().equals(0L)) {
            row.createCell(8).setCellValue((double) object.getTotal().getCountAppsRejectedRepeat() /
                    (double) object.getTotal().getCountAppsTotalRepeat());
            row.getCell(8).setCellStyle(stylePercentBold);
        }

        row.createCell(9).setCellValue(object.getTotal().getCountAppsWasApprovedRepeat());
        row.getCell(9).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsTotalRepeat().equals(0L)) {
            row.createCell(10).setCellValue((double) object.getTotal().getCountAppsWasApprovedRepeat() /
                    (double) object.getTotal().getCountAppsTotalRepeat());
            row.getCell(10).setCellStyle(stylePercentBold);
        }

        row.createCell(11).setCellValue(object.getTotal().getCountAppsIssuedRepeat());
        row.getCell(11).setCellStyle(styleNumberBold);
        if (!object.getTotal().getCountAppsWasApprovedRepeat().equals(0L)) {
            row.createCell(12).setCellValue((double) object.getTotal().getCountAppsIssuedRepeat() /
                    (double) object.getTotal().getCountAppsWasApprovedRepeat());
            row.getCell(12).setCellStyle(stylePercentBold);
        }
        if (!object.getTotal().getCountAppsTotalRepeat().equals(0L)) {
            row.createCell(13).setCellValue((double) object.getTotal().getCountAppsIssuedRepeat() /
                    (double) object.getTotal().getCountAppsTotalRepeat());
            row.getCell(13).setCellStyle(stylePercentBold);
        }

        row.createCell(14).setCellValue(object.getTotal().getCountAppsTotalRepeat());
        row.getCell(14).setCellStyle(styleNumberBold);

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 15) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }

        sheet.createFreezePane(1,2);

    }

    private static void createSheetForExcelExportAppByUnderwriterPerHourReport(Workbook workbook,
                                                                               ExportAppByUnderwriterPerHourReportObject object,
                                                                               CellStyle styleTextHeaders,
                                                                               CellStyle styleSimpleText,
                                                                               CellStyle styleDateTime,
                                                                               CellStyle styleDate,
                                                                               CellStyle styleTitle,
                                                                               CellStyle styleNumber,
                                                                               CellStyle styleNumberBold) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);

        rowHead.createCell(0).setCellValue("Underwriter");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("00:00 - 01:00");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("01:00 - 02:00");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("02:00 - 03:00");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("03:00 - 04:00");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("04:00 - 05:00");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("05:00 - 05:00");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellValue("06:00 - 07:00");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellValue("07:00 - 08:00");
        rowHead.getCell(8).setCellStyle(styleTextHeaders);
        rowHead.createCell(9).setCellValue("08:00 - 09:00");
        rowHead.getCell(9).setCellStyle(styleTextHeaders);
        rowHead.createCell(10).setCellValue("9:00 - 10:00");
        rowHead.getCell(10).setCellStyle(styleTextHeaders);
        rowHead.createCell(11).setCellValue("10:00 - 11:00");
        rowHead.getCell(11).setCellStyle(styleTextHeaders);
        rowHead.createCell(12).setCellValue("11:00 - 12:00");
        rowHead.getCell(12).setCellStyle(styleTextHeaders);
        rowHead.createCell(13).setCellValue("12:00 - 13:00");
        rowHead.getCell(13).setCellStyle(styleTextHeaders);
        rowHead.createCell(14).setCellValue("13:00 - 14:00");
        rowHead.getCell(14).setCellStyle(styleTextHeaders);
        rowHead.createCell(15).setCellValue("14:00 - 15:00");
        rowHead.getCell(15).setCellStyle(styleTextHeaders);
        rowHead.createCell(16).setCellValue("15:00 - 16:00");
        rowHead.getCell(16).setCellStyle(styleTextHeaders);
        rowHead.createCell(17).setCellValue("16:00 - 17:00");
        rowHead.getCell(17).setCellStyle(styleTextHeaders);
        rowHead.createCell(18).setCellValue("17:00 - 18:00");
        rowHead.getCell(18).setCellStyle(styleTextHeaders);
        rowHead.createCell(19).setCellValue("18:00 - 19:00");
        rowHead.getCell(19).setCellStyle(styleTextHeaders);
        rowHead.createCell(20).setCellValue("19:00 - 20:00");
        rowHead.getCell(20).setCellStyle(styleTextHeaders);
        rowHead.createCell(21).setCellValue("20:00 - 21:00");
        rowHead.getCell(21).setCellStyle(styleTextHeaders);
        rowHead.createCell(22).setCellValue("21:00 - 22:00");
        rowHead.getCell(22).setCellStyle(styleTextHeaders);
        rowHead.createCell(23).setCellValue("22:00 - 23:00");
        rowHead.getCell(23).setCellStyle(styleTextHeaders);
        rowHead.createCell(24).setCellValue("23:00 - 00:00");
        rowHead.getCell(24).setCellStyle(styleTextHeaders);
        rowHead.createCell(25).setCellValue("Total");
        rowHead.getCell(25).setCellStyle(styleTextHeaders);

        rowNumber++;

        for (ExportAppByUnderwriterPerHour i : object.getExportAppByUnderwriterPerHourList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getUnderwriter());
            row.getCell(0).setCellStyle(styleSimpleText);
            row.createCell(1).setCellValue(i.getApp0Hour());
            row.getCell(1).setCellStyle(styleNumber);
            row.createCell(2).setCellValue(i.getApp1Hour());
            row.getCell(2).setCellStyle(styleNumber);
            row.createCell(3).setCellValue(i.getApp2Hour());
            row.getCell(3).setCellStyle(styleNumber);
            row.createCell(4).setCellValue(i.getApp3Hour());
            row.getCell(4).setCellStyle(styleNumber);
            row.createCell(5).setCellValue(i.getApp4Hour());
            row.getCell(5).setCellStyle(styleNumber);
            row.createCell(6).setCellValue(i.getApp5Hour());
            row.getCell(6).setCellStyle(styleNumber);
            row.createCell(7).setCellValue(i.getApp6Hour());
            row.getCell(7).setCellStyle(styleNumber);
            row.createCell(8).setCellValue(i.getApp7Hour());
            row.getCell(8).setCellStyle(styleNumber);
            row.createCell(9).setCellValue(i.getApp8Hour());
            row.getCell(9).setCellStyle(styleNumber);
            row.createCell(10).setCellValue(i.getApp9Hour());
            row.getCell(10).setCellStyle(styleNumber);
            row.createCell(11).setCellValue(i.getApp10Hour());
            row.getCell(11).setCellStyle(styleNumber);
            row.createCell(12).setCellValue(i.getApp11Hour());
            row.getCell(12).setCellStyle(styleNumber);
            row.createCell(13).setCellValue(i.getApp12Hour());
            row.getCell(13).setCellStyle(styleNumber);
            row.createCell(14).setCellValue(i.getApp13Hour());
            row.getCell(14).setCellStyle(styleNumber);
            row.createCell(15).setCellValue(i.getApp14Hour());
            row.getCell(15).setCellStyle(styleNumber);
            row.createCell(16).setCellValue(i.getApp15Hour());
            row.getCell(16).setCellStyle(styleNumber);
            row.createCell(17).setCellValue(i.getApp16Hour());
            row.getCell(17).setCellStyle(styleNumber);
            row.createCell(18).setCellValue(i.getApp17Hour());
            row.getCell(18).setCellStyle(styleNumber);
            row.createCell(19).setCellValue(i.getApp18Hour());
            row.getCell(19).setCellStyle(styleNumber);
            row.createCell(20).setCellValue(i.getApp19Hour());
            row.getCell(20).setCellStyle(styleNumber);
            row.createCell(21).setCellValue(i.getApp20Hour());
            row.getCell(21).setCellStyle(styleNumber);
            row.createCell(22).setCellValue(i.getApp21Hour());
            row.getCell(22).setCellStyle(styleNumber);
            row.createCell(23).setCellValue(i.getApp22Hour());
            row.getCell(23).setCellStyle(styleNumber);
            row.createCell(24).setCellValue(i.getApp23Hour());
            row.getCell(24).setCellStyle(styleNumber);
            row.createCell(25).setCellValue(i.getAppCount());
            row.getCell(25).setCellStyle(styleNumberBold);

            rowNumber++;

        }
        Row row = sheet.createRow(rowNumber);
        row.createCell(0).setCellValue("Total");
        row.getCell(0).setCellStyle(styleTitle);
        row.createCell(1).setCellValue(object.getTotal().getApp0Hour());
        row.getCell(1).setCellStyle(styleNumberBold);
        row.createCell(2).setCellValue(object.getTotal().getApp1Hour());
        row.getCell(2).setCellStyle(styleNumberBold);
        row.createCell(3).setCellValue(object.getTotal().getApp2Hour());
        row.getCell(3).setCellStyle(styleNumberBold);
        row.createCell(4).setCellValue(object.getTotal().getApp3Hour());
        row.getCell(4).setCellStyle(styleNumberBold);
        row.createCell(5).setCellValue(object.getTotal().getApp4Hour());
        row.getCell(5).setCellStyle(styleNumberBold);
        row.createCell(6).setCellValue(object.getTotal().getApp5Hour());
        row.getCell(6).setCellStyle(styleNumberBold);
        row.createCell(7).setCellValue(object.getTotal().getApp6Hour());
        row.getCell(7).setCellStyle(styleNumberBold);
        row.createCell(8).setCellValue(object.getTotal().getApp7Hour());
        row.getCell(8).setCellStyle(styleNumberBold);
        row.createCell(9).setCellValue(object.getTotal().getApp8Hour());
        row.getCell(9).setCellStyle(styleNumberBold);
        row.createCell(10).setCellValue(object.getTotal().getApp9Hour());
        row.getCell(10).setCellStyle(styleNumberBold);
        row.createCell(11).setCellValue(object.getTotal().getApp10Hour());
        row.getCell(11).setCellStyle(styleNumberBold);
        row.createCell(12).setCellValue(object.getTotal().getApp11Hour());
        row.getCell(12).setCellStyle(styleNumberBold);
        row.createCell(13).setCellValue(object.getTotal().getApp12Hour());
        row.getCell(13).setCellStyle(styleNumberBold);
        row.createCell(14).setCellValue(object.getTotal().getApp13Hour());
        row.getCell(14).setCellStyle(styleNumberBold);
        row.createCell(15).setCellValue(object.getTotal().getApp14Hour());
        row.getCell(15).setCellStyle(styleNumberBold);
        row.createCell(16).setCellValue(object.getTotal().getApp15Hour());
        row.getCell(16).setCellStyle(styleNumberBold);
        row.createCell(17).setCellValue(object.getTotal().getApp16Hour());
        row.getCell(17).setCellStyle(styleNumberBold);
        row.createCell(18).setCellValue(object.getTotal().getApp17Hour());
        row.getCell(18).setCellStyle(styleNumberBold);
        row.createCell(19).setCellValue(object.getTotal().getApp18Hour());
        row.getCell(19).setCellStyle(styleNumberBold);
        row.createCell(20).setCellValue(object.getTotal().getApp19Hour());
        row.getCell(20).setCellStyle(styleNumberBold);
        row.createCell(21).setCellValue(object.getTotal().getApp20Hour());
        row.getCell(21).setCellStyle(styleNumberBold);
        row.createCell(22).setCellValue(object.getTotal().getApp21Hour());
        row.getCell(22).setCellStyle(styleNumberBold);
        row.createCell(23).setCellValue(object.getTotal().getApp22Hour());
        row.getCell(23).setCellStyle(styleNumberBold);
        row.createCell(24).setCellValue(object.getTotal().getApp23Hour());
        row.getCell(24).setCellStyle(styleNumberBold);
        row.createCell(25).setCellValue(object.getTotal().getAppCount());
        row.getCell(25).setCellStyle(styleNumberBold);

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 26) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }

        sheet.createFreezePane(1,1);

    }

    private static void createSheetForExcelExportAppProcessedByUnderwriterReport(Workbook workbook,
                                                                                 ExportAppProcessedByUnderwriterReportObject object,
                                                                                 CellStyle styleTextHeaders,
                                                                                 CellStyle styleSimpleText,
                                                                                 CellStyle styleDateTime,
                                                                                 CellStyle styleDate) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);

        rowHead.createCell(0).setCellValue("Application date");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Decision date");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Underwriter");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("Client type");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("Link to application");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("Status");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("Rejected by");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellValue("Reject's reason (VN)");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellValue("Reject's reason (EN)");
        rowHead.getCell(8).setCellStyle(styleTextHeaders);
        rowHead.createCell(9).setCellValue("Sent to revision. Date");
        rowHead.getCell(9).setCellStyle(styleTextHeaders);
        rowHead.createCell(10).setCellValue("Revision. Comment");
        rowHead.getCell(10).setCellStyle(styleTextHeaders);

        rowNumber++;

        for (ExportAppProcessedByUnderwriter i : object.getExportAppProcessedByUnderwriterList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getAppDate());
            row.getCell(0).setCellStyle(styleDateTime);
            row.createCell(1).setCellValue(i.getDecisionAt());
            row.getCell(1).setCellStyle(styleDateTime);
            row.createCell(2).setCellValue(i.getUnderwriter());
            row.getCell(2).setCellStyle(styleSimpleText);
            row.createCell(3).setCellValue(i.getClientType());
            row.getCell(3).setCellStyle(styleSimpleText);
            row.createCell(4).setCellValue("https://app.tienoi.com.vn/back-office/application/" + i.getAppId());
            row.getCell(4).setCellStyle(styleSimpleText);
            row.createCell(5).setCellValue(i.getStatus());
            row.getCell(5).setCellStyle(styleSimpleText);
            row.createCell(6).setCellValue(i.getRejectedBy());
            row.getCell(6).setCellStyle(styleSimpleText);
            row.createCell(7).setCellValue(i.getRejectReasonVn());
            row.getCell(7).setCellStyle(styleSimpleText);
            row.createCell(8).setCellValue(i.getRejectReasonEn());
            row.getCell(8).setCellStyle(styleSimpleText);
            row.createCell(9).setCellValue(i.getSentToRevisionAt());
            row.getCell(9).setCellStyle(styleDateTime);
            row.createCell(10).setCellValue(i.getRevisionComment());
            row.getCell(10).setCellStyle(styleSimpleText);
            rowNumber++;
        }

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 10) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.setColumnWidth(10, 33 * 256);
        sheet.createFreezePane(0,1);

    }

    private static void createSheetForExcelExportUnderwritersResultWithAppReport(Workbook workbook,
                                                                                 UnderwritersResultWithAppReportObject object,
                                                                                 CellStyle styleTextHeaders,
                                                                                 CellStyle styleTitle,
                                                                                 CellStyle styleSimpleText,
                                                                                 CellStyle styleDateTime,
                                                                                 CellStyle styleDate,
                                                                                 CellStyle styleNumber,
                                                                                 CellStyle styleNumberBold,
                                                                                 CellStyle stylePercent,
                                                                                 CellStyle stylePercentBold) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        Row rowUnderHead = sheet.createRow(rowNumber + 1);

        rowHead.createCell(0).setCellValue("Underwriter");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(0).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 0, 0));

        rowHead.createCell(1).setCellValue("Apps with manual decision");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(1).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 1, 1));

        rowHead.createCell(2).setCellValue("Issued loan");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 2, 3));

        rowUnderHead.createCell(2).setCellValue("Count");
        rowUnderHead.getCell(2).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(3).setCellValue("%");
        rowUnderHead.getCell(3).setCellStyle(styleTextHeaders);

        rowHead.createCell(4).setCellValue("Was expired > 4 DPD");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 4, 5));

        rowUnderHead.createCell(4).setCellValue("Count");
        rowUnderHead.getCell(4).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(5).setCellValue("%");
        rowUnderHead.getCell(5).setCellStyle(styleTextHeaders);

        rowNumber += 2;

        for (UnderwritersResultWithApp i : object.getUnderwritersResultWithAppList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getUnderwriter());
            row.getCell(0).setCellStyle(styleSimpleText);
            row.createCell(1).setCellValue(i.getCountApps());
            row.getCell(1).setCellStyle(styleNumber);
            row.createCell(2).setCellValue(i.getCountIssuedLoan());
            row.getCell(2).setCellStyle(styleNumber);
            if (i.getCountApps() != null && i.getCountIssuedLoan() != null && !i.getCountApps().equals(0L)) {
                row.createCell(3).setCellValue((double) i.getCountIssuedLoan() / (double) i.getCountApps());
                row.getCell(3).setCellStyle(stylePercent);
            }
            row.createCell(4).setCellValue(i.getCountLoanWithDpd());
            row.getCell(4).setCellStyle(styleNumber);
            if (i.getCountIssuedLoan() != null && i.getCountLoanWithDpd() != null && !i.getCountIssuedLoan().equals(0L)) {
                row.createCell(5).setCellValue((double) i.getCountLoanWithDpd() / (double) i.getCountIssuedLoan());
                row.getCell(5).setCellStyle(stylePercent);
            }

            rowNumber++;
        }

        Row row = sheet.createRow(rowNumber);
        row.createCell(0).setCellValue("Total");
        row.getCell(0).setCellStyle(styleTitle);
        row.createCell(1).setCellValue(object.getTotal().getCountApps());
        row.getCell(1).setCellStyle(styleNumberBold);
        row.createCell(2).setCellValue(object.getTotal().getCountIssuedLoan());
        row.getCell(2).setCellStyle(styleNumberBold);
        if (object.getTotal().getCountApps() != null && object.getTotal().getCountIssuedLoan() != null && !object.getTotal().getCountApps().equals(0L)) {
            row.createCell(3).setCellValue((double) object.getTotal().getCountIssuedLoan() / (double) object.getTotal().getCountApps());
            row.getCell(3).setCellStyle(stylePercentBold);
        }
        row.createCell(4).setCellValue(object.getTotal().getCountLoanWithDpd());
        row.getCell(4).setCellStyle(styleNumberBold);
        if (object.getTotal().getCountIssuedLoan() != null && object.getTotal().getCountLoanWithDpd() != null && !object.getTotal().getCountIssuedLoan().equals(0L)) {
            row.createCell(5).setCellValue((double) object.getTotal().getCountLoanWithDpd() / (double) object.getTotal().getCountIssuedLoan());
            row.getCell(5).setCellStyle(stylePercentBold);
        }

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 6) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.createFreezePane(1,2);

    }

    private static void createSheetForExcelExportDateHourCountAmountReport(Workbook workbook,
                                                                           ExportDateHourCountAmountReportObject object,
                                                                           CellStyle styleTextHeaders,
                                                                           CellStyle styleTitle,
                                                                           CellStyle styleSimpleText,
                                                                           CellStyle styleDateTime,
                                                                           CellStyle styleDate,
                                                                           CellStyle styleNumber,
                                                                           CellStyle styleNumberBold,
                                                                           String nameTypeLoanOrPayment) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        Row rowUnderHead = sheet.createRow(rowNumber + 1);

        rowHead.createCell(0).setCellValue("Date");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(0).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 0, 0));
        rowHead.createCell(1).setCellValue("Hour");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(1).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 1, 1));
        rowHead.createCell(2).setCellValue("Total");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 2, 3));
        rowUnderHead.createCell(2).setCellValue(nameTypeLoanOrPayment + " count");
        rowUnderHead.getCell(2).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(3).setCellValue(nameTypeLoanOrPayment + " amount");
        rowUnderHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("New clients");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 4, 5));
        rowUnderHead.createCell(4).setCellValue(nameTypeLoanOrPayment + " count");
        rowUnderHead.getCell(4).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(5).setCellValue(nameTypeLoanOrPayment + " amount");
        rowUnderHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("Repeat");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 6, 7));
        rowUnderHead.createCell(6).setCellValue(nameTypeLoanOrPayment + " count");
        rowUnderHead.getCell(6).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(7).setCellValue(nameTypeLoanOrPayment + " amount");
        rowUnderHead.getCell(7).setCellStyle(styleTextHeaders);

        rowNumber+=2;

        for (ExportDateHourCountAmount i : object.getExportDateHourCountAmountList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getDate());
            row.getCell(0).setCellStyle(styleDate);
            row.createCell(1).setCellValue(i.getHour());
            row.getCell(1).setCellStyle(styleNumber);
            row.createCell(2).setCellValue(i.getCountTotal());
            row.getCell(2).setCellStyle(styleNumber);
            row.createCell(3).setCellValue(i.getAmountTotal());
            row.getCell(3).setCellStyle(styleNumber);
            row.createCell(4).setCellValue(i.getCountNew());
            row.getCell(4).setCellStyle(styleNumber);
            row.createCell(5).setCellValue(i.getAmountNew());
            row.getCell(5).setCellStyle(styleNumber);
            row.createCell(6).setCellValue(i.getCountRepeat());
            row.getCell(6).setCellStyle(styleNumber);
            row.createCell(7).setCellValue(i.getAmountRepeat());
            row.getCell(7).setCellStyle(styleNumber);

            rowNumber++;
        }

        Row row = sheet.createRow(rowNumber);
        row.createCell(0).setCellValue("Total");
        row.getCell(0).setCellStyle(styleTitle);
        row.createCell(1).setCellStyle(styleTitle);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 0, 1));

        row.createCell(2).setCellValue(object.getTotal().getCountTotal());
        row.getCell(2).setCellStyle(styleNumberBold);
        row.createCell(3).setCellValue(object.getTotal().getAmountTotal());
        row.getCell(3).setCellStyle(styleNumberBold);
        row.createCell(4).setCellValue(object.getTotal().getCountNew());
        row.getCell(4).setCellStyle(styleNumberBold);
        row.createCell(5).setCellValue(object.getTotal().getAmountNew());
        row.getCell(5).setCellStyle(styleNumberBold);
        row.createCell(6).setCellValue(object.getTotal().getCountRepeat());
        row.getCell(6).setCellStyle(styleNumberBold);
        row.createCell(7).setCellValue(object.getTotal().getAmountRepeat());
        row.getCell(7).setCellStyle(styleNumberBold);

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 8) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.createFreezePane(2,2);

    }

    private static void createSheetForExcelExportLoansAndPaymentByDateReport(Workbook workbook,
                                                                             ExportLoansAndPaymentByDateReportObject object,
                                                                             CellStyle styleTextHeaders,
                                                                             CellStyle styleTitle,
                                                                             CellStyle styleSimpleText,
                                                                             CellStyle styleDateTime,
                                                                             CellStyle styleDate,
                                                                             CellStyle styleNumber,
                                                                             CellStyle styleNumberBold) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);

        rowHead.createCell(0).setCellValue("Date");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Loans amount");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Payments amount");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);

        rowNumber++;

        for (ExportLoansAndPaymentByDate i : object.getExportLoansAndPaymentByDateList()) {
            Row row = sheet.createRow(rowNumber);

            row.createCell(0).setCellValue(i.getDate());
            row.getCell(0).setCellStyle(styleDate);
            row.createCell(1).setCellValue(i.getAmountLoans());
            row.getCell(1).setCellStyle(styleNumber);
            row.createCell(2).setCellValue(i.getAmountPayments());
            row.getCell(2).setCellStyle(styleNumber);

            rowNumber++;
        }

        Row row = sheet.createRow(rowNumber);
        row.createCell(0).setCellValue("Total");
        row.getCell(0).setCellStyle(styleTitle);
        row.createCell(1).setCellValue(object.getTotal().getAmountLoans());
        row.getCell(1).setCellStyle(styleNumberBold);
        row.createCell(2).setCellValue(object.getTotal().getAmountPayments());
        row.getCell(2).setCellStyle(styleNumberBold);

        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 4) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.createFreezePane(0,1);



    }

    private static void createSheetForExportAppsBySourceReport(Workbook workbook,
                                                               ExportAppsBySourceReportObject object,
                                                               CellStyle styleTextHeaders,
                                                               CellStyle styleSimpleText,
                                                               CellStyle styleDateTime,
                                                               CellStyle styleDate,
                                                               CellStyle styleNumber) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);

        rowHead.createCell(0).setCellValue("Source");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Date");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Application id");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("Utm source");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("Utm campaign");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("Utm content");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("Utm medium");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellValue("Utm referrer");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellValue("Utm term");
        rowHead.getCell(8).setCellStyle(styleTextHeaders);
        rowHead.createCell(9).setCellValue("Status");
        rowHead.getCell(9).setCellStyle(styleTextHeaders);
        rowHead.createCell(10).setCellValue("Client type");
        rowHead.getCell(10).setCellStyle(styleTextHeaders);

        rowNumber++;

        for (ExportAppsBySource i : object.getExportAppsBySourceList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(i.getSourceName());
            row.getCell(0).setCellStyle(styleSimpleText);
            row.createCell(1).setCellValue(i.getDateTime());
            row.getCell(1).setCellStyle(styleDateTime);
            row.createCell(2).setCellValue(i.getApplicationId());
            row.getCell(2).setCellStyle(styleNumber);
            row.createCell(3).setCellValue(i.getUtmSource());
            row.getCell(3).setCellStyle(styleSimpleText);
            row.createCell(4).setCellValue(i.getUtmCampaign());
            row.getCell(4).setCellStyle(styleSimpleText);
            row.createCell(5).setCellValue(i.getUtmContent());
            row.getCell(5).setCellStyle(styleSimpleText);
            row.createCell(6).setCellValue(i.getUtmMedium());
            row.getCell(6).setCellStyle(styleSimpleText);
            row.createCell(7).setCellValue(i.getUtmReferrer());
            row.getCell(7).setCellStyle(styleSimpleText);
            row.createCell(8).setCellValue(i.getUtmTerm());
            row.getCell(8).setCellStyle(styleSimpleText);
            row.createCell(9).setCellValue(i.getStatus());
            row.getCell(9).setCellStyle(styleSimpleText);
            row.createCell(10).setCellValue(i.getClientType());
            row.getCell(10).setCellStyle(styleSimpleText);

            rowNumber++;
        }
        rowNumber ++;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getCreatedAt());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 12) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.createFreezePane(0,1);
    }



    private static void createSheetForAppAndLoanBySourceReport(Workbook workbook,
                                                               AppAndLoanBySourceReportObject object,
                                                               CellStyle styleTextHeaders,
                                                               CellStyle styleSimpleText,
                                                               CellStyle styleTitle,
                                                               CellStyle styleDateTime,
                                                               CellStyle styleNumber,
                                                               CellStyle styleNumberBold,
                                                               CellStyle stylePercent,
                                                               CellStyle stylePercentBold,
                                                               CellStyle styleDate) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        Row rowUnderHead = sheet.createRow(rowNumber + 1);

        rowHead.createCell(0).setCellValue("Source");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(0).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber + 1, 0, 0));
        rowHead.createCell(1).setCellValue("New clients");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 1, 5));
        rowHead.createCell(6).setCellValue("Repeat clients");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellStyle(styleTextHeaders);
        rowHead.createCell(9).setCellStyle(styleTextHeaders);
        rowHead.createCell(10).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 6, 10));
        rowHead.createCell(11).setCellValue("Total clients");
        rowHead.getCell(11).setCellStyle(styleTextHeaders);
        rowHead.createCell(12).setCellStyle(styleTextHeaders);
        rowHead.createCell(13).setCellStyle(styleTextHeaders);
        rowHead.createCell(14).setCellStyle(styleTextHeaders);
        rowHead.createCell(15).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 11, 15));

        rowUnderHead.createCell(1).setCellValue("Applications");
        rowUnderHead.getCell(1).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(2).setCellValue("Loans");
        rowUnderHead.getCell(2).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(3).setCellValue("Loans %");
        rowUnderHead.getCell(3).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(4).setCellValue("Loans amount");
        rowUnderHead.getCell(4).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(5).setCellValue("Average amount");
        rowUnderHead.getCell(5).setCellStyle(styleTextHeaders);

        rowUnderHead.createCell(6).setCellValue("Applications");
        rowUnderHead.getCell(6).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(7).setCellValue("Loans");
        rowUnderHead.getCell(7).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(8).setCellValue("Loans %");
        rowUnderHead.getCell(8).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(9).setCellValue("Loans amount");
        rowUnderHead.getCell(9).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(10).setCellValue("Average amount");
        rowUnderHead.getCell(10).setCellStyle(styleTextHeaders);

        rowUnderHead.createCell(11).setCellValue("Applications");
        rowUnderHead.getCell(11).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(12).setCellValue("Loans");
        rowUnderHead.getCell(12).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(13).setCellValue("Loans %");
        rowUnderHead.getCell(13).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(14).setCellValue("Loans amount");
        rowUnderHead.getCell(14).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(15).setCellValue("Average amount");
        rowUnderHead.getCell(15).setCellStyle(styleTextHeaders);

        rowNumber += 2;

        for (AppAndLoanBySource appAndLoanBySource : object.getAppAndLoanBySourceList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(appAndLoanBySource.getSource());
            row.getCell(0).setCellStyle(styleSimpleText);
            row.createCell(1).setCellValue(appAndLoanBySource.getCountAppsNew());
            row.getCell(1).setCellStyle(styleNumber);
            row.createCell(2).setCellValue(appAndLoanBySource.getCountLoansNew());
            row.getCell(2).setCellStyle(styleNumber);
            if (appAndLoanBySource.getCountLoansNew() != null && appAndLoanBySource.getCountAppsNew() != null &&
            !appAndLoanBySource.getCountAppsNew().equals(0L)) {
                row.createCell(3).setCellValue((double) appAndLoanBySource.getCountLoansNew() /
                        (double) appAndLoanBySource.getCountAppsNew());
                row.getCell(3).setCellStyle(stylePercent);
            }
            row.createCell(4).setCellValue(appAndLoanBySource.getAmountLoanNew());
            row.getCell(4).setCellStyle(styleNumber);
            if (appAndLoanBySource.getAmountLoanNew() != null && appAndLoanBySource.getCountLoansNew() != null &&
                    !appAndLoanBySource.getCountLoansNew().equals(0L)) {
                row.createCell(5).setCellValue(appAndLoanBySource.getAmountLoanNew() /
                        (double) appAndLoanBySource.getCountLoansNew());
                row.getCell(5).setCellStyle(styleNumber);
            }

            row.createCell(6).setCellValue(appAndLoanBySource.getCountAppsRepeat());
            row.getCell(6).setCellStyle(styleNumber);
            row.createCell(7).setCellValue(appAndLoanBySource.getCountLoansRepeat());
            row.getCell(7).setCellStyle(styleNumber);
            if (appAndLoanBySource.getCountLoansRepeat() != null && appAndLoanBySource.getCountAppsRepeat() != null &&
                    !appAndLoanBySource.getCountAppsRepeat().equals(0L)) {
                row.createCell(8).setCellValue((double) appAndLoanBySource.getCountLoansRepeat() /
                        (double) appAndLoanBySource.getCountAppsRepeat());
                row.getCell(8).setCellStyle(stylePercent);
            }
            row.createCell(9).setCellValue(appAndLoanBySource.getAmountLoanRepeat());
            row.getCell(9).setCellStyle(styleNumber);
            if (appAndLoanBySource.getAmountLoanNew() != null && appAndLoanBySource.getCountLoansRepeat() != null &&
                    !appAndLoanBySource.getCountLoansRepeat().equals(0L)) {
                row.createCell(10).setCellValue(appAndLoanBySource.getAmountLoanRepeat() /
                        (double) appAndLoanBySource.getCountLoansRepeat());
                row.getCell(10).setCellStyle(styleNumber);
            }


            row.createCell(11).setCellValue(appAndLoanBySource.getCountAppsTotal());
            row.getCell(11).setCellStyle(styleNumber);
            row.createCell(12).setCellValue(appAndLoanBySource.getCountLoansTotal());
            row.getCell(12).setCellStyle(styleNumber);
            if (appAndLoanBySource.getCountLoansTotal() != null && appAndLoanBySource.getCountAppsTotal() != null &&
                    !appAndLoanBySource.getCountAppsTotal().equals(0L)) {
                row.createCell(13).setCellValue((double) appAndLoanBySource.getCountLoansTotal() /
                        (double) appAndLoanBySource.getCountAppsTotal());
                row.getCell(13).setCellStyle(stylePercent);
            }
            row.createCell(14).setCellValue(appAndLoanBySource.getAmountLoanTotal());
            row.getCell(14).setCellStyle(styleNumber);
            if (appAndLoanBySource.getAmountLoanTotal() != null && appAndLoanBySource.getCountLoansTotal() != null &&
                    !appAndLoanBySource.getCountLoansTotal().equals(0L)) {
                row.createCell(15).setCellValue(appAndLoanBySource.getAmountLoanTotal() /
                        (double) appAndLoanBySource.getCountLoansTotal());
                row.getCell(15).setCellStyle(styleNumber);
            }

            rowNumber++;
        }

        Row rowTotal = sheet.createRow(rowNumber);
        rowTotal.createCell(0).setCellValue(object.getTotal().getSource());
        rowTotal.getCell(0).setCellStyle(styleTitle);
        rowTotal.createCell(1).setCellValue(object.getTotal().getCountAppsNew());
        rowTotal.getCell(1).setCellStyle(styleNumberBold);
        rowTotal.createCell(2).setCellValue(object.getTotal().getCountLoansNew());
        rowTotal.getCell(2).setCellStyle(styleNumberBold);
        if (object.getTotal().getCountLoansNew() != null && object.getTotal().getCountAppsNew() != null &&
                !object.getTotal().getCountAppsNew().equals(0L)) {
            rowTotal.createCell(3).setCellValue((double) object.getTotal().getCountLoansNew() /
                    (double) object.getTotal().getCountAppsNew());
            rowTotal.getCell(3).setCellStyle(stylePercentBold);
        }
        rowTotal.createCell(4).setCellValue(object.getTotal().getAmountLoanNew());
        rowTotal.getCell(4).setCellStyle(styleNumberBold);
        if (object.getTotal().getAmountLoanNew() != null && object.getTotal().getCountLoansNew() != null &&
                !object.getTotal().getCountLoansNew().equals(0L)) {
            rowTotal.createCell(5).setCellValue(object.getTotal().getAmountLoanNew() /
                    (double) object.getTotal().getCountLoansNew());
            rowTotal.getCell(5).setCellStyle(styleNumberBold);
        }

        rowTotal.createCell(6).setCellValue(object.getTotal().getCountAppsRepeat());
        rowTotal.getCell(6).setCellStyle(styleNumberBold);
        rowTotal.createCell(7).setCellValue(object.getTotal().getCountLoansRepeat());
        rowTotal.getCell(7).setCellStyle(styleNumberBold);
        if (object.getTotal().getCountLoansRepeat() != null && object.getTotal().getCountAppsRepeat() != null &&
                !object.getTotal().getCountAppsRepeat().equals(0L)) {
            rowTotal.createCell(8).setCellValue((double) object.getTotal().getCountLoansRepeat() /
                    (double) object.getTotal().getCountAppsRepeat());
            rowTotal.getCell(8).setCellStyle(stylePercentBold);
        }
        rowTotal.createCell(9).setCellValue(object.getTotal().getAmountLoanRepeat());
        rowTotal.getCell(9).setCellStyle(styleNumberBold);
        if (object.getTotal().getAmountLoanRepeat() != null && object.getTotal().getCountLoansRepeat() != null &&
                !object.getTotal().getCountLoansRepeat().equals(0L)) {
            rowTotal.createCell(10).setCellValue(object.getTotal().getAmountLoanRepeat() /
                    (double) object.getTotal().getCountLoansRepeat());
            rowTotal.getCell(10).setCellStyle(styleNumberBold);
        }

        rowTotal.createCell(11).setCellValue(object.getTotal().getCountAppsTotal());
        rowTotal.getCell(11).setCellStyle(styleNumberBold);
        rowTotal.createCell(12).setCellValue(object.getTotal().getCountLoansTotal());
        rowTotal.getCell(12).setCellStyle(styleNumberBold);
        if (object.getTotal().getCountLoansTotal() != null && object.getTotal().getCountAppsTotal() != null &&
                !object.getTotal().getCountAppsTotal().equals(0L)) {
            rowTotal.createCell(13).setCellValue((double) object.getTotal().getCountLoansTotal() /
                    (double) object.getTotal().getCountAppsTotal());
            rowTotal.getCell(13).setCellStyle(stylePercentBold);
        }
        rowTotal.createCell(14).setCellValue(object.getTotal().getAmountLoanTotal());
        rowTotal.getCell(14).setCellStyle(styleNumberBold);
        if (object.getTotal().getAmountLoanTotal() != null && object.getTotal().getCountLoansTotal() != null &&
                !object.getTotal().getCountLoansTotal().equals(0L)) {
            rowTotal.createCell(15).setCellValue(object.getTotal().getAmountLoanTotal() /
                    (double) object.getTotal().getCountLoansTotal());
            rowTotal.getCell(15).setCellStyle(styleNumberBold);
        }


        rowNumber += 2;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at: ");
        row1.getCell(0).setCellStyle(styleSimpleText);
        row1.createCell(1).setCellValue(object.getDateWasCreated());
        row1.getCell(1).setCellStyle(styleDateTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("For period:");
        row2.getCell(0).setCellStyle(styleSimpleText);
        row2.createCell(1).setCellValue(object.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(object.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        int a = 0;
        while (a < 16) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.createFreezePane(1,2);

    }

    private static void createSheetForExportPtpPreSoftResultedCallsReport(Workbook workbook,
                                                                          PreSoftResultedPTPCallsReportObject object,
                                                                          CellStyle styleTextHeaders,
                                                                          CellStyle styleSimpleText,
                                                                          CellStyle styleDate,
                                                                          CellStyle styleDateTime,
                                                                          CellStyle styleNumber) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);

        rowHead.createCell(0).setCellValue("Agent's email");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Full name");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Current debt amount");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("Days overdue");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("Date and time of call");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("Max date for payment");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("Link to debt");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellValue("Link to client");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);

        rowNumber++;

        String startLinkForDebt = "https://app.tienoi.com.vn/back-office/debt-collection/";
        String startLinkForClient = "https://app.tienoi.com.vn/back-office/client/";

        for (PreSoftActivePromissedPaymentsForAgent ptp : object.getResultedPTPCallList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(ptp.getUserEmail());
            row.getCell(0).setCellStyle(styleSimpleText);

            row.createCell(1).setCellValue(ptp.getUserFullName());
            row.getCell(1).setCellStyle(styleSimpleText);

            row.createCell(2).setCellValue(ptp.getCurrentDebt());
            row.getCell(2).setCellStyle(styleNumber);

            row.createCell(3).setCellValue(ptp.getDaysOverdue());
            row.getCell(3).setCellStyle(styleNumber);

            row.createCell(4).setCellValue(ptp.getDateTimeCall());
            row.getCell(4).setCellStyle(styleDateTime);

            row.createCell(5).setCellValue(ptp.getMaxDateForPayment());
            row.getCell(5).setCellStyle(styleDate);

            row.createCell(6).setCellValue(startLinkForDebt + ptp.getDebtId());
            row.getCell(6).setCellStyle(styleSimpleText);

            row.createCell(7).setCellValue(startLinkForClient + ptp.getClientId());
            row.getCell(7).setCellStyle(styleSimpleText);

            rowNumber++;
        }

        rowNumber++;

        Row row = sheet.createRow(rowNumber);

        row.createCell(0).setCellValue("Export was created at: ");
        row.getCell(0).setCellStyle(styleSimpleText);
        row.createCell(1).setCellValue(object.getCreatedAt());
        row.getCell(1).setCellStyle(styleDateTime);

        int b = 0;
        while (b < 8) {
            sheet.setColumnWidth(b, 21 * 256);
            b++;
        }
        sheet.createFreezePane(0,1);
    }

    private static void createSheetForExportListClientDocsForCheckInsuranceReport(Workbook workbook,
                                                                                  ExportClientDocumentForCheckingInsuranceReportObject object,
                                                                                  CellStyle styleTextHeaders,
                                                                                  CellStyle styleSimpleText,
                                                                                  CellStyle styleDate) {
        Sheet sheet = workbook.createSheet("Info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);

        rowHead.createCell(0).setCellValue("Document number");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Full name");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Date of birth");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);

        rowNumber++;

        for (ClientDocumentAndName doc : object.getClientDocumentAndNameList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(doc.getDocumentNumber());
            row.getCell(0).setCellStyle(styleSimpleText);
            row.createCell(1).setCellValue(doc.getFullName());
            row.getCell(1).setCellStyle(styleSimpleText);
            row.createCell(2).setCellValue(doc.getBirthDate());
            row.getCell(2).setCellStyle(styleDate);
            rowNumber++;
        }

        int b = 0;
        while (b < 3) {
            sheet.setColumnWidth(b, 21 * 256);
            b++;
        }
        sheet.createFreezePane(0,1);

    }

    private static void createSheetPaymentsListExportPaymentsWithFeesReport(Workbook workbook,
                                                                            ExportPaymentsWithPaidFeesReportObject reportObject,
                                                                            CellStyle styleTextHeaders,
                                                                            CellStyle styleSimpleText,
                                                                            CellStyle styleTitle,
                                                                            CellStyle styleNumber,
                                                                            CellStyle styleNumberBold,
                                                                            CellStyle styleDate) {
        Sheet sheet = workbook.createSheet("Payments list");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        int columnForRowHead = 0;

        Row rowHead = sheet.createRow(rowNumber);
        Row rowUnderHead = sheet.createRow(rowNumber + 1);

        rowHead.createCell(columnForRowHead).setCellValue("Date");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("ID of loan");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("ID of application");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("Balance");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("Status of loan");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("Credit broker name");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("Pawnshop name");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("CMND");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("Client name");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("Email");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("Loan agreement");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("Consulting agreement");
        columnForRowHead++;
        rowHead.createCell(columnForRowHead).setCellValue("Paid for date");
        int a = 0;
        while (a <= columnForRowHead) {
            rowHead.getCell(a).setCellStyle(styleTextHeaders);
            rowUnderHead.createCell(a).setCellStyle(styleTextHeaders);
            sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,a, a));
            a++;
        }
        columnForRowHead++;
        int columnForRowUnderHead = columnForRowHead;

        rowHead.createCell(columnForRowHead).setCellValue("Paid to credit broker");
        rowHead.getCell(columnForRowHead).setCellStyle(styleTextHeaders);
        rowHead.createCell(columnForRowHead + 1).setCellStyle(styleTextHeaders);
        rowHead.createCell(columnForRowHead + 2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber, columnForRowHead, columnForRowHead + 2));
        columnForRowHead += 3;

        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("Prolongation fee");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        columnForRowUnderHead++;
        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("Consulting fee");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        columnForRowUnderHead++;
        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("Collection fee");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        columnForRowUnderHead++;

        rowHead.createCell(columnForRowHead).setCellValue("Paid to pawnshop");
        rowHead.getCell(columnForRowHead).setCellStyle(styleTextHeaders);
        rowHead.createCell(columnForRowHead + 1).setCellStyle(styleTextHeaders);
        rowHead.createCell(columnForRowHead + 2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber, columnForRowHead, columnForRowHead + 2));
        columnForRowHead += 3;

        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("Interest");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        columnForRowUnderHead++;
        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("Penalty interest");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        columnForRowUnderHead++;
        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("Principal");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        columnForRowUnderHead++;

        rowHead.createCell(columnForRowHead).setCellValue("Total income of credit broker. With VAT and without VAT");
        rowHead.getCell(columnForRowHead).setCellStyle(styleTextHeaders);
        rowHead.createCell(columnForRowHead + 1).setCellStyle(styleTextHeaders);
        rowHead.createCell(columnForRowHead + 2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber, columnForRowHead, columnForRowHead + 2));
        columnForRowHead += 3;

        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("Total income (include VAT)");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        columnForRowUnderHead++;
        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("Revenue (exclude VAT)");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        columnForRowUnderHead++;
        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("VAT");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        columnForRowUnderHead++;

        rowHead.createCell(columnForRowHead).setCellValue("Total income of pawnshop. With VAT and without VAT");
        rowHead.getCell(columnForRowHead).setCellStyle(styleTextHeaders);
        rowHead.createCell(columnForRowHead + 1).setCellStyle(styleTextHeaders);
        rowHead.createCell(columnForRowHead + 2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber, columnForRowHead, columnForRowHead + 2));


        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("Total income (include VAT)");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        columnForRowUnderHead++;
        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("Revenue (exclude VAT)");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        columnForRowUnderHead++;
        rowUnderHead.createCell(columnForRowUnderHead).setCellValue("VAT");
        rowUnderHead.getCell(columnForRowUnderHead).setCellStyle(styleTextHeaders);
        rowNumber += 2;

        for (ExportPaymentWithPaidFees payment : reportObject.getExportPaymentWithPaidFeesList()) {
            if (!payment.isTotalRow()) {
                Row row = sheet.createRow(rowNumber);
                int columnNumber = 0;

                row.createCell(columnNumber).setCellValue(payment.getDate());
                row.getCell(columnNumber).setCellStyle(styleDate);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getLoanId());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getAppId());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getBalance().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getLoanStatus());
                row.getCell(columnNumber).setCellStyle(styleSimpleText);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getBrokerName());
                row.getCell(columnNumber).setCellStyle(styleSimpleText);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPawnshopName());
                row.getCell(columnNumber).setCellStyle(styleSimpleText);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getDocumentNumber());
                row.getCell(columnNumber).setCellStyle(styleSimpleText);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getClientName());
                row.getCell(columnNumber).setCellStyle(styleSimpleText);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getEmail());
                row.getCell(columnNumber).setCellStyle(styleSimpleText);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getLoanAgreement());
                row.getCell(columnNumber).setCellStyle(styleSimpleText);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getConsultingAgreement());
                row.getCell(columnNumber).setCellStyle(styleSimpleText);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidProlongationForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidConsultingForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidCollectionFeeForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidInterestForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidPenaltyInterestForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidPrincipalForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidTotalIncomeBroker().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getRevenueBroker().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getOutgoingVATBroker().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidTotalIncomePawnShop().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getRevenuePawnShop().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getOutgoingVATPawnShop().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumber);

                rowNumber++;
            }
        }

        for (ExportPaymentWithPaidFees payment : reportObject.getExportPaymentWithPaidFeesList()) {
            if (payment.isTotalRow()) {
                Row row = sheet.createRow(rowNumber);
                int columnNumber = 0;

                row.createCell(columnNumber).setCellValue("Total");
                row.getCell(columnNumber).setCellStyle(styleTitle);
                columnNumber += 3;

                row.createCell(columnNumber).setCellValue(payment.getBalance().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber += 9;

                row.createCell(columnNumber).setCellValue(payment.getPaidForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidProlongationForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidConsultingForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidCollectionFeeForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidInterestForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidPenaltyInterestForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidPrincipalForDate().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidTotalIncomeBroker().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getRevenueBroker().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getOutgoingVATBroker().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getPaidTotalIncomePawnShop().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getRevenuePawnShop().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);
                columnNumber++;

                row.createCell(columnNumber).setCellValue(payment.getOutgoingVATPawnShop().doubleValue());
                row.getCell(columnNumber).setCellStyle(styleNumberBold);

                rowNumber++;
            }
        }

        int b = 0;
        while (b <= columnForRowUnderHead) {
            sheet.setColumnWidth(b, 21 * 256);
            b++;
        }
        sheet.createFreezePane(1,2);
    }

    private static void createSheetBonusAmountForStagesWithAssignedBonusReport(Workbook workbook,
                                                                              StagesWithAssignedBonusReportObject reportObject,
                                                                              StagesWithAssignedUserResult resultTotal,
                                                                              CellStyle styleSimpleText,
                                                                              CellStyle styleTextHeaders,
                                                                              CellStyle styleNumber,
                                                                              CellStyle styleNumberBold) {
        Sheet sheet = workbook.createSheet("Bonus amount");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        rowHead.createCell(0).setCellValue("Employee's full name");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Employee's email");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Employee's role");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("For payments on 1 - 15 overdue days");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("For payments on 16 - 60 overdue days");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("For payments on ... - ... overdue days");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("For payments on 61 and more overdue days");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellValue("Total bonus amount");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);

        rowNumber += 1;

        for(StagesWithAssignedUserResult userResult : reportObject.getStagesWithAssignedUserResultList()) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0).setCellValue(userResult.getUserFullName());
            row.getCell(0).setCellStyle(styleSimpleText);
            row.createCell(1).setCellValue(userResult.getUserEmail());
            row.getCell(1).setCellStyle(styleSimpleText);
            row.createCell(2).setCellValue(userResult.getUserRole());
            row.getCell(2).setCellStyle(styleSimpleText);
            row.createCell(3).setCellValue(userResult.getBonusAmountFrom1To15DaysOverdue());
            row.getCell(3).setCellStyle(styleNumber);
            row.createCell(4).setCellValue(userResult.getBonusAmountFrom16To29DaysOverdue());
            row.getCell(4).setCellStyle(styleNumber);
            row.createCell(5).setCellValue(userResult.getBonusAmountFrom30To60DaysOverdue());
            row.getCell(5).setCellStyle(styleNumber);
            row.createCell(6).setCellValue(userResult.getBonusAmountFrom61AndMoreDaysOverdue());
            row.getCell(6).setCellStyle(styleNumber);
            row.createCell(7).setCellValue(userResult.getBonusAmountTotal());
            row.getCell(7).setCellStyle(styleNumber);

            rowNumber += 1;
        }

        Row rowTotal = sheet.createRow(rowNumber);
        rowTotal.createCell(0).setCellValue("Total");
        rowTotal.getCell(0).setCellStyle(styleTextHeaders);
        rowTotal.createCell(1).setCellStyle(styleTextHeaders);
        rowTotal.createCell(2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 0, 2));

        rowTotal.createCell(3).setCellValue(resultTotal.getBonusAmountFrom1To15DaysOverdue());
        rowTotal.getCell(3).setCellStyle(styleNumberBold);
        rowTotal.createCell(4).setCellValue(resultTotal.getBonusAmountFrom16To29DaysOverdue());
        rowTotal.getCell(4).setCellStyle(styleNumberBold);
        rowTotal.createCell(5).setCellValue(resultTotal.getBonusAmountFrom30To60DaysOverdue());
        rowTotal.getCell(5).setCellStyle(styleNumberBold);
        rowTotal.createCell(6).setCellValue(resultTotal.getBonusAmountFrom61AndMoreDaysOverdue());
        rowTotal.getCell(6).setCellStyle(styleNumberBold);
        rowTotal.createCell(7).setCellValue(resultTotal.getBonusAmountTotal());
        rowTotal.getCell(7).setCellStyle(styleNumberBold);


        //column width
        sheet.groupColumn(1,6);
        sheet.setColumnWidth(0, 35 * 256);
        sheet.setColumnWidth(1, 35 * 256);
        sheet.setColumnWidth(2, 30 * 256);
        int a = 3;
        while (a <= 7) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.createFreezePane(1,1);
    }

    private static void createSheetBonusAmountForPreSoftCollectionBonusReport(Workbook workbook,
                                                                              PreSoftBonusReportObject preSoftBonusReportObject,
                                                                              PreSoftBackUserResult userResultTotal,
                                                                              CellStyle styleSimpleText,
                                                                              CellStyle styleTextHeaders,
                                                                              CellStyle styleNumber,
                                                                              CellStyle styleNumberBold) {
        Sheet sheet = workbook.createSheet("Bonus amount");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);
        rowHead.createCell(0).setCellValue("Employee's full name");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Employee's email");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Employee's role");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("For payments on 1 - 15 overdue days");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("For payments on 16 - 29 overdue days");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("For payments on 30 - 60 overdue days");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("For payments on 61 and more overdue days");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellValue("For resulted service calls (PTP)");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellValue("Total bonus amount");
        rowHead.getCell(8).setCellStyle(styleTextHeaders);

        rowNumber += 1;

        for (int a = 0; a < preSoftBonusReportObject.getPreSoftBackUserResultList().size(); a++) {
            Row row = sheet.createRow(rowNumber);
            row.createCell(0)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getUserFullName());
            row.getCell(0).setCellStyle(styleSimpleText);
            row.createCell(1)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getUserEmail());
            row.getCell(1).setCellStyle(styleSimpleText);
            row.createCell(2)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getUserRole());
            row.getCell(2).setCellStyle(styleSimpleText);
            row.createCell(3)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountFrom1To15DaysOverdue());
            row.getCell(3).setCellStyle(styleNumber);
            row.createCell(4)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountFrom16To29DaysOverdue());
            row.getCell(4).setCellStyle(styleNumber);
            row.createCell(5)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountFrom30To60DaysOverdue());
            row.getCell(5).setCellStyle(styleNumber);
            row.createCell(6)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountFrom61AndMoreDaysOverdue());
            row.getCell(6).setCellStyle(styleNumber);

            row.createCell(7)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountForRemindingCalls());
            row.getCell(7).setCellStyle(styleNumber);

            row.createCell(8)
                    .setCellValue(preSoftBonusReportObject.getPreSoftBackUserResultList().get(a).getBonusAmountTotal());
            row.getCell(8).setCellStyle(styleNumber);

            rowNumber += 1;
        }

        Row rowTotal = sheet.createRow(rowNumber);
        rowTotal.createCell(0).setCellValue("Total");
        rowTotal.getCell(0).setCellStyle(styleTextHeaders);
        rowTotal.createCell(1).setCellStyle(styleTextHeaders);
        rowTotal.createCell(2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber, rowNumber, 0, 2));

        rowTotal.createCell(3).setCellValue(userResultTotal.getBonusAmountFrom1To15DaysOverdue());
        rowTotal.getCell(3).setCellStyle(styleNumberBold);

        rowTotal.createCell(4).setCellValue(userResultTotal.getBonusAmountFrom16To29DaysOverdue());
        rowTotal.getCell(4).setCellStyle(styleNumberBold);

        rowTotal.createCell(5).setCellValue(userResultTotal.getBonusAmountFrom30To60DaysOverdue());
        rowTotal.getCell(5).setCellStyle(styleNumberBold);

        rowTotal.createCell(6).setCellValue(userResultTotal.getBonusAmountFrom61AndMoreDaysOverdue());
        rowTotal.getCell(6).setCellStyle(styleNumberBold);

        rowTotal.createCell(7).setCellValue(userResultTotal.getBonusAmountForRemindingCalls());
        rowTotal.getCell(7).setCellStyle(styleNumberBold);

        rowTotal.createCell(8).setCellValue(userResultTotal.getBonusAmountTotal());
        rowTotal.getCell(8).setCellStyle(styleNumberBold);



        //column width
        sheet.groupColumn(1,7);
        sheet.setColumnWidth(0, 35 * 256);
        sheet.setColumnWidth(1, 35 * 256);
        sheet.setColumnWidth(2, 30 * 256);
        int a = 3;
        while (a <= 9) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.createFreezePane(1,1);

    }

    private static void createSheetCommonInfoForStagesWithAssignedBonusReport(Workbook workbook,
                                                                              StagesWithAssignedBonusReportObject stagesWithAssignedBonusReportObject,
                                                                              CellStyle styleTitle,
                                                                              CellStyle styleDateAndTime,
                                                                              CellStyle styleDate,
                                                                              CellStyle styleSimpleText,
                                                                              CellStyle styleTextHeaders,
                                                                              CellStyle styleNumber,
                                                                              CellStyle stylePercent) {
        Sheet sheet = workbook.createSheet("Common info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row row1 = sheet.createRow(rowNumber);

        row1.createCell(0).setCellValue("Report was created at:");
        row1.getCell(0).setCellStyle(styleTitle);
        row1.createCell(1).setCellValue(stagesWithAssignedBonusReportObject.getDateWasCreated());
        row1.getCell(1).setCellStyle(styleDateAndTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("Report was created for period:");
        row2.getCell(0).setCellStyle(styleTitle);
        row2.createCell(1).setCellValue(stagesWithAssignedBonusReportObject.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(stagesWithAssignedBonusReportObject.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        rowNumber += 2;

        rowNumber += 2;

        Row row3 = sheet.createRow(rowNumber);
        row3.createCell(0).setCellValue("Plans and Bonus Rates");
        row3.getCell(0).setCellStyle(styleTextHeaders);
        row3.createCell(1).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,0,1));

        rowNumber += 1;

        Row row4 = sheet.createRow(rowNumber);
        row4.createCell(1).setCellValue("From (include)");
        row4.getCell(1).setCellStyle(styleTitle);
        row4.createCell(2).setCellValue("To (not include)");
        row4.getCell(2).setCellStyle(styleTitle);
        row4.createCell(3).setCellValue("Bonus Rate (%)");
        row4.getCell(3).setCellStyle(styleTitle);
        row4.createCell(4).setCellValue("From (include)");
        row4.getCell(4).setCellStyle(styleTitle);
        row4.createCell(5).setCellValue("To (not include)");
        row4.getCell(5).setCellStyle(styleTitle);
        row4.createCell(6).setCellValue("Bonus Rate (%)");
        row4.getCell(6).setCellStyle(styleTitle);
        row4.createCell(7).setCellValue("From (include)");
        row4.getCell(7).setCellStyle(styleTitle);
        row4.createCell(8).setCellValue("To (not include)");
        row4.getCell(8).setCellStyle(styleTitle);
        row4.createCell(9).setCellValue("Bonus Rate (%)");
        row4.getCell(9).setCellStyle(styleTitle);
        row4.createCell(10).setCellValue("From and more");
        row4.getCell(10).setCellStyle(styleTitle);
        row4.createCell(11).setCellValue("Bonus Rate (%)");
        row4.getCell(11).setCellStyle(styleTitle);

        rowNumber += 1;

        Row row5 = sheet.createRow(rowNumber);
        row5.createCell(0).setCellValue("Payments on 1 - 15 overdue days");
        row5.getCell(0).setCellStyle(styleTitle);
        row5.createCell(1).setCellValue(StagesWithAssignedBonusReportBuilder.getMinimumPlanDpd115());
        row5.getCell(1).setCellStyle(styleNumber);
        row5.createCell(2).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep1Dpd115());
        row5.getCell(2).setCellStyle(styleNumber);
        row5.createCell(3).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor115OverdueNotCompletedPlanStep1());
        row5.getCell(3).setCellStyle(stylePercent);
        row5.createCell(4).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep1Dpd115());
        row5.getCell(4).setCellStyle(styleNumber);
        row5.createCell(5).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep2Dpd115());
        row5.getCell(5).setCellStyle(styleNumber);
        row5.createCell(6).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor115OverdueNotCompletedPlanStep2());
        row5.getCell(6).setCellStyle(stylePercent);
        row5.createCell(7).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep2Dpd115());
        row5.getCell(7).setCellStyle(styleNumber);
        row5.createCell(8).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep3Dpd115());
        row5.getCell(8).setCellStyle(styleNumber);
        row5.createCell(9).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor115OverdueNotCompletedPlanStep3());
        row5.getCell(9).setCellStyle(stylePercent);
        row5.createCell(10).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep3Dpd115());
        row5.getCell(10).setCellStyle(styleNumber);
        row5.createCell(11).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor115OverdueCompletedPlan());
        row5.getCell(11).setCellStyle(stylePercent);

        rowNumber += 1;

        Row row6 = sheet.createRow(rowNumber);
        row6.createCell(0).setCellValue("Payments on 16 - 60 overdue days");
        row6.getCell(0).setCellStyle(styleTitle);
        row6.createCell(1).setCellValue(StagesWithAssignedBonusReportBuilder.getMinimumPlanDpd1624());
        row6.getCell(1).setCellStyle(styleNumber);
        row6.createCell(2).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep1Dpd1624());
        row6.getCell(2).setCellStyle(styleNumber);
        row6.createCell(3).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor1624OverdueNotCompletedPlanStep1());
        row6.getCell(3).setCellStyle(stylePercent);
        row6.createCell(4).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep1Dpd1624());
        row6.getCell(4).setCellStyle(styleNumber);
        row6.createCell(5).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep2Dpd1624());
        row6.getCell(5).setCellStyle(styleNumber);
        row6.createCell(6).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor1624OverdueNotCompletedPlanStep2());
        row6.getCell(6).setCellStyle(stylePercent);
        row6.createCell(7).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep2Dpd1624());
        row6.getCell(7).setCellStyle(styleNumber);
        row6.createCell(8).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep3Dpd1624());
        row6.getCell(8).setCellStyle(styleNumber);
        row6.createCell(9).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor1624OverdueNotCompletedPlanStep3());
        row6.getCell(9).setCellStyle(stylePercent);
        row6.createCell(10).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep3Dpd1624());
        row6.getCell(10).setCellStyle(styleNumber);
        row6.createCell(11).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor1624OverdueCompletedPlan());
        row6.getCell(11).setCellStyle(stylePercent);

        rowNumber += 1;

        Row row7 = sheet.createRow(rowNumber);
        row7.createCell(0).setCellValue("Payments on ... - ... overdue days");
        row7.getCell(0).setCellStyle(styleTitle);
        row7.createCell(1).setCellValue(StagesWithAssignedBonusReportBuilder.getMinimumPlanDpd2560());
        row7.getCell(1).setCellStyle(styleNumber);
        row7.createCell(2).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep1Dpd2560());
        row7.getCell(2).setCellStyle(styleNumber);
        row7.createCell(3).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor2560OverdueNotCompletedPlanStep1());
        row7.getCell(3).setCellStyle(stylePercent);
        row7.createCell(4).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep1Dpd2560());
        row7.getCell(4).setCellStyle(styleNumber);
        row7.createCell(5).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep2Dpd2560());
        row7.getCell(5).setCellStyle(styleNumber);
        row7.createCell(6).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor2560OverdueNotCompletedPlanStep2());
        row7.getCell(6).setCellStyle(stylePercent);
        row7.createCell(7).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep2Dpd2560());
        row7.getCell(7).setCellStyle(styleNumber);
        row7.createCell(8).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep3Dpd2560());
        row7.getCell(8).setCellStyle(styleNumber);
        row7.createCell(9).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor2560OverdueNotCompletedPlanStep3());
        row7.getCell(9).setCellStyle(stylePercent);
        row7.createCell(10).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep3Dpd2560());
        row7.getCell(10).setCellStyle(styleNumber);
        row7.createCell(11).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor2560OverdueCompletedPlan());
        row7.getCell(11).setCellStyle(stylePercent);

        rowNumber += 1;

        Row row8 = sheet.createRow(rowNumber);
        row8.createCell(0).setCellValue("Payments on 61 and more overdue days");
        row8.getCell(0).setCellStyle(styleTitle);
        row8.createCell(1).setCellValue(StagesWithAssignedBonusReportBuilder.getMinimumPlanDpd61AndMore());
        row8.getCell(1).setCellStyle(styleNumber);
        row8.createCell(2).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep1Dpd61AndMore());
        row8.getCell(2).setCellStyle(styleNumber);
        row8.createCell(3).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor61AndMoreOverdueNotCompletedPlanStep1());
        row8.getCell(3).setCellStyle(stylePercent);
        row8.createCell(4).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep1Dpd61AndMore());
        row8.getCell(4).setCellStyle(styleNumber);
        row8.createCell(5).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep2Dpd61AndMore());
        row8.getCell(5).setCellStyle(styleNumber);
        row8.createCell(6).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor61AndMoreOverdueNotCompletedPlanStep2());
        row8.getCell(6).setCellStyle(stylePercent);
        row8.createCell(7).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep2Dpd61AndMore());
        row8.getCell(7).setCellStyle(styleNumber);
        row8.createCell(8).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep3Dpd61AndMore());
        row8.getCell(8).setCellStyle(styleNumber);
        row8.createCell(9).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor61AndMoreOverdueNotCompletedPlanStep3());
        row8.getCell(9).setCellStyle(stylePercent);
        row8.createCell(10).setCellValue(StagesWithAssignedBonusReportBuilder.getPlanAmountStep3Dpd61AndMore());
        row8.getCell(10).setCellStyle(styleNumber);
        row8.createCell(11).setCellValue(StagesWithAssignedBonusReportBuilder.getBonusPercentFor61AndMoreOverdueCompletedPlan());
        row8.getCell(11).setCellStyle(stylePercent);

        //column width
        sheet.setColumnWidth(0, 66 * 256);
        int a = 1;
        while (a <= 11) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.createFreezePane(1,0);

    }

    private static void createSheetCommonInfoIfReportHaveOnlyDateFromAndDateTo(Workbook workbook,
                                                                               LocalDateTime createdAt,
                                                                               LocalDate dateFrom,
                                                                               LocalDate dateTo,
                                                                               CellStyle styleTitle,
                                                                               CellStyle styleDateAndTime,
                                                                               CellStyle styleDate,
                                                                               CellStyle styleSimpleText) {
        Sheet sheet = workbook.createSheet("Common info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at:");
        row1.getCell(0).setCellStyle(styleTitle);
        row1.createCell(1).setCellValue(createdAt);
        row1.getCell(1).setCellStyle(styleDateAndTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("Report was created for period:");
        row2.getCell(0).setCellStyle(styleTitle);
        row2.createCell(1).setCellValue(dateFrom);
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(dateTo);
        row2.getCell(3).setCellStyle(styleDate);

        //column width
        sheet.setColumnWidth(0, 66 * 256);
        int a = 1;
        while (a <= 3) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        //sheet.createFreezePane(1,0);
    }

    private static void createSheetCommonInfoForExportPaymentsWithFeesReport(Workbook workbook,
                                                                             ExportPaymentsWithPaidFeesReportObject exportPaymentsWithPaidFeesReportObject,
                                                                             CellStyle styleTitle,
                                                                             CellStyle styleDateAndTime,
                                                                             CellStyle styleDate,
                                                                             CellStyle styleSimpleText) {
        Sheet sheet = workbook.createSheet("Common info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row row1 = sheet.createRow(rowNumber);
        row1.createCell(0).setCellValue("Report was created at:");
        row1.getCell(0).setCellStyle(styleTitle);
        row1.createCell(1).setCellValue(exportPaymentsWithPaidFeesReportObject.getDateWasCreated());
        row1.getCell(1).setCellStyle(styleDateAndTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("Report was created for period:");
        row2.getCell(0).setCellStyle(styleTitle);
        row2.createCell(1).setCellValue(exportPaymentsWithPaidFeesReportObject.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(exportPaymentsWithPaidFeesReportObject.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        //column width
        sheet.setColumnWidth(0, 66 * 256);
        int a = 1;
        while (a <= 3) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        //sheet.createFreezePane(1,0);
    }

    private static void createSheetCommonInfoForPreSoftCollectionBonusReport(Workbook workbook,
                                                                             PreSoftBonusReportObject preSoftBonusReportObject,
                                                                             CellStyle styleTitle,
                                                                             CellStyle styleDateAndTime,
                                                                             CellStyle styleDate,
                                                                             CellStyle styleSimpleText,
                                                                             CellStyle styleTextHeaders,
                                                                             CellStyle styleNumber,
                                                                             CellStyle stylePercent) {
        Sheet sheet = workbook.createSheet("Common info");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row row1 = sheet.createRow(rowNumber);

        row1.createCell(0).setCellValue("Report was created at:");
        row1.getCell(0).setCellStyle(styleTitle);
        row1.createCell(1).setCellValue(preSoftBonusReportObject.getDateWasCreated());
        row1.getCell(1).setCellStyle(styleDateAndTime);

        rowNumber += 2;

        Row row2 = sheet.createRow(rowNumber);

        row2.createCell(0).setCellValue("Report was created for period:");
        row2.getCell(0).setCellStyle(styleTitle);
        row2.createCell(1).setCellValue(preSoftBonusReportObject.getDateFrom());
        row2.getCell(1).setCellStyle(styleDate);
        row2.createCell(2).setCellValue("-");
        row2.getCell(2).setCellStyle(styleSimpleText);
        row2.createCell(3).setCellValue(preSoftBonusReportObject.getDateTo());
        row2.getCell(3).setCellStyle(styleDate);

        rowNumber += 2;

        Row row3 = sheet.createRow(rowNumber);

        row3.createCell(0).setCellValue("Current setting for creating bonus for PreSoft Collection");
        row3.getCell(0).setCellStyle(styleTextHeaders);
        row3.createCell(1).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,0,1));

        rowNumber += 1;

        Row row4 = sheet.createRow(rowNumber);

        row4.createCell(0).setCellValue("Minimum needed talk time (seconds):");
        row4.getCell(0).setCellStyle(styleTitle);
        row4.createCell(1).setCellValue(PreSoftBonusReportBuilder.getMinNeededTalkSec());
        row4.getCell(1).setCellStyle(styleNumber);

        rowNumber += 1;

        Row row5 = sheet.createRow(rowNumber);

        row5.createCell(0).setCellValue("Maximum days after call for result:");
        row5.getCell(0).setCellStyle(styleTitle);
        row5.createCell(1).setCellValue(PreSoftBonusReportBuilder.getCountDaysForResult());
        row5.getCell(1).setCellStyle(styleNumber);

        rowNumber += 1;

        Row row6 = sheet.createRow(rowNumber);

        row6.createCell(0).setCellValue("Resulting statuses:");
        row6.getCell(0).setCellStyle(styleTitle);

        for (int a = 0; a < PreSoftBonusReportBuilder.getResultStatuses().length; a++) {
            row6.createCell(a + 1).setCellValue(PreSoftBonusReportBuilder.getResultStatuses()[a]);
            row6.getCell(a + 1).setCellStyle(styleSimpleText);
        }

        rowNumber += 2;

        Row row7 = sheet.createRow(rowNumber);
        row7.createCell(0).setCellValue("Plans and Bonus Rates");
        row7.getCell(0).setCellStyle(styleTextHeaders);
        row7.createCell(1).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,0,1));

        rowNumber += 1;

        Row row8 = sheet.createRow(rowNumber);
        row8.createCell(1).setCellValue("From (include)");
        row8.getCell(1).setCellStyle(styleTitle);
        row8.createCell(2).setCellValue("To (not include)");
        row8.getCell(2).setCellStyle(styleTitle);
        row8.createCell(3).setCellValue("Not assigned. Bonus Rate (%)");
        row8.getCell(3).setCellStyle(styleTitle);
        row8.createCell(4).setCellValue("Assigned. Bonus Rate (%)");
        row8.getCell(4).setCellStyle(styleTitle);
        row8.createCell(5).setCellValue("From (include)");
        row8.getCell(5).setCellStyle(styleTitle);
        row8.createCell(6).setCellValue("To (not include)");
        row8.getCell(6).setCellStyle(styleTitle);
        row8.createCell(7).setCellValue("Not assigned. Bonus Rate (%)");
        row8.getCell(7).setCellStyle(styleTitle);
        row8.createCell(8).setCellValue("Assigned. Bonus Rate (%)");
        row8.getCell(8).setCellStyle(styleTitle);
        row8.createCell(9).setCellValue("From (include)");
        row8.getCell(9).setCellStyle(styleTitle);
        row8.createCell(10).setCellValue("To (not include)");
        row8.getCell(10).setCellStyle(styleTitle);
        row8.createCell(11).setCellValue("Not assigned. Bonus Rate (%)");
        row8.getCell(11).setCellStyle(styleTitle);
        row8.createCell(12).setCellValue("Assigned. Bonus Rate (%)");
        row8.getCell(12).setCellStyle(styleTitle);
        row8.createCell(13).setCellValue("From and more");
        row8.getCell(13).setCellStyle(styleTitle);
        row8.createCell(14).setCellValue("Not assigned. Bonus Rate (%)");
        row8.getCell(14).setCellStyle(styleTitle);
        row8.createCell(15).setCellValue("Assigned. Bonus Rate (%)");
        row8.getCell(15).setCellStyle(styleTitle);

        rowNumber += 1;

        Row row9 = sheet.createRow(rowNumber);
        row9.createCell(0).setCellValue("Payments on 1 - 15 overdue days");
        row9.getCell(0).setCellStyle(styleTitle);
        row9.createCell(1).setCellValue(PreSoftBonusReportBuilder.getMinimumPlan());
        row9.getCell(1).setCellStyle(styleNumber);
        row9.createCell(2).setCellValue(PreSoftBonusReportBuilder.getPlanAmountStep1());
        row9.getCell(2).setCellStyle(styleNumber);
        row9.createCell(3).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor115OverdueNotAssignedNotCompletedPlanStep1());
        row9.getCell(3).setCellStyle(stylePercent);
        row9.createCell(4).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor115OverdueAssignedNotCompletedPlanStep1());
        row9.getCell(4).setCellStyle(stylePercent);
        row9.createCell(5).setCellValue(PreSoftBonusReportBuilder.getPlanAmountStep1());
        row9.getCell(5).setCellStyle(styleNumber);
        row9.createCell(6).setCellValue(PreSoftBonusReportBuilder.getPlanAmountStep2());
        row9.getCell(6).setCellStyle(styleNumber);
        row9.createCell(7).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor115OverdueNotAssignedNotCompletedPlanStep2());
        row9.getCell(7).setCellStyle(stylePercent);
        row9.createCell(8).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor115OverdueAssignedNotCompletedPlanStep2());
        row9.getCell(8).setCellStyle(stylePercent);
        row9.createCell(9).setCellValue(PreSoftBonusReportBuilder.getPlanAmountStep2());
        row9.getCell(9).setCellStyle(styleNumber);
        row9.createCell(10).setCellValue(PreSoftBonusReportBuilder.getPlanAmountStep3());
        row9.getCell(10).setCellStyle(styleNumber);
        row9.createCell(11).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor115OverdueNotAssignedNotCompletedPlanStep3());
        row9.getCell(11).setCellStyle(stylePercent);
        row9.createCell(12).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor115OverdueAssignedNotCompletedPlanStep3());
        row9.getCell(12).setCellStyle(stylePercent);
        row9.createCell(13).setCellValue(PreSoftBonusReportBuilder.getPlanAmountStep3());
        row9.getCell(13).setCellStyle(styleNumber);
        row9.createCell(14).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor115OverdueNotAssignedCompletedPlan());
        row9.getCell(14).setCellStyle(stylePercent);
        row9.createCell(15).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor115OverdueAssignedCompletedPlan());
        row9.getCell(15).setCellStyle(stylePercent);


        rowNumber += 1;

        Row row10 = sheet.createRow(rowNumber);
        row10.createCell(0).setCellValue("Payments on 16 - 29 overdue days");
        row10.getCell(0).setCellStyle(styleTitle);
        row10.createCell(1).setCellStyle(styleNumber);
        row10.createCell(2).setCellStyle(styleNumber);
        row10.createCell(3).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor1629OverdueNotAssignedNotCompletedPlanStep1());
        row10.getCell(3).setCellStyle(stylePercent);
        row10.createCell(4).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor1629OverdueAssignedNotCompletedPlanStep1());
        row10.getCell(4).setCellStyle(stylePercent);
        row10.createCell(5).setCellStyle(styleNumber);
        row10.createCell(6).setCellStyle(styleNumber);
        row10.createCell(7).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor1629OverdueNotAssignedNotCompletedPlanStep2());
        row10.getCell(7).setCellStyle(stylePercent);
        row10.createCell(8).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor1629OverdueAssignedNotCompletedPlanStep2());
        row10.getCell(8).setCellStyle(stylePercent);
        row10.createCell(9).setCellStyle(styleNumber);
        row10.createCell(10).setCellStyle(styleNumber);
        row10.createCell(11).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor1629OverdueNotAssignedNotCompletedPlanStep3());
        row10.getCell(11).setCellStyle(stylePercent);
        row10.createCell(12).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor1629OverdueAssignedNotCompletedPlanStep3());
        row10.getCell(12).setCellStyle(stylePercent);
        row10.createCell(13).setCellStyle(styleNumber);
        row10.createCell(14).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor1629OverdueNotAssignedCompletedPlan());
        row10.getCell(14).setCellStyle(stylePercent);
        row10.createCell(15).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor1629OverdueAssignedCompletedPlan());
        row10.getCell(15).setCellStyle(stylePercent);

        rowNumber += 1;

        Row row11 = sheet.createRow(rowNumber);
        row11.createCell(0).setCellValue("Payments on 30 - 60 overdue days");
        row11.getCell(0).setCellStyle(styleTitle);
        row11.createCell(1).setCellStyle(styleNumber);
        row11.createCell(2).setCellStyle(styleNumber);
        row11.createCell(3).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor3060OverdueNotAssignedNotCompletedPlanStep1());
        row11.getCell(3).setCellStyle(stylePercent);
        row11.createCell(4).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor3060OverdueAssignedNotCompletedPlanStep1());
        row11.getCell(4).setCellStyle(stylePercent);
        row11.createCell(5).setCellStyle(styleNumber);
        row11.createCell(6).setCellStyle(styleNumber);
        row11.createCell(7).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor3060OverdueNotAssignedNotCompletedPlanStep2());
        row11.getCell(7).setCellStyle(stylePercent);
        row11.createCell(8).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor3060OverdueAssignedNotCompletedPlanStep2());
        row11.getCell(8).setCellStyle(stylePercent);
        row11.createCell(9).setCellStyle(styleNumber);
        row11.createCell(10).setCellStyle(styleNumber);
        row11.createCell(11).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor3060OverdueNotAssignedNotCompletedPlanStep3());
        row11.getCell(11).setCellStyle(stylePercent);
        row11.createCell(12).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor3060OverdueAssignedNotCompletedPlanStep3());
        row11.getCell(12).setCellStyle(stylePercent);
        row11.createCell(13).setCellStyle(styleNumber);
        row11.createCell(14).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor3060OverdueNotAssignedCompletedPlan());
        row11.getCell(14).setCellStyle(stylePercent);
        row11.createCell(15).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor3060OverdueAssignedCompletedPlan());
        row11.getCell(15).setCellStyle(stylePercent);

        rowNumber += 1;

        Row row12 = sheet.createRow(rowNumber);
        row12.createCell(0).setCellValue("Payments on 61 and more overdue days");
        row12.getCell(0).setCellStyle(styleTitle);
        row12.createCell(1).setCellStyle(styleNumber);
        row12.createCell(2).setCellStyle(styleNumber);
        row12.createCell(3).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor61AndMoreOverdueNotAssignedNotCompletedPlanStep1());
        row12.getCell(3).setCellStyle(stylePercent);
        row12.createCell(4).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor61AndMoreOverdueAssignedNotCompletedPlanStep1());
        row12.getCell(4).setCellStyle(stylePercent);
        row12.createCell(5).setCellStyle(styleNumber);
        row12.createCell(6).setCellStyle(styleNumber);
        row12.createCell(7).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor61AndMoreOverdueNotAssignedNotCompletedPlanStep2());
        row12.getCell(7).setCellStyle(stylePercent);
        row12.createCell(8).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor61AndMoreOverdueAssignedNotCompletedPlanStep2());
        row12.getCell(8).setCellStyle(stylePercent);
        row12.createCell(9).setCellStyle(styleNumber);
        row12.createCell(10).setCellStyle(styleNumber);
        row12.createCell(11).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor61AndMoreOverdueNotAssignedNotCompletedPlanStep3());
        row12.getCell(11).setCellStyle(stylePercent);
        row12.createCell(12).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor61AndMoreOverdueAssignedNotCompletedPlanStep3());
        row12.getCell(12).setCellStyle(stylePercent);
        row12.createCell(13).setCellStyle(styleNumber);
        row12.createCell(14).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor61AndMoreOverdueNotAssignedCompletedPlan());
        row12.getCell(14).setCellStyle(stylePercent);
        row12.createCell(15).setCellValue(PreSoftBonusReportBuilder.getBonusPercentFor61AndMoreOverdueAssignedCompletedPlan());
        row12.getCell(15).setCellStyle(stylePercent);

        sheet.addMergedRegion(new CellRangeAddress(rowNumber - 3,rowNumber,1,1));
        sheet.addMergedRegion(new CellRangeAddress(rowNumber - 3,rowNumber,2,2));
        sheet.addMergedRegion(new CellRangeAddress(rowNumber - 3,rowNumber,5,5));
        sheet.addMergedRegion(new CellRangeAddress(rowNumber - 3,rowNumber,6,6));
        sheet.addMergedRegion(new CellRangeAddress(rowNumber - 3,rowNumber,9,9));
        sheet.addMergedRegion(new CellRangeAddress(rowNumber - 3,rowNumber,10,10));
        sheet.addMergedRegion(new CellRangeAddress(rowNumber - 3,rowNumber,13,13));


        rowNumber += 2;

        Row rowFinish = sheet.createRow(rowNumber);
        rowFinish.createCell(0).setCellValue("Bonus amount for each resulted call in list of Reminding PTP:");
        rowFinish.getCell(0).setCellStyle(styleTitle);
        rowFinish.createCell(1).setCellValue(PreSoftBonusReportBuilder.getBonusAmountForResultedCallInRemindingPtp());
        rowFinish.getCell(1).setCellStyle(styleNumber);

        //column width
        sheet.setColumnWidth(0, 66 * 256);
        int a = 1;
        while (a <= 16) {
            sheet.setColumnWidth(a, 21 * 256);
            a++;
        }
        sheet.createFreezePane(1,0);

    }

    private static void createSheetForCommonDataWithAssignedCollectorReport(Workbook workbook,
                                                                            CommonDataAssignedCollectorReportObject commonDataAssignedCollectorReportObject,
                                                                            CellStyle styleTextHeaders,
                                                                            CellStyle styleNumber,
                                                                            CellStyle styleSimpleText,
                                                                            CellStyle styleDate) {
        Sheet sheet = workbook.createSheet("Main data");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHead = sheet.createRow(rowNumber);

        rowHead.createCell(0).setCellValue("Document. Card ID");
        rowHead.getCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Client's name");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellValue("Debt Id");
        rowHead.getCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellValue("Application Id");
        rowHead.getCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellValue("Collector");
        rowHead.getCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellValue("Payment amount");
        rowHead.getCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellValue("Current debt");
        rowHead.getCell(6).setCellStyle(styleTextHeaders);
        rowHead.createCell(7).setCellValue("Days overdue");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellValue("Date of last activity");
        rowHead.getCell(8).setCellStyle(styleTextHeaders);
        rowHead.createCell(9).setCellValue("Activity (EN)");
        rowHead.getCell(9).setCellStyle(styleTextHeaders);
        rowHead.createCell(10).setCellValue("Result of activity (EN)");
        rowHead.getCell(10).setCellStyle(styleTextHeaders);
        rowHead.createCell(11).setCellValue("Activity (VN)");
        rowHead.getCell(11).setCellStyle(styleTextHeaders);
        rowHead.createCell(12).setCellValue("Result of activity (VN)");
        rowHead.getCell(12).setCellStyle(styleTextHeaders);
        rowHead.createCell(13).setCellValue("Last comment");
        rowHead.getCell(13).setCellStyle(styleTextHeaders);
        rowHead.createCell(14).setCellValue("Last promised date for payment");
        rowHead.getCell(14).setCellStyle(styleTextHeaders);
        rowHead.createCell(15).setCellValue("Status");
        rowHead.getCell(15).setCellStyle(styleTextHeaders);
        rowHead.createCell(16).setCellValue("Stage");
        rowHead.getCell(16).setCellStyle(styleTextHeaders);

        rowNumber += 1;

        for (int a = 0; a < commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList().size(); a++) {
            Row newRow = sheet.createRow(rowNumber);
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getDocumentIdNumber() != null) {
                newRow.createCell(0)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getDocumentIdNumber());
                newRow.getCell(0).setCellStyle(styleSimpleText);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getFirstName() != null) {
                newRow.createCell(1)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getFirstName());
                newRow.getCell(1).setCellStyle(styleSimpleText);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getDebtId() != null) {
                newRow.createCell(2)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getDebtId());
                newRow.getCell(2).setCellStyle(styleNumber);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getApplicationId() != null) {
                newRow.createCell(3)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getApplicationId());
                newRow.getCell(3).setCellStyle(styleNumber);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getCollectorAccountInfo() != null) {
                newRow.createCell(4)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getCollectorAccountInfo());
                newRow.getCell(4).setCellStyle(styleSimpleText);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getPaymentAmount() != null) {
                newRow.createCell(5)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getPaymentAmount());
                newRow.getCell(5).setCellStyle(styleNumber);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getCurrentDebt() != null) {
                newRow.createCell(6)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getCurrentDebt());
                newRow.getCell(6).setCellStyle(styleNumber);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getDaysOverdue() != null) {
                newRow.createCell(7)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getDaysOverdue());
                newRow.getCell(7).setCellStyle(styleNumber);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getLastActivityDate() != null) {
                newRow.createCell(8)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getLastActivityDate());
                newRow.getCell(8).setCellStyle(styleDate);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getActivityEn() != null) {
                newRow.createCell(9)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getActivityEn());
                newRow.getCell(9).setCellStyle(styleSimpleText);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getActivityResultEn() != null) {
                newRow.createCell(10)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getActivityResultEn());
                newRow.getCell(10).setCellStyle(styleSimpleText);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getActivityVn() != null) {
                newRow.createCell(11)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getActivityVn());
                newRow.getCell(11).setCellStyle(styleSimpleText);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getActivityResultVn() != null) {
                newRow.createCell(12)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getActivityResultVn());
                newRow.getCell(12).setCellStyle(styleSimpleText);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getLastComment() != null) {
                newRow.createCell(13)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getLastComment());
                newRow.getCell(13).setCellStyle(styleSimpleText);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getLastPromisedPaymentDate() != null) {
                newRow.createCell(14)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getLastPromisedPaymentDate());
                newRow.getCell(14).setCellStyle(styleDate);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getStatus() != null) {
                newRow.createCell(15)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getStatus());
                newRow.getCell(15).setCellStyle(styleSimpleText);
            }
            if (commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                    .get(a).getStage() != null) {
                newRow.createCell(16)
                        .setCellValue(commonDataAssignedCollectorReportObject.getCommonDataWithAssignedCollectorReportList()
                                .get(a).getStage());
                newRow.getCell(16).setCellStyle(styleSimpleText);
            }
            rowNumber++;
        }

        sheet.setColumnWidth(0, 17 * 256);
        sheet.setColumnWidth(1, 25 * 256);
        sheet.setColumnWidth(2, 15 * 256);
        sheet.setColumnWidth(3, 15 * 256);
        sheet.setColumnWidth(4, 25 * 256);
        sheet.setColumnWidth(5, 17 * 256);
        sheet.setColumnWidth(6, 17 * 256);
        sheet.setColumnWidth(7, 14 * 256);
        sheet.setColumnWidth(8, 17 * 256);
        sheet.setColumnWidth(9, 40 * 256);
        sheet.setColumnWidth(10, 45 * 256);
        sheet.setColumnWidth(11, 40 * 256);
        sheet.setColumnWidth(12, 45 * 256);
        sheet.setColumnWidth(13, 50 * 256);
        sheet.setColumnWidth(14, 17 * 256);
        sheet.setColumnWidth(15, 17 * 256);
        sheet.setColumnWidth(16, 10 * 256);


        sheet.createFreezePane(0,1);


    }

    private static void createSheetMain(Workbook workbook, MainDailyReportObject mainDailyReportObject,
                                        CellStyle styleTitle, CellStyle styleTextHeaders, CellStyle styleDateBold,
                                        CellStyle styleDateAndTime, CellStyle styleMonth, CellStyle styleNumber,
                                        CellStyle styleNumberBold, CellStyle stylePercent, CellStyle stylePercentBold) {
        Sheet sheet = workbook.createSheet("Основной");
        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowMainHead = sheet.createRow(rowNumber);

        rowMainHead.createCell(1).setCellValue("Факт на момент создания отчета");
        rowMainHead.getCell(1).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(2).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(3).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(4).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(5).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(6).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(7).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(8).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(9).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(10).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(11).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(12).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(13).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(14).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(15).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(16).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(17).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(18).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,1,18));

        rowMainHead.createCell(19).setCellValue("Прогноз");
        rowMainHead.getCell(19).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(20).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(21).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(22).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(23).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(24).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(25).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(26).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(27).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(28).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(29).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(30).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(31).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(32).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(33).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(34).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(35).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(36).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(37).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(38).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(39).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(40).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(41).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(42).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(43).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(44).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(45).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(46).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(47).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(48).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(49).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(50).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(51).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(52).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(53).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(54).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(55).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(56).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(57).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(58).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(59).setCellStyle(styleTextHeaders);
        rowMainHead.createCell(60).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,19,60));



        rowMainHead.createCell(0).setCellValue("Месяц");
        rowMainHead.getCell(0).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 3,0,0));



        rowNumber += 1;
        Row rowHead = sheet.createRow(rowNumber);
        rowHead.createCell(0).setCellStyle(styleTextHeaders);
        rowHead.createCell(1).setCellValue("Новый клиент");
        rowHead.getCell(1).setCellStyle(styleTextHeaders);
        rowHead.createCell(2).setCellStyle(styleTextHeaders);
        rowHead.createCell(3).setCellStyle(styleTextHeaders);
        rowHead.createCell(4).setCellStyle(styleTextHeaders);
        rowHead.createCell(5).setCellStyle(styleTextHeaders);
        rowHead.createCell(6).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,1,6));
        rowHead.createCell(7).setCellValue("Повторный клиент");
        rowHead.getCell(7).setCellStyle(styleTextHeaders);
        rowHead.createCell(8).setCellStyle(styleTextHeaders);
        rowHead.createCell(9).setCellStyle(styleTextHeaders);
        rowHead.createCell(10).setCellStyle(styleTextHeaders);
        rowHead.createCell(11).setCellStyle(styleTextHeaders);
        rowHead.createCell(12).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,7,12));
        rowHead.createCell(13).setCellValue("Всего");
        rowHead.getCell(13).setCellStyle(styleTextHeaders);
        rowHead.createCell(14).setCellStyle(styleTextHeaders);
        rowHead.createCell(15).setCellStyle(styleTextHeaders);
        rowHead.createCell(16).setCellStyle(styleTextHeaders);
        rowHead.createCell(17).setCellStyle(styleTextHeaders);
        rowHead.createCell(18).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,13,18));

        rowHead.createCell(19).setCellValue("Новый клиент");
        rowHead.getCell(19).setCellStyle(styleTextHeaders);
        rowHead.createCell(20).setCellStyle(styleTextHeaders);
        rowHead.createCell(21).setCellStyle(styleTextHeaders);
        rowHead.createCell(22).setCellStyle(styleTextHeaders);
        rowHead.createCell(23).setCellStyle(styleTextHeaders);
        rowHead.createCell(24).setCellStyle(styleTextHeaders);
        rowHead.createCell(25).setCellStyle(styleTextHeaders);
        rowHead.createCell(26).setCellStyle(styleTextHeaders);
        rowHead.createCell(27).setCellStyle(styleTextHeaders);
        rowHead.createCell(28).setCellStyle(styleTextHeaders);
        rowHead.createCell(29).setCellStyle(styleTextHeaders);
        rowHead.createCell(30).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,19,30));

        rowHead.createCell(31).setCellValue("Повторный клиент");
        rowHead.getCell(31).setCellStyle(styleTextHeaders);
        rowHead.createCell(32).setCellStyle(styleTextHeaders);
        rowHead.createCell(33).setCellStyle(styleTextHeaders);
        rowHead.createCell(34).setCellStyle(styleTextHeaders);
        rowHead.createCell(35).setCellStyle(styleTextHeaders);
        rowHead.createCell(36).setCellStyle(styleTextHeaders);
        rowHead.createCell(37).setCellStyle(styleTextHeaders);
        rowHead.createCell(38).setCellStyle(styleTextHeaders);
        rowHead.createCell(39).setCellStyle(styleTextHeaders);
        rowHead.createCell(40).setCellStyle(styleTextHeaders);
        rowHead.createCell(41).setCellStyle(styleTextHeaders);
        rowHead.createCell(42).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,31,42));

        rowHead.createCell(43).setCellValue("Всего");
        rowHead.getCell(43).setCellStyle(styleTextHeaders);
        rowHead.createCell(44).setCellStyle(styleTextHeaders);
        rowHead.createCell(45).setCellStyle(styleTextHeaders);
        rowHead.createCell(46).setCellStyle(styleTextHeaders);
        rowHead.createCell(47).setCellStyle(styleTextHeaders);
        rowHead.createCell(48).setCellStyle(styleTextHeaders);
        rowHead.createCell(49).setCellStyle(styleTextHeaders);
        rowHead.createCell(50).setCellStyle(styleTextHeaders);
        rowHead.createCell(51).setCellStyle(styleTextHeaders);
        rowHead.createCell(52).setCellStyle(styleTextHeaders);
        rowHead.createCell(53).setCellStyle(styleTextHeaders);
        rowHead.createCell(54).setCellStyle(styleTextHeaders);
        rowHead.createCell(55).setCellStyle(styleTextHeaders);
        rowHead.createCell(56).setCellStyle(styleTextHeaders);
        rowHead.createCell(57).setCellStyle(styleTextHeaders);
        rowHead.createCell(58).setCellStyle(styleTextHeaders);
        rowHead.createCell(59).setCellStyle(styleTextHeaders);
        rowHead.createCell(60).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,43,60));

        rowNumber += 1;

        Row rowUnderHead = sheet.createRow(rowNumber);
        rowUnderHead.createCell(0).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(1).setCellValue("Выдачи");
        rowUnderHead.getCell(1).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,1,1));
        rowUnderHead.createCell(2).setCellValue("Пролонгации");
        rowUnderHead.getCell(2).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,2,2));
        rowUnderHead.createCell(3).setCellValue("Общий объем договоров");
        rowUnderHead.getCell(3).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,3,3));
        rowUnderHead.createCell(4).setCellValue("Погашено тело");
        rowUnderHead.getCell(4).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,4,4));
        rowUnderHead.createCell(5).setCellValue("Доход");
        rowUnderHead.getCell(5).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,5,5));
        rowUnderHead.createCell(6).setCellValue("Общая сумма оплат");
        rowUnderHead.getCell(6).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,6,6));
        rowUnderHead.createCell(7).setCellValue("Выдачи");
        rowUnderHead.getCell(7).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,7,7));
        rowUnderHead.createCell(8).setCellValue("Пролонгации");
        rowUnderHead.getCell(8).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,8,8));
        rowUnderHead.createCell(9).setCellValue("Общий объем договоров");
        rowUnderHead.getCell(9).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,9,9));
        rowUnderHead.createCell(10).setCellValue("Погашено тело");
        rowUnderHead.getCell(10).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,10,10));
        rowUnderHead.createCell(11).setCellValue("Доход");
        rowUnderHead.getCell(11).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,11,11));
        rowUnderHead.createCell(12).setCellValue("Общая сумма оплат");
        rowUnderHead.getCell(12).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,12,12));
        rowUnderHead.createCell(13).setCellValue("Выдачи");
        rowUnderHead.getCell(13).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,13,13));
        rowUnderHead.createCell(14).setCellValue("Пролонгации");
        rowUnderHead.getCell(14).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,14,14));
        rowUnderHead.createCell(15).setCellValue("Общий объем договоров");
        rowUnderHead.getCell(15).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,15,15));
        rowUnderHead.createCell(16).setCellValue("Погашено тело");
        rowUnderHead.getCell(16).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,16,16));
        rowUnderHead.createCell(17).setCellValue("Доход");
        rowUnderHead.getCell(17).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,17,17));
        rowUnderHead.createCell(18).setCellValue("Общая сумма оплат");
        rowUnderHead.getCell(18).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber + 1,18,18));

        rowUnderHead.createCell(19).setCellValue("Выдачи");
        rowUnderHead.getCell(19).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(20).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(21).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,19,21));
        rowUnderHead.createCell(22).setCellValue("Погашено тело");
        rowUnderHead.getCell(22).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(23).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(24).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,22,24));
        rowUnderHead.createCell(25).setCellValue("Доход");
        rowUnderHead.getCell(25).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(26).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(27).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,25,27));
        rowUnderHead.createCell(28).setCellValue("Общая сумма оплат");
        rowUnderHead.getCell(28).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(29).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(30).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,28,30));

        rowUnderHead.createCell(31).setCellValue("Выдачи");
        rowUnderHead.getCell(31).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(32).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(33).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,31,33));
        rowUnderHead.createCell(34).setCellValue("Погашено тело");
        rowUnderHead.getCell(34).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(35).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(36).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,34,36));
        rowUnderHead.createCell(37).setCellValue("Доход");
        rowUnderHead.getCell(37).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(38).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(39).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,37,39));
        rowUnderHead.createCell(40).setCellValue("Общая сумма оплат");
        rowUnderHead.getCell(40).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(41).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(42).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,40,42));

        rowUnderHead.createCell(43).setCellValue("Выдачи");
        rowUnderHead.getCell(43).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(44).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(45).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,43,45));

        rowUnderHead.createCell(46).setCellValue("Пролонгации");
        rowUnderHead.getCell(46).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(47).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(48).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,46,48));

        rowUnderHead.createCell(49).setCellValue("Общий объем договоров");
        rowUnderHead.getCell(49).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(50).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(51).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,49,51));

        rowUnderHead.createCell(52).setCellValue("Погашено тело");
        rowUnderHead.getCell(52).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(53).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(54).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,52,54));
        rowUnderHead.createCell(55).setCellValue("Доход");
        rowUnderHead.getCell(55).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(56).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(57).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,55,57));
        rowUnderHead.createCell(58).setCellValue("Общая сумма оплат");
        rowUnderHead.getCell(58).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(59).setCellStyle(styleTextHeaders);
        rowUnderHead.createCell(60).setCellStyle(styleTextHeaders);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,58,60));

        rowNumber += 1;
        Row rowUnderUnderHead = sheet.createRow(rowNumber);
        rowUnderUnderHead.createCell(0).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(1).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(2).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(3).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(4).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(5).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(6).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(7).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(8).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(9).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(10).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(11).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(12).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(13).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(14).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(15).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(16).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(17).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(18).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(19).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(19).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(20).setCellValue("План");
        rowUnderUnderHead.getCell(20).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(21).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(21).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(22).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(22).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(23).setCellValue("План");
        rowUnderUnderHead.getCell(23).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(24).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(24).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(25).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(25).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(26).setCellValue("План");
        rowUnderUnderHead.getCell(26).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(27).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(27).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(28).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(28).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(29).setCellValue("План");
        rowUnderUnderHead.getCell(29).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(30).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(30).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(31).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(31).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(32).setCellValue("План");
        rowUnderUnderHead.getCell(32).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(33).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(33).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(34).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(34).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(35).setCellValue("План");
        rowUnderUnderHead.getCell(35).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(36).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(36).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(37).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(37).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(38).setCellValue("План");
        rowUnderUnderHead.getCell(38).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(39).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(39).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(40).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(40).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(41).setCellValue("План");
        rowUnderUnderHead.getCell(41).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(42).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(42).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(43).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(43).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(44).setCellValue("План");
        rowUnderUnderHead.getCell(44).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(45).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(45).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(46).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(46).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(47).setCellValue("План");
        rowUnderUnderHead.getCell(47).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(48).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(48).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(49).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(49).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(50).setCellValue("План");
        rowUnderUnderHead.getCell(50).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(51).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(51).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(52).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(52).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(53).setCellValue("План");
        rowUnderUnderHead.getCell(53).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(54).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(54).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(55).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(55).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(56).setCellValue("План");
        rowUnderUnderHead.getCell(56).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(57).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(57).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(58).setCellValue("Прогноз");
        rowUnderUnderHead.getCell(58).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(59).setCellValue("План");
        rowUnderUnderHead.getCell(59).setCellStyle(styleTextHeaders);
        rowUnderUnderHead.createCell(60).setCellValue("% Выполнения");
        rowUnderUnderHead.getCell(60).setCellStyle(styleTextHeaders);

        rowNumber += 1;

        for (int a = 0; a < mainDailyReportObject.getMonthList().size(); a++) {

            ExportLoansInfoDate exportLoansInfoMonth = new ExportLoansInfoDate();
            ExportPaymentsInfoDate exportPaymentsInfoMonth = new ExportPaymentsInfoDate();
            ExportProlongationsInfoDate exportProlongationsInfoMonth = new ExportProlongationsInfoDate();
            ModelPlan modelPlan = new ModelPlan();

            for (int b = 0; b < mainDailyReportObject.getExportLoansInfoMonthList().size(); b++) {
                if (mainDailyReportObject.getMonthList().get(a).getMonth().equals(mainDailyReportObject
                        .getExportLoansInfoMonthList().get(b).getDate().getMonth()) &&
                        mainDailyReportObject.getMonthList().get(a).getYear() ==
                                mainDailyReportObject
                                        .getExportLoansInfoMonthList().get(b).getDate().getYear()) {
                    exportLoansInfoMonth = mainDailyReportObject.getExportLoansInfoMonthList().get(b);
                }
            }

            for (int b = 0; b < mainDailyReportObject.getExportPaymentsInfoMonthList().size(); b++) {
                if (mainDailyReportObject.getMonthList().get(a).getMonth().equals(mainDailyReportObject
                        .getExportPaymentsInfoMonthList().get(b).getDate().getMonth()) &&
                        mainDailyReportObject.getMonthList().get(a).getYear() ==
                                mainDailyReportObject
                                        .getExportPaymentsInfoMonthList().get(b).getDate().getYear()) {
                    exportPaymentsInfoMonth = mainDailyReportObject.getExportPaymentsInfoMonthList().get(b);
                }
            }

            for (int b = 0; b < mainDailyReportObject.getExportProlongationsInfoMonthList().size(); b++) {
                if (mainDailyReportObject.getMonthList().get(a).getMonth().equals(mainDailyReportObject
                        .getExportProlongationsInfoMonthList().get(b).getDate().getMonth()) &&
                        mainDailyReportObject.getMonthList().get(a).getYear() ==
                                mainDailyReportObject
                                        .getExportProlongationsInfoMonthList().get(b).getDate().getYear()) {
                    exportProlongationsInfoMonth = mainDailyReportObject.getExportProlongationsInfoMonthList().get(b);
                }
            }

            for (int b = 0; b < mainDailyReportObject.getModelPlanList().size(); b++) {
                if (mainDailyReportObject.getMonthList().get(a).getMonth().equals(mainDailyReportObject
                        .getModelPlanList().get(b).getDateMonth().getMonth()) &&
                        mainDailyReportObject.getMonthList().get(a).getYear() ==
                                mainDailyReportObject
                                        .getModelPlanList().get(b).getDateMonth().getYear()) {
                    modelPlan = mainDailyReportObject.getModelPlanList().get(b);
                }
            }

            int daysCount = 0;

            for (int c = 0; c < mainDailyReportObject.getDateList().size(); c++) {
                if (mainDailyReportObject.getMonthList().get(a).getMonth().equals(mainDailyReportObject.getDateList()
                        .get(c).getMonth()) && mainDailyReportObject.getMonthList().get(a).getYear() ==
                        mainDailyReportObject.getDateList().get(c).getYear()) {
                    daysCount++;
                }
            }

            Row rowMonth = sheet.createRow(rowNumber);

            rowMonth.createCell(0).setCellValue(mainDailyReportObject.getMonthList().get(a));
            rowMonth.getCell(0).setCellStyle(styleMonth);

            if (exportLoansInfoMonth.getAmountLoanNew() != null) {
                rowMonth.createCell(1).setCellValue(exportLoansInfoMonth.getAmountLoanNew() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(1).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoMonth.getPrincipalAmountProlongedNew() != null) {
                rowMonth.createCell(2).setCellValue(exportProlongationsInfoMonth.getPrincipalAmountProlongedNew() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(2).setCellStyle(styleNumber);
            }

            if (exportLoansInfoMonth.getAmountLoanNew() != null) {
                rowMonth.createCell(3).setCellValue((exportLoansInfoMonth.getAmountLoanNew() +
                        exportProlongationsInfoMonth.getPrincipalAmountProlongedNew()) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(3).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoMonth.getPaidPrincipalNew() != null) {
                rowMonth.createCell(4).setCellValue(exportPaymentsInfoMonth.getPaidPrincipalNew() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(4).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoMonth.getPaidIncomeNew() != null) {
                rowMonth.createCell(5).setCellValue(exportPaymentsInfoMonth.getPaidIncomeNew() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(5).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoMonth.getPaidTotalNew() != null) {
                rowMonth.createCell(6).setCellValue(exportPaymentsInfoMonth.getPaidTotalNew() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(6).setCellStyle(styleNumber);
            }

            if (exportLoansInfoMonth.getAmountLoanRepeat() != null) {
                rowMonth.createCell(7).setCellValue(exportLoansInfoMonth.getAmountLoanRepeat() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(7).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null) {
                rowMonth.createCell(8).setCellValue(exportProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(8).setCellStyle(styleNumber);
            }

            if (exportLoansInfoMonth.getAmountLoanRepeat() != null &&
                    exportProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null) {
                rowMonth.createCell(9).setCellValue((exportLoansInfoMonth.getAmountLoanRepeat() +
                        exportProlongationsInfoMonth.getPrincipalAmountProlongedRepeat()) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(9).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoMonth.getPaidPrincipalRepeat() != null) {
                rowMonth.createCell(10).setCellValue(exportPaymentsInfoMonth.getPaidPrincipalRepeat() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(10).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoMonth.getPaidIncomeRepeat() != null) {
                rowMonth.createCell(11).setCellValue(exportPaymentsInfoMonth.getPaidIncomeRepeat() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(11).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoMonth.getPaidTotalRepeat() != null) {
                rowMonth.createCell(12).setCellValue(exportPaymentsInfoMonth.getPaidTotalRepeat() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(12).setCellStyle(styleNumber);
            }

            if (exportLoansInfoMonth.getAmountLoan() != null) {
                rowMonth.createCell(13).setCellValue(exportLoansInfoMonth.getAmountLoan() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(13).setCellStyle(styleNumberBold);
            }

            if (exportProlongationsInfoMonth.getPrincipalAmountProlonged() != null) {
                rowMonth.createCell(14).setCellValue(exportProlongationsInfoMonth.getPrincipalAmountProlonged() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(14).setCellStyle(styleNumberBold);
            }

            if (exportLoansInfoMonth.getAmountLoan() != null &&
                    exportProlongationsInfoMonth.getPrincipalAmountProlonged() != null) {
                rowMonth.createCell(15).setCellValue((exportLoansInfoMonth.getAmountLoan() +
                        exportProlongationsInfoMonth.getPrincipalAmountProlonged()) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(15).setCellStyle(styleNumberBold);
            }

            if (exportPaymentsInfoMonth.getPaidPrincipal() != null) {
                rowMonth.createCell(16).setCellValue(exportPaymentsInfoMonth.getPaidPrincipal() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(16).setCellStyle(styleNumberBold);
            }

            if (exportPaymentsInfoMonth.getPaidIncome() != null) {
                rowMonth.createCell(17).setCellValue(exportPaymentsInfoMonth.getPaidIncome() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(17).setCellStyle(styleNumberBold);
            }

            if (exportPaymentsInfoMonth.getPaidTotal() != null) {
                rowMonth.createCell(18).setCellValue(exportPaymentsInfoMonth.getPaidTotal() /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a)));
                rowMonth.getCell(18).setCellStyle(styleNumberBold);
            }

            if (exportLoansInfoMonth.getAmountLoanNew() != null && daysCount != 0)
            rowMonth.createCell(19).setCellValue((exportLoansInfoMonth.getAmountLoanNew() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(19).setCellStyle(styleNumber);

            if (modelPlan.getIssuedAmountNew() != null) {
                rowMonth.createCell(20).setCellValue(modelPlan.getIssuedAmountNew());
                rowMonth.getCell(20).setCellStyle(styleNumber);
            }

            if (modelPlan.getIssuedAmountNew() != null &&
                    exportLoansInfoMonth.getAmountLoanNew() != null && daysCount != 0) {
                rowMonth.createCell(21).setCellValue(((exportLoansInfoMonth.getAmountLoanNew() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getIssuedAmountNew());
                rowMonth.getCell(21).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoMonth.getPaidPrincipalNew() != null && daysCount != 0)
            rowMonth.createCell(22).setCellValue((exportPaymentsInfoMonth.getPaidPrincipalNew() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(22).setCellStyle(styleNumber);

            if (modelPlan.getRepaymentPrincipalAmountNew() != null) {
                rowMonth.createCell(23).setCellValue(modelPlan.getRepaymentPrincipalAmountNew());
                rowMonth.getCell(23).setCellStyle(styleNumber);
            }

            if (modelPlan.getRepaymentPrincipalAmountNew() != null &&
                    exportPaymentsInfoMonth.getPaidPrincipalNew() != null && daysCount != 0) {
                rowMonth.createCell(24).setCellValue(((exportPaymentsInfoMonth.getPaidPrincipalNew() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getRepaymentPrincipalAmountNew());
                rowMonth.getCell(24).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoMonth.getPaidIncomeNew() != null && daysCount != 0)
            rowMonth.createCell(25).setCellValue((exportPaymentsInfoMonth.getPaidIncomeNew() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(25).setCellStyle(styleNumber);

            if (modelPlan.getRepaymentIncomeAmountNew() != null) {
                rowMonth.createCell(26).setCellValue(modelPlan.getRepaymentIncomeAmountNew());
                rowMonth.getCell(26).setCellStyle(styleNumber);
            }

            if (modelPlan.getRepaymentIncomeAmountNew() != null &&
                    exportPaymentsInfoMonth.getPaidIncomeNew() != null && daysCount != 0) {
                rowMonth.createCell(27).setCellValue(((exportPaymentsInfoMonth.getPaidIncomeNew() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getRepaymentIncomeAmountNew());
                rowMonth.getCell(27).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoMonth.getPaidTotalNew() != null && daysCount != 0)
            rowMonth.createCell(28).setCellValue((exportPaymentsInfoMonth.getPaidTotalNew() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(28).setCellStyle(styleNumber);

            if (modelPlan.getRepaymentTotalAmountNew() != null) {
                rowMonth.createCell(29).setCellValue(modelPlan.getRepaymentTotalAmountNew());
                rowMonth.getCell(29).setCellStyle(styleNumber);
            }

            if (modelPlan.getRepaymentTotalAmountNew() != null &&
                    exportPaymentsInfoMonth.getPaidTotalNew() != null && daysCount != 0) {
                rowMonth.createCell(30).setCellValue(((exportPaymentsInfoMonth.getPaidTotalNew() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getRepaymentTotalAmountNew());
                rowMonth.getCell(30).setCellStyle(stylePercent);
            }

            if (exportLoansInfoMonth.getAmountLoanRepeat() != null && daysCount != 0)
            rowMonth.createCell(31).setCellValue((exportLoansInfoMonth.getAmountLoanRepeat() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(31).setCellStyle(styleNumber);

            if (modelPlan.getIssuedAmountRepeat() != null) {
                rowMonth.createCell(32).setCellValue(modelPlan.getIssuedAmountRepeat());
                rowMonth.getCell(32).setCellStyle(styleNumber);
            }

            if (modelPlan.getIssuedAmountRepeat() != null &&
                    exportLoansInfoMonth.getAmountLoanRepeat() != null && daysCount != 0) {
                rowMonth.createCell(33).setCellValue(((exportLoansInfoMonth.getAmountLoanRepeat() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getIssuedAmountRepeat());
                rowMonth.getCell(33).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoMonth.getPaidPrincipalRepeat() != null && daysCount != 0)
            rowMonth.createCell(34).setCellValue((exportPaymentsInfoMonth.getPaidPrincipalRepeat() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(34).setCellStyle(styleNumber);

            if (modelPlan.getRepaymentPrincipalAmountRepeat() != null) {
                rowMonth.createCell(35).setCellValue(modelPlan.getRepaymentPrincipalAmountRepeat());
                rowMonth.getCell(35).setCellStyle(styleNumber);
            }

            if (modelPlan.getRepaymentPrincipalAmountRepeat() != null &&
                    exportPaymentsInfoMonth.getPaidPrincipalRepeat() != null && daysCount != 0) {
                rowMonth.createCell(36).setCellValue(((exportPaymentsInfoMonth.getPaidPrincipalRepeat() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getRepaymentPrincipalAmountRepeat());
                rowMonth.getCell(36).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoMonth.getPaidIncomeRepeat() != null && daysCount != 0)
            rowMonth.createCell(37).setCellValue((exportPaymentsInfoMonth.getPaidIncomeRepeat() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(37).setCellStyle(styleNumber);

            if (modelPlan.getRepaymentIncomeAmountRepeat() != null) {
                rowMonth.createCell(38).setCellValue(modelPlan.getRepaymentIncomeAmountRepeat());
                rowMonth.getCell(38).setCellStyle(styleNumber);
            }

            if (modelPlan.getRepaymentIncomeAmountRepeat() != null &&
                    exportPaymentsInfoMonth.getPaidIncomeRepeat() != null && daysCount != 0) {
                rowMonth.createCell(39).setCellValue(((exportPaymentsInfoMonth.getPaidIncomeRepeat() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getRepaymentIncomeAmountRepeat());
                rowMonth.getCell(39).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoMonth.getPaidTotalRepeat() != null && daysCount != 0)
            rowMonth.createCell(40).setCellValue((exportPaymentsInfoMonth.getPaidTotalRepeat() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(40).setCellStyle(styleNumber);

            if (modelPlan.getRepaymentTotalAmountRepeat() != null) {
                rowMonth.createCell(41).setCellValue(modelPlan.getRepaymentTotalAmountRepeat());
                rowMonth.getCell(41).setCellStyle(styleNumber);
            }

            if (modelPlan.getRepaymentTotalAmountRepeat() != null &&
                    exportPaymentsInfoMonth.getPaidTotalRepeat() != null && daysCount != 0) {
                rowMonth.createCell(42).setCellValue(((exportPaymentsInfoMonth.getPaidTotalRepeat() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getRepaymentTotalAmountRepeat());
                rowMonth.getCell(42).setCellStyle(stylePercent);
            }

            if (exportLoansInfoMonth.getAmountLoan() != null && daysCount != 0)
            rowMonth.createCell(43).setCellValue((exportLoansInfoMonth.getAmountLoan() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(43).setCellStyle(styleNumberBold);

            if (modelPlan.getIssuedAmountTotal() != null) {
                rowMonth.createCell(44).setCellValue(modelPlan.getIssuedAmountTotal());
                rowMonth.getCell(44).setCellStyle(styleNumberBold);
            }

            if (modelPlan.getIssuedAmountTotal() != null &&
                    exportLoansInfoMonth.getAmountLoan() != null && daysCount != 0) {
                rowMonth.createCell(45).setCellValue(((exportLoansInfoMonth.getAmountLoan() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getIssuedAmountTotal());
                rowMonth.getCell(45).setCellStyle(stylePercentBold);
            }

            if (exportProlongationsInfoMonth.getPrincipalAmountProlonged() != null && daysCount != 0)
            rowMonth.createCell(46).setCellValue((exportProlongationsInfoMonth.getPrincipalAmountProlonged() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(46).setCellStyle(styleNumberBold);

            if (modelPlan.getProlongedAmount() != null) {
                rowMonth.createCell(47).setCellValue(modelPlan.getProlongedAmount());
                rowMonth.getCell(47).setCellStyle(styleNumberBold);
            }

            if (modelPlan.getProlongedAmount() != null &&
                    exportProlongationsInfoMonth.getPrincipalAmountProlonged() != null && daysCount != 0) {
                rowMonth.createCell(48).setCellValue(((exportProlongationsInfoMonth.getPrincipalAmountProlonged() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getProlongedAmount());
                rowMonth.getCell(48).setCellStyle(stylePercentBold);
            }

            if ((exportLoansInfoMonth.getAmountLoan() != null &&
                    exportProlongationsInfoMonth.getPrincipalAmountProlonged() != null) && daysCount != 0)
            rowMonth.createCell(49).setCellValue(((exportLoansInfoMonth.getAmountLoan() +
                    exportProlongationsInfoMonth.getPrincipalAmountProlonged()) / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(49).setCellStyle(styleNumberBold);

            if (modelPlan.getContractsAmountTotal() != null) {
                rowMonth.createCell(50).setCellValue(modelPlan.getContractsAmountTotal());
                rowMonth.getCell(50).setCellStyle(styleNumberBold);
            }

            if (modelPlan.getContractsAmountTotal() != null &&
                    (exportLoansInfoMonth.getAmountLoan() != null &&
                            exportProlongationsInfoMonth.getPrincipalAmountProlonged() != null) && daysCount != 0) {
                rowMonth.createCell(51).setCellValue((((exportLoansInfoMonth.getAmountLoan() +
                        exportProlongationsInfoMonth.getPrincipalAmountProlonged()) / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getContractsAmountTotal());
                rowMonth.getCell(51).setCellStyle(stylePercentBold);
            }

            if (exportPaymentsInfoMonth.getPaidPrincipal() != null && daysCount != 0)
            rowMonth.createCell(52).setCellValue((exportPaymentsInfoMonth.getPaidPrincipal() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(52).setCellStyle(styleNumberBold);

            if (modelPlan.getRepaymentPrincipalAmountTotal() != null) {
                rowMonth.createCell(53).setCellValue(modelPlan.getRepaymentPrincipalAmountTotal());
                rowMonth.getCell(53).setCellStyle(styleNumberBold);
            }

            if (modelPlan.getRepaymentPrincipalAmountTotal() != null &&
                    exportPaymentsInfoMonth.getPaidPrincipal() != null && daysCount != 0) {
                rowMonth.createCell(54).setCellValue(((exportPaymentsInfoMonth.getPaidPrincipal() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getRepaymentPrincipalAmountTotal());
                rowMonth.getCell(54).setCellStyle(stylePercentBold);
            }

            if (exportPaymentsInfoMonth.getPaidIncome() != null && daysCount != 0)
            rowMonth.createCell(55).setCellValue((exportPaymentsInfoMonth.getPaidIncome() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(55).setCellStyle(styleNumberBold);

            if (modelPlan.getRepaymentIncomeAmountTotal() != null) {
                rowMonth.createCell(56).setCellValue(modelPlan.getRepaymentIncomeAmountTotal());
                rowMonth.getCell(56).setCellStyle(styleNumberBold);
            }

            if (modelPlan.getRepaymentIncomeAmountTotal() != null &&
                    exportPaymentsInfoMonth.getPaidIncome() != null && daysCount != 0) {
                rowMonth.createCell(57).setCellValue(((exportPaymentsInfoMonth.getPaidIncome() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getRepaymentIncomeAmountTotal());
                rowMonth.getCell(57).setCellStyle(stylePercentBold);
            }

            if (exportPaymentsInfoMonth.getPaidTotal() != null && daysCount != 0)
            rowMonth.createCell(58).setCellValue((exportPaymentsInfoMonth.getPaidTotal() / daysCount *
                    mainDailyReportObject.getMonthList().get(a).getMonth()
                            .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                            .get(mainDailyReportObject.getMonthList().get(a)));
            rowMonth.getCell(58).setCellStyle(styleNumberBold);

            if (modelPlan.getRepaymentTotalAmountTotal() != null) {
                rowMonth.createCell(59).setCellValue(modelPlan.getRepaymentTotalAmountTotal());
                rowMonth.getCell(59).setCellStyle(styleNumberBold);
            }

            if (modelPlan.getRepaymentTotalAmountTotal() != null &&
                    exportPaymentsInfoMonth.getPaidTotal() != null && daysCount != 0) {
                rowMonth.createCell(60).setCellValue(((exportPaymentsInfoMonth.getPaidTotal() / daysCount *
                        mainDailyReportObject.getMonthList().get(a).getMonth()
                                .length(mainDailyReportObject.getMonthList().get(a).isLeapYear())) /
                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                .get(mainDailyReportObject.getMonthList().get(a))) / modelPlan.getRepaymentTotalAmountTotal());
                rowMonth.getCell(60).setCellStyle(stylePercentBold);
            }

            rowNumber ++;
        }

        SheetConditionalFormatting sheetCF = sheet.getSheetConditionalFormatting();

        ConditionalFormattingRule ruleSheet1 = sheetCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.95");
        PatternFormatting pfSheet1 = ruleSheet1.createPatternFormatting();
        pfSheet1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheet1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheet1 = new ConditionalFormattingRule[] {ruleSheet1};
        CellRangeAddress[] cellRangeAddressesSheet1 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("V5:V" + (rowNumber)),
                        CellRangeAddress.valueOf("Y5:Y" + (rowNumber)),
                        CellRangeAddress.valueOf("AB5:AB" + (rowNumber)),
                        CellRangeAddress.valueOf("AE5:AE" + (rowNumber)),
                        CellRangeAddress.valueOf("AH5:AH" + (rowNumber)),
                        CellRangeAddress.valueOf("AK5:AK" + (rowNumber)),
                        CellRangeAddress.valueOf("AN5:AN" + (rowNumber)),
                        CellRangeAddress.valueOf("AQ5:AQ" + (rowNumber)),
                        CellRangeAddress.valueOf("AT5:AT" + (rowNumber)),
                        CellRangeAddress.valueOf("AW5:AW" + (rowNumber)),
                        CellRangeAddress.valueOf("AZ5:AZ" + (rowNumber)),
                        CellRangeAddress.valueOf("BC5:BC" + (rowNumber)),
                        CellRangeAddress.valueOf("BF5:BF" + (rowNumber)),
                        CellRangeAddress.valueOf("BI5:BI" + (rowNumber))};
        sheetCF.addConditionalFormatting(cellRangeAddressesSheet1,
                conditionalFormattingRulesSheet1);

        ConditionalFormattingRule ruleSheet2 = sheetCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.95");
        PatternFormatting pfSheet2 = ruleSheet2.createPatternFormatting();
        pfSheet2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheet2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheet2 = new ConditionalFormattingRule[] {ruleSheet2};
        CellRangeAddress[] cellRangeAddressesSheet2 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("V5:V" + (rowNumber)),
                        CellRangeAddress.valueOf("Y5:Y" + (rowNumber)),
                        CellRangeAddress.valueOf("AB5:AB" + (rowNumber)),
                        CellRangeAddress.valueOf("AE5:AE" + (rowNumber)),
                        CellRangeAddress.valueOf("AH5:AH" + (rowNumber)),
                        CellRangeAddress.valueOf("AK5:AK" + (rowNumber)),
                        CellRangeAddress.valueOf("AN5:AN" + (rowNumber)),
                        CellRangeAddress.valueOf("AQ5:AQ" + (rowNumber)),
                        CellRangeAddress.valueOf("AT5:AT" + (rowNumber)),
                        CellRangeAddress.valueOf("AW5:AW" + (rowNumber)),
                        CellRangeAddress.valueOf("AZ5:AZ" + (rowNumber)),
                        CellRangeAddress.valueOf("BC5:BC" + (rowNumber)),
                        CellRangeAddress.valueOf("BF5:BF" + (rowNumber)),
                        CellRangeAddress.valueOf("BI5:BI" + (rowNumber))};
        sheetCF.addConditionalFormatting(cellRangeAddressesSheet2,
                conditionalFormattingRulesSheet2);


        rowNumber += 2;

        Row rowNameReport = sheet.createRow(rowNumber);
        rowNameReport.createCell(1).setCellValue("Основной ежедневный отчет");
        rowNameReport.getCell(1).setCellStyle(styleTitle);
        rowNameReport.createCell(2).setCellStyle(styleTitle);
        rowNameReport.createCell(3).setCellStyle(styleTitle);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,1,3));

        rowNumber += 2;

        Row rowPeriodReport = sheet.createRow(rowNumber);
        rowPeriodReport.createCell(1).setCellValue("Период, за который создан отчет:");
        rowPeriodReport.getCell(1).setCellStyle(styleTitle);
        rowPeriodReport.createCell(2).setCellStyle(styleTitle);
        rowPeriodReport.createCell(3).setCellStyle(styleTitle);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,1,3));

        rowNumber += 1;

        Row rowPeriodDates = sheet.createRow(rowNumber);
        rowPeriodDates.createCell(1).setCellValue(mainDailyReportObject.getReportDateFrom());
        rowPeriodDates.getCell(1).setCellStyle(styleDateBold);
        rowPeriodDates.createCell(2).setCellValue("-");
        rowPeriodDates.getCell(2).setCellStyle(styleTitle);
        rowPeriodDates.createCell(3).setCellValue(mainDailyReportObject.getReportDateTo());
        rowPeriodDates.getCell(3).setCellStyle(styleDateBold);

        rowNumber += 2;

        Row rowCreatedReport = sheet.createRow(rowNumber);
        rowCreatedReport.createCell(1).setCellValue("Отчет создан:");
        rowCreatedReport.getCell(1).setCellStyle(styleTitle);
        rowCreatedReport.createCell(2).setCellStyle(styleTitle);
        sheet.addMergedRegion(new CellRangeAddress(rowNumber,rowNumber,1,2));
        rowCreatedReport.createCell(3).setCellValue(mainDailyReportObject.getCreatedAt());
        rowCreatedReport.getCell(3).setCellStyle(styleDateAndTime);

        sheet.setColumnWidth(0, 14 * 256);
        for(int a = 1; a < 61; a++) {
            sheet.setColumnWidth(a, 18 * 256);
        }

        sheet.createFreezePane(1,4);
    }

    private static void createSheetCurrencyRates(Workbook workbook, List<CurrencyRate> currencyRateList,
                                                 Map<LocalDate, Double> mapMonthAndAverageCurrencyRateUsdVnd,
                                                 CellStyle styleTextHeaders, CellStyle styleDate,
                                                 CellStyle styleNumber, CellStyle styleMonthBold,
                                                 CellStyle styleNumberBold) {
        Sheet sheet = workbook.createSheet("Currency rate");

        sheet.setDisplayGridlines(false);

        int rowNumber = 0;

        Row rowHeader = sheet.createRow(rowNumber);
        rowHeader.createCell(0).setCellValue("Date");
        rowHeader.getCell(0).setCellStyle(styleTextHeaders);
        rowHeader.createCell(1).setCellValue("Rate USD -> VND");
        rowHeader.getCell(1).setCellStyle(styleTextHeaders);

        rowNumber += 1;

        for (int a = 0; a < currencyRateList.size(); a++) {
            Row rowNew = sheet.createRow(rowNumber);
            rowNew.createCell(0).setCellValue(currencyRateList.get(a).getDate());
            rowNew.getCell(0).setCellStyle(styleDate);
            rowNew.createCell(1).setCellValue(currencyRateList.get(a).getUsdVnd());
            rowNew.getCell(1).setCellStyle(styleNumber);

            rowNumber += 1;

            if (currencyRateList.size() == a + 1 ||
            !currencyRateList.get(a).getDate().getMonth()
                    .equals(currencyRateList.get(a + 1).getDate().getMonth())) {
                Row row = sheet.createRow(rowNumber);
                row.createCell(0)
                                .setCellValue(currencyRateList.get(a).getDate()
                                        .withDayOfMonth(currencyRateList.get(a).getDate()
                                                .getMonth().length(currencyRateList.get(a)
                                                        .getDate().isLeapYear())));
                row.getCell(0).setCellStyle(styleMonthBold);
                row.createCell(1)
                        .setCellValue(mapMonthAndAverageCurrencyRateUsdVnd
                                .get(currencyRateList.get(a).getDate()
                                        .withDayOfMonth(currencyRateList.get(a).getDate()
                                                .getMonth().length(currencyRateList.get(a)
                                                        .getDate().isLeapYear()))));
                row.getCell(1).setCellStyle(styleNumberBold);

                rowNumber += 1;
            }
        }

        sheet.setColumnWidth(0, 14 * 256);
        sheet.setColumnWidth(1, 19 * 256);

        sheet.createFreezePane(1,1);
    }

    private static void createSheetsCommonDailyUsd(Workbook workbook, MainDailyReportObject mainDailyReportObject,
                                                   CellStyle styleTextHeaders, CellStyle styleDate,
                                                   CellStyle stylePercent, CellStyle styleNumber,
                                                   CellStyle styleMonthBold, CellStyle stylePercentBold,
                                                   CellStyle styleNumberBold) {

        Sheet sheetCommonDailyAllUsd = workbook.createSheet("Общее.Всего.USD");
        Sheet sheetCommonDailyNewUsd = workbook.createSheet("Общее.Новый клиент.USD");
        Sheet sheetCommonDailyRepeatUsd = workbook.createSheet("Общее.Повторный клиент.USD");

        sheetCommonDailyAllUsd.setDisplayGridlines(false);
        sheetCommonDailyNewUsd.setDisplayGridlines(false);
        sheetCommonDailyRepeatUsd.setDisplayGridlines(false);


        //Workbook "Common" sheets
        int rowCommon = 0;

        Row headRowCommonAllUsd = sheetCommonDailyAllUsd.createRow(rowCommon);
        Row headRowCommonNewUsd = sheetCommonDailyNewUsd.createRow(rowCommon);
        Row headRowCommonRepeatUsd = sheetCommonDailyRepeatUsd.createRow(rowCommon);

        Row underHeadRowCommonAllUsd = sheetCommonDailyAllUsd.createRow(rowCommon + 1);
        Row underHeadRowCommonNewUsd = sheetCommonDailyNewUsd.createRow(rowCommon + 1);
        Row underHeadRowCommonRepeatUsd = sheetCommonDailyRepeatUsd.createRow(rowCommon + 1);

        headRowCommonAllUsd.createCell(0).setCellValue("Дата");
        headRowCommonAllUsd.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon,rowCommon + 1,0,0));

        headRowCommonNewUsd.createCell(0).setCellValue("Дата");
        headRowCommonNewUsd.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon,rowCommon + 1,0,0));

        headRowCommonRepeatUsd.createCell(0).setCellValue("Дата");
        headRowCommonRepeatUsd.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon,rowCommon + 1,0,0));

        headRowCommonAllUsd.createCell(1).setCellValue("Выдачи");
        headRowCommonAllUsd.getCell(1).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(2).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(3).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(4).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 1, 4));

        headRowCommonNewUsd.createCell(1).setCellValue("Выдачи");
        headRowCommonNewUsd.getCell(1).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(2).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(3).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(4).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 1, 4));

        headRowCommonRepeatUsd.createCell(1).setCellValue("Выдачи");
        headRowCommonRepeatUsd.getCell(1).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(2).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(3).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(4).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 1, 4));

        underHeadRowCommonAllUsd.createCell(1).setCellValue("Количество");
        underHeadRowCommonAllUsd.getCell(1).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(1).setCellValue("Количество");
        underHeadRowCommonNewUsd.getCell(1).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(1).setCellValue("Количество");
        underHeadRowCommonRepeatUsd.getCell(1).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllUsd.createCell(2).setCellValue("Сумма");
        underHeadRowCommonAllUsd.getCell(2).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(2).setCellValue("Сумма");
        underHeadRowCommonNewUsd.getCell(2).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(2).setCellValue("Сумма");
        underHeadRowCommonRepeatUsd.getCell(2).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllUsd.createCell(3).setCellValue("Средняя сумма");
        underHeadRowCommonAllUsd.getCell(3).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(3).setCellValue("Средняя сумма");
        underHeadRowCommonNewUsd.getCell(3).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(3).setCellValue("Средняя сумма");
        underHeadRowCommonRepeatUsd.getCell(3).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllUsd.createCell(4).setCellValue("Прирост");
        underHeadRowCommonAllUsd.getCell(4).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(4).setCellValue("Прирост");
        underHeadRowCommonNewUsd.getCell(4).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(4).setCellValue("Прирост");
        underHeadRowCommonRepeatUsd.getCell(4).setCellStyle(styleTextHeaders);

        headRowCommonAllUsd.createCell(5).setCellValue("Пролонгации");
        headRowCommonAllUsd.getCell(5).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(6).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(7).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(8).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 5, 8));

        headRowCommonNewUsd.createCell(5).setCellValue("Пролонгации");
        headRowCommonNewUsd.getCell(5).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(6).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(7).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(8).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 5, 8));

        headRowCommonRepeatUsd.createCell(5).setCellValue("Пролонгации");
        headRowCommonRepeatUsd.getCell(5).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(6).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(7).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(8).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 5, 8));

        underHeadRowCommonAllUsd.createCell(5).setCellValue("Количество");
        underHeadRowCommonAllUsd.getCell(5).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(5).setCellValue("Количество");
        underHeadRowCommonNewUsd.getCell(5).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(5).setCellValue("Количество");
        underHeadRowCommonRepeatUsd.getCell(5).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllUsd.createCell(6).setCellValue("Сумма");
        underHeadRowCommonAllUsd.getCell(6).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(6).setCellValue("Сумма");
        underHeadRowCommonNewUsd.getCell(6).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(6).setCellValue("Сумма");
        underHeadRowCommonRepeatUsd.getCell(6).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllUsd.createCell(7).setCellValue("Средняя сумма");
        underHeadRowCommonAllUsd.getCell(7).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(7).setCellValue("Средняя сумма");
        underHeadRowCommonNewUsd.getCell(7).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(7).setCellValue("Средняя сумма");
        underHeadRowCommonRepeatUsd.getCell(7).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllUsd.createCell(8).setCellValue("Прирост");
        underHeadRowCommonAllUsd.getCell(8).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(8).setCellValue("Прирост");
        underHeadRowCommonNewUsd.getCell(8).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(8).setCellValue("Прирост");
        underHeadRowCommonRepeatUsd.getCell(8).setCellStyle(styleTextHeaders);

        headRowCommonAllUsd.createCell(9).setCellValue("Сумма договоров");
        headRowCommonAllUsd.getCell(9).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(10).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 9, 10));

        headRowCommonNewUsd.createCell(9).setCellValue("Сумма договоров");
        headRowCommonNewUsd.getCell(9).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(10).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 9, 10));

        headRowCommonRepeatUsd.createCell(9).setCellValue("Сумма договоров");
        headRowCommonRepeatUsd.getCell(9).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(10).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 9, 10));

        underHeadRowCommonAllUsd.createCell(9).setCellValue("Сумма");
        underHeadRowCommonAllUsd.getCell(9).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(9).setCellValue("Сумма");
        underHeadRowCommonNewUsd.getCell(9).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(9).setCellValue("Сумма");
        underHeadRowCommonRepeatUsd.getCell(9).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllUsd.createCell(10).setCellValue("Прирост");
        underHeadRowCommonAllUsd.getCell(10).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(10).setCellValue("Прирост");
        underHeadRowCommonNewUsd.getCell(10).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(10).setCellValue("Прирост");
        underHeadRowCommonRepeatUsd.getCell(10).setCellStyle(styleTextHeaders);

        headRowCommonAllUsd.createCell(11).setCellValue("Погашения");
        headRowCommonAllUsd.getCell(11).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(12).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(13).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(14).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 11, 14));

        headRowCommonNewUsd.createCell(11).setCellValue("Погашения");
        headRowCommonNewUsd.getCell(11).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(12).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(13).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(14).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 11, 14));

        headRowCommonRepeatUsd.createCell(11).setCellValue("Погашения");
        headRowCommonRepeatUsd.getCell(11).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(12).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(13).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(14).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 11, 14));

        underHeadRowCommonAllUsd.createCell(11).setCellValue("Всего погашено");
        underHeadRowCommonAllUsd.getCell(11).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(11).setCellValue("Всего погашено");
        underHeadRowCommonNewUsd.getCell(11).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(11).setCellValue("Всего погашено");
        underHeadRowCommonRepeatUsd.getCell(11).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllUsd.createCell(12).setCellValue("Погашено тело");
        underHeadRowCommonAllUsd.getCell(12).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(12).setCellValue("Погашено тело");
        underHeadRowCommonNewUsd.getCell(12).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(12).setCellValue("Погашено тело");
        underHeadRowCommonRepeatUsd.getCell(12).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllUsd.createCell(13).setCellValue("Доход");
        underHeadRowCommonAllUsd.getCell(13).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(13).setCellValue("Доход");
        underHeadRowCommonNewUsd.getCell(13).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(13).setCellValue("Доход");
        underHeadRowCommonRepeatUsd.getCell(13).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllUsd.createCell(14).setCellValue("Прирост");
        underHeadRowCommonAllUsd.getCell(14).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(14).setCellValue("Прирост");
        underHeadRowCommonNewUsd.getCell(14).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(14).setCellValue("Прирост");
        underHeadRowCommonRepeatUsd.getCell(14).setCellStyle(styleTextHeaders);

        headRowCommonAllUsd.createCell(15).setCellValue("Заявки");
        headRowCommonAllUsd.getCell(15).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(16).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(17).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(18).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(19).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(20).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(21).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(22).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(23).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(24).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(25).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(26).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(27).setCellStyle(styleTextHeaders);
        headRowCommonAllUsd.createCell(28).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 15, 28));

        headRowCommonNewUsd.createCell(15).setCellValue("Заявки");
        headRowCommonNewUsd.getCell(15).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(16).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(17).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(18).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(19).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(20).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(21).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(22).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(23).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(24).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(25).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(26).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(27).setCellStyle(styleTextHeaders);
        headRowCommonNewUsd.createCell(28).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 15, 28));

        headRowCommonRepeatUsd.createCell(15).setCellValue("Заявки");
        headRowCommonRepeatUsd.getCell(15).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(16).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(17).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(18).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(19).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(20).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(21).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(22).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(23).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(24).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(25).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(26).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(27).setCellStyle(styleTextHeaders);
        headRowCommonRepeatUsd.createCell(28).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 15, 28));

        underHeadRowCommonAllUsd.createCell(15).setCellValue("В процессе");
        underHeadRowCommonAllUsd.getCell(15).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 15, 16));

        underHeadRowCommonNewUsd.createCell(15).setCellValue("В процессе");
        underHeadRowCommonNewUsd.getCell(15).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 15, 16));

        underHeadRowCommonRepeatUsd.createCell(15).setCellValue("В процессе");
        underHeadRowCommonRepeatUsd.getCell(15).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 15, 16));

        underHeadRowCommonAllUsd.createCell(17).setCellValue("Отменено системой");
        underHeadRowCommonAllUsd.getCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 17, 18));

        underHeadRowCommonNewUsd.createCell(17).setCellValue("Отменено системой");
        underHeadRowCommonNewUsd.getCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 17, 18));

        underHeadRowCommonRepeatUsd.createCell(17).setCellValue("Отменено системой");
        underHeadRowCommonRepeatUsd.getCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 17, 18));

        underHeadRowCommonAllUsd.createCell(19).setCellValue("Отменено клиентом");
        underHeadRowCommonAllUsd.getCell(19).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 19, 20));

        underHeadRowCommonNewUsd.createCell(19).setCellValue("Отменено клиентом");
        underHeadRowCommonNewUsd.getCell(19).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 19, 20));

        underHeadRowCommonRepeatUsd.createCell(19).setCellValue("Отменено клиентом");
        underHeadRowCommonRepeatUsd.getCell(19).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 19, 20));

        underHeadRowCommonAllUsd.createCell(21).setCellValue("Отказано");
        underHeadRowCommonAllUsd.getCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 21, 22));

        underHeadRowCommonNewUsd.createCell(21).setCellValue("Отказано");
        underHeadRowCommonNewUsd.getCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 21, 22));

        underHeadRowCommonRepeatUsd.createCell(21).setCellValue("Отказано");
        underHeadRowCommonRepeatUsd.getCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 21, 22));

        underHeadRowCommonAllUsd.createCell(23).setCellValue("Одобрено");
        underHeadRowCommonAllUsd.getCell(23).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 23, 24));

        underHeadRowCommonNewUsd.createCell(23).setCellValue("Одобрено");
        underHeadRowCommonNewUsd.getCell(23).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 23, 24));

        underHeadRowCommonRepeatUsd.createCell(23).setCellValue("Одобрено");
        underHeadRowCommonRepeatUsd.getCell(23).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 23, 24));

        underHeadRowCommonAllUsd.createCell(25).setCellValue("Выдано");
        underHeadRowCommonAllUsd.getCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 25, 26));

        underHeadRowCommonNewUsd.createCell(25).setCellValue("Выдано");
        underHeadRowCommonNewUsd.getCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 25, 26));

        underHeadRowCommonRepeatUsd.createCell(25).setCellValue("Выдано");
        underHeadRowCommonRepeatUsd.getCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatUsd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 25, 26));

        underHeadRowCommonAllUsd.createCell(27).setCellValue("Всего");
        underHeadRowCommonAllUsd.getCell(27).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(27).setCellValue("Всего");
        underHeadRowCommonNewUsd.getCell(27).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(27).setCellValue("Всего");
        underHeadRowCommonRepeatUsd.getCell(27).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllUsd.createCell(28).setCellValue("Прирост");
        underHeadRowCommonAllUsd.getCell(28).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewUsd.createCell(28).setCellValue("Прирост");
        underHeadRowCommonNewUsd.getCell(28).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatUsd.createCell(28).setCellValue("Прирост");
        underHeadRowCommonRepeatUsd.getCell(28).setCellStyle(styleTextHeaders);

        rowCommon += 2;

        int rowNumberForGroupFirstCommon = rowCommon;
        int rowNumberForGroupLastCommon;

        for(int a = 0; a < mainDailyReportObject.getDateList().size(); a++) {
            Row newRowCommonAllUsd = sheetCommonDailyAllUsd.createRow(rowCommon);
            Row newRowCommonNewUsd = sheetCommonDailyNewUsd.createRow(rowCommon);
            Row newRowCommonRepeatUsd = sheetCommonDailyRepeatUsd.createRow(rowCommon);

            CurrencyRate currencyRateForDate = new CurrencyRate();

            for (int c = 0; c < mainDailyReportObject.getCurrencyRateList().size(); c++) {
                if (mainDailyReportObject.getDateList().get(a)
                        .equals(mainDailyReportObject.getCurrencyRateList().get(c).getDate())) {
                    currencyRateForDate = mainDailyReportObject.getCurrencyRateList().get(c);
                }
            }


            ExportApplicationsInfoDate exportApplicationsInfoDate = new ExportApplicationsInfoDate();
            ExportLoansInfoDate exportLoansInfoDate = new ExportLoansInfoDate();
            ExportPaymentsInfoDate exportPaymentsInfoDate = new ExportPaymentsInfoDate();
            ExportProlongationsInfoDate exportProlongationsInfoDate = new ExportProlongationsInfoDate();

            ExportApplicationsInfoDate exportApplicationsInfoDatePrevious = new ExportApplicationsInfoDate();
            ExportLoansInfoDate exportLoansInfoDatePrevious = new ExportLoansInfoDate();
            ExportPaymentsInfoDate exportPaymentsInfoDatePrevious = new ExportPaymentsInfoDate();
            ExportProlongationsInfoDate exportProlongationsInfoDatePrevious = new ExportProlongationsInfoDate();

            if (a != 0) {
                for (int z = 0; z < mainDailyReportObject.getExportApplicationsInfoDateList().size(); z++){
                    if (mainDailyReportObject.getExportApplicationsInfoDateList().get(z).getDate()
                            .equals(mainDailyReportObject.getDateList().get(a - 1))) {
                        exportApplicationsInfoDatePrevious = mainDailyReportObject.getExportApplicationsInfoDateList().get(z);
                    }
                }

                for (int x = 0; x < mainDailyReportObject.getExportLoansInfoDateList().size(); x++) {
                    if (mainDailyReportObject.getExportLoansInfoDateList().get(x).getDate()
                            .equals(mainDailyReportObject.getDateList().get(a - 1))) {
                        exportLoansInfoDatePrevious = mainDailyReportObject.getExportLoansInfoDateList().get(x);
                    }
                }

                for (int s = 0; s < mainDailyReportObject.getExportPaymentsInfoDateList().size(); s++) {
                    if (mainDailyReportObject.getExportPaymentsInfoDateList().get(s).getDate()
                            .equals(mainDailyReportObject.getDateList().get(a - 1))) {
                        exportPaymentsInfoDatePrevious = mainDailyReportObject.getExportPaymentsInfoDateList().get(s);
                    }
                }

                for (int f = 0; f < mainDailyReportObject.getExportProlongationsInfoDateList().size(); f++) {
                    if (mainDailyReportObject.getExportProlongationsInfoDateList().get(f).getDate()
                            .equals(mainDailyReportObject.getDateList().get(a - 1))) {
                        exportProlongationsInfoDatePrevious = mainDailyReportObject.getExportProlongationsInfoDateList().get(f);
                    }
                }
            }

            for (int z = 0; z < mainDailyReportObject.getExportApplicationsInfoDateList().size(); z++) {
                if (mainDailyReportObject.getExportApplicationsInfoDateList().get(z).getDate()
                        .equals(mainDailyReportObject.getDateList().get(a))) {
                    exportApplicationsInfoDate = mainDailyReportObject.getExportApplicationsInfoDateList().get(z);
                }
            }

            for (int x = 0; x < mainDailyReportObject.getExportLoansInfoDateList().size(); x++) {
                if (mainDailyReportObject.getExportLoansInfoDateList().get(x).getDate()
                        .equals(mainDailyReportObject.getDateList().get(a))) {
                    exportLoansInfoDate = mainDailyReportObject.getExportLoansInfoDateList().get(x);
                }
            }

            for (int s = 0; s < mainDailyReportObject.getExportPaymentsInfoDateList().size(); s++) {
                if (mainDailyReportObject.getExportPaymentsInfoDateList().get(s).getDate()
                        .equals(mainDailyReportObject.getDateList().get(a))) {
                    exportPaymentsInfoDate = mainDailyReportObject.getExportPaymentsInfoDateList().get(s);
                }
            }

            for (int f = 0; f < mainDailyReportObject.getExportProlongationsInfoDateList().size(); f++) {
                if (mainDailyReportObject.getExportProlongationsInfoDateList().get(f).getDate()
                        .equals(mainDailyReportObject.getDateList().get(a))) {
                    exportProlongationsInfoDate = mainDailyReportObject.getExportProlongationsInfoDateList().get(f);
                }
            }

            newRowCommonAllUsd.createCell(0)
                    .setCellValue(mainDailyReportObject.getDateList().get(a));
            newRowCommonAllUsd.getCell(0)
                    .setCellStyle(styleDate);

            newRowCommonNewUsd.createCell(0)
                    .setCellValue(mainDailyReportObject.getDateList().get(a));
            newRowCommonNewUsd.getCell(0)
                    .setCellStyle(styleDate);

            newRowCommonRepeatUsd.createCell(0)
                    .setCellValue(mainDailyReportObject.getDateList().get(a));
            newRowCommonRepeatUsd.getCell(0)
                    .setCellStyle(styleDate);

            if (exportLoansInfoDate.getCountLoan() != null) {
                newRowCommonAllUsd.createCell(1).setCellValue(exportLoansInfoDate.getCountLoan());
                newRowCommonAllUsd.getCell(1).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getCountLoanNew() != null) {
                newRowCommonNewUsd.createCell(1).setCellValue(exportLoansInfoDate.getCountLoanNew());
                newRowCommonNewUsd.getCell(1).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getCountLoanRepeat() != null) {
                newRowCommonRepeatUsd.createCell(1).setCellValue(exportLoansInfoDate.getCountLoanRepeat());
                newRowCommonRepeatUsd.getCell(1).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoan() != null) {
                newRowCommonAllUsd.createCell(2).setCellValue(exportLoansInfoDate.getAmountLoan() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonAllUsd.getCell(2).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoanNew() != null) {
                newRowCommonNewUsd.createCell(2).setCellValue(exportLoansInfoDate.getAmountLoanNew() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonNewUsd.getCell(2).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoanRepeat() != null) {
                newRowCommonRepeatUsd.createCell(2).setCellValue(exportLoansInfoDate.getAmountLoanRepeat() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonRepeatUsd.getCell(2).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getCountLoan() != null &&
                    exportLoansInfoDate.getAmountLoan() != null) {
                newRowCommonAllUsd.createCell(3).setCellValue((exportLoansInfoDate.getAmountLoan() /
                        exportLoansInfoDate.getCountLoan()) /
                        currencyRateForDate.getUsdVnd());
                newRowCommonAllUsd.getCell(3).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getCountLoanNew() != null &&
                    exportLoansInfoDate.getAmountLoanNew() != null) {
                newRowCommonNewUsd.createCell(3).setCellValue((exportLoansInfoDate.getAmountLoanNew() /
                        exportLoansInfoDate.getCountLoanNew()) /
                        currencyRateForDate.getUsdVnd());
                newRowCommonNewUsd.getCell(3).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getCountLoanRepeat() != null &&
                    exportLoansInfoDate.getAmountLoanRepeat() != null) {
                newRowCommonRepeatUsd.createCell(3).setCellValue((exportLoansInfoDate.getAmountLoanRepeat() /
                        exportLoansInfoDate.getCountLoanRepeat()) /
                        currencyRateForDate.getUsdVnd());
                newRowCommonRepeatUsd.getCell(3).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoan() != null &&
                    exportLoansInfoDatePrevious.getAmountLoan() != null) {
                newRowCommonAllUsd.createCell(4).setCellValue((exportLoansInfoDate.getAmountLoan() -
                        exportLoansInfoDatePrevious.getAmountLoan()) / exportLoansInfoDatePrevious.getAmountLoan());
                newRowCommonAllUsd.getCell(4).setCellStyle(stylePercent);
            }

            if (exportLoansInfoDate.getAmountLoanNew() != null &&
                    exportLoansInfoDatePrevious.getAmountLoanNew() != null) {
                newRowCommonNewUsd.createCell(4).setCellValue((exportLoansInfoDate.getAmountLoanNew() -
                        exportLoansInfoDatePrevious.getAmountLoanNew()) / exportLoansInfoDatePrevious.getAmountLoanNew());
                newRowCommonNewUsd.getCell(4).setCellStyle(stylePercent);
            }

            if (exportLoansInfoDate.getAmountLoanRepeat() != null &&
                    exportLoansInfoDatePrevious.getAmountLoanRepeat() != null) {
                newRowCommonRepeatUsd.createCell(4).setCellValue((exportLoansInfoDate.getAmountLoanRepeat() -
                        exportLoansInfoDatePrevious.getAmountLoanRepeat()) / exportLoansInfoDatePrevious.getAmountLoanRepeat());
                newRowCommonRepeatUsd.getCell(4).setCellStyle(stylePercent);
            }

            if (exportProlongationsInfoDate.getCountProlonged() != null) {
                newRowCommonAllUsd.createCell(5).setCellValue(exportProlongationsInfoDate.getCountProlonged());
                newRowCommonAllUsd.getCell(5).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getCountProlongedNew() != null) {
                newRowCommonNewUsd.createCell(5).setCellValue(exportProlongationsInfoDate.getCountProlongedNew());
                newRowCommonNewUsd.getCell(5).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getCountProlongedRepeat() != null) {
                newRowCommonRepeatUsd.createCell(5).setCellValue(exportProlongationsInfoDate.getCountProlongedRepeat());
                newRowCommonRepeatUsd.getCell(5).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlonged() != null) {
                newRowCommonAllUsd.createCell(6).setCellValue(exportProlongationsInfoDate.getPrincipalAmountProlonged() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonAllUsd.getCell(6).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlongedNew() != null) {
                newRowCommonNewUsd.createCell(6).setCellValue(exportProlongationsInfoDate.getPrincipalAmountProlongedNew() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonNewUsd.getCell(6).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() != null) {
                newRowCommonRepeatUsd.createCell(6).setCellValue(exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonRepeatUsd.getCell(6).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getCountProlonged() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlonged() != null) {
                newRowCommonAllUsd.createCell(7)
                        .setCellValue((exportProlongationsInfoDate.getPrincipalAmountProlonged() /
                                exportProlongationsInfoDate.getCountProlonged()) /
                                currencyRateForDate.getUsdVnd());
                newRowCommonAllUsd.getCell(7).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getCountProlongedNew() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlongedNew() != null) {
                newRowCommonNewUsd.createCell(7)
                        .setCellValue((exportProlongationsInfoDate.getPrincipalAmountProlongedNew() /
                                exportProlongationsInfoDate.getCountProlongedNew()) /
                                currencyRateForDate.getUsdVnd());
                newRowCommonNewUsd.getCell(7).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getCountProlongedRepeat() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() != null) {
                newRowCommonRepeatUsd.createCell(7)
                        .setCellValue((exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() /
                                exportProlongationsInfoDate.getCountProlongedRepeat()) /
                                currencyRateForDate.getUsdVnd());
                newRowCommonRepeatUsd.getCell(7).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlonged() != null &&
                    exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged() != null) {
                newRowCommonAllUsd.createCell(8)
                        .setCellValue((exportProlongationsInfoDate.getPrincipalAmountProlonged() -
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged()) /
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged());
                newRowCommonAllUsd.getCell(8).setCellStyle(stylePercent);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlongedNew() != null &&
                    exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew() != null) {
                newRowCommonNewUsd.createCell(8)
                        .setCellValue((exportProlongationsInfoDate.getPrincipalAmountProlongedNew() -
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew()) /
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew());
                newRowCommonNewUsd.getCell(8).setCellStyle(stylePercent);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() != null &&
                    exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat() != null) {
                newRowCommonRepeatUsd.createCell(8)
                        .setCellValue((exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() -
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat()) /
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat());
                newRowCommonRepeatUsd.getCell(8).setCellStyle(stylePercent);
            }

            if (exportLoansInfoDate.getAmountLoan() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlonged() != null) {
                newRowCommonAllUsd.createCell(9)
                        .setCellValue((exportLoansInfoDate.getAmountLoan() +
                                exportProlongationsInfoDate.getPrincipalAmountProlonged()) /
                                currencyRateForDate.getUsdVnd());
                newRowCommonAllUsd.getCell(9).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoanNew() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlongedNew() != null) {
                newRowCommonNewUsd.createCell(9)
                        .setCellValue((exportLoansInfoDate.getAmountLoanNew() +
                                exportProlongationsInfoDate.getPrincipalAmountProlongedNew()) /
                                currencyRateForDate.getUsdVnd());
                newRowCommonNewUsd.getCell(9).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoanRepeat() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() != null) {
                newRowCommonRepeatUsd.createCell(9)
                        .setCellValue((exportLoansInfoDate.getAmountLoanRepeat() +
                                exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat()) /
                                currencyRateForDate.getUsdVnd());
                newRowCommonRepeatUsd.getCell(9).setCellStyle(styleNumber);
            }

            if ((exportLoansInfoDate.getAmountLoan() != null &&
                    exportLoansInfoDatePrevious.getAmountLoan() != null) &&
                    (exportProlongationsInfoDate.getPrincipalAmountProlonged() != null &&
                            exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged() != null)) {
                newRowCommonAllUsd.createCell(10)
                        .setCellValue(((exportLoansInfoDate.getAmountLoan() +
                                exportProlongationsInfoDate.getPrincipalAmountProlonged()) -
                                (exportLoansInfoDatePrevious.getAmountLoan() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged())) /
                                (exportLoansInfoDatePrevious.getAmountLoan() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged()));
                newRowCommonAllUsd.getCell(10).setCellStyle(stylePercent);
            }

            if ((exportLoansInfoDate.getAmountLoanNew() != null &&
                    exportLoansInfoDatePrevious.getAmountLoanNew() != null) &&
                    (exportProlongationsInfoDate.getPrincipalAmountProlongedNew() != null &&
                            exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew() != null)) {
                newRowCommonNewUsd.createCell(10)
                        .setCellValue(((exportLoansInfoDate.getAmountLoanNew() +
                                exportProlongationsInfoDate.getPrincipalAmountProlongedNew()) -
                                (exportLoansInfoDatePrevious.getAmountLoanNew() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew())) /
                                (exportLoansInfoDatePrevious.getAmountLoanNew() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew()));
                newRowCommonNewUsd.getCell(10).setCellStyle(stylePercent);
            }

            if ((exportLoansInfoDate.getAmountLoanRepeat() != null &&
                    exportLoansInfoDatePrevious.getAmountLoanRepeat() != null) &&
                    (exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() != null &&
                            exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat() != null)) {
                newRowCommonRepeatUsd.createCell(10)
                        .setCellValue(((exportLoansInfoDate.getAmountLoanRepeat() +
                                exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat()) -
                                (exportLoansInfoDatePrevious.getAmountLoanRepeat() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat())) /
                                (exportLoansInfoDatePrevious.getAmountLoanRepeat() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat()));
                newRowCommonRepeatUsd.getCell(10).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoDate.getPaidTotal() != null) {
                newRowCommonAllUsd.createCell(11).setCellValue(exportPaymentsInfoDate.getPaidTotal() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonAllUsd.getCell(11).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidTotalNew() != null) {
                newRowCommonNewUsd.createCell(11).setCellValue(exportPaymentsInfoDate.getPaidTotalNew() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonNewUsd.getCell(11).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidTotalRepeat() != null) {
                newRowCommonRepeatUsd.createCell(11).setCellValue(exportPaymentsInfoDate.getPaidTotalRepeat() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonRepeatUsd.getCell(11).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidPrincipal() != null) {
                newRowCommonAllUsd.createCell(12).setCellValue(exportPaymentsInfoDate.getPaidPrincipal() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonAllUsd.getCell(12).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidPrincipalNew() != null) {
                newRowCommonNewUsd.createCell(12).setCellValue(exportPaymentsInfoDate.getPaidPrincipalNew() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonNewUsd.getCell(12).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidPrincipalRepeat() != null) {
                newRowCommonRepeatUsd.createCell(12).setCellValue(exportPaymentsInfoDate.getPaidPrincipalRepeat() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonRepeatUsd.getCell(12).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidIncome() != null) {
                newRowCommonAllUsd.createCell(13).setCellValue(exportPaymentsInfoDate.getPaidIncome() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonAllUsd.getCell(13).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidIncomeNew() != null) {
                newRowCommonNewUsd.createCell(13).setCellValue(exportPaymentsInfoDate.getPaidIncomeNew() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonNewUsd.getCell(13).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidIncomeRepeat() != null) {
                newRowCommonRepeatUsd.createCell(13).setCellValue(exportPaymentsInfoDate.getPaidIncomeRepeat() /
                        currencyRateForDate.getUsdVnd());
                newRowCommonRepeatUsd.getCell(13).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidTotal() != null &&
                    exportPaymentsInfoDatePrevious.getPaidTotal() != null) {
                newRowCommonAllUsd.createCell(14).setCellValue((exportPaymentsInfoDate.getPaidTotal() -
                        exportPaymentsInfoDatePrevious.getPaidTotal()) /
                        exportPaymentsInfoDatePrevious.getPaidTotal());
                newRowCommonAllUsd.getCell(14).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoDate.getPaidTotalNew() != null &&
                    exportPaymentsInfoDatePrevious.getPaidTotalNew() != null) {
                newRowCommonNewUsd.createCell(14).setCellValue((exportPaymentsInfoDate.getPaidTotalNew() -
                        exportPaymentsInfoDatePrevious.getPaidTotalNew()) /
                        exportPaymentsInfoDatePrevious.getPaidTotalNew());
                newRowCommonNewUsd.getCell(14).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoDate.getPaidTotalRepeat() != null &&
                    exportPaymentsInfoDatePrevious.getPaidTotalRepeat() != null) {
                newRowCommonRepeatUsd.createCell(14).setCellValue((exportPaymentsInfoDate.getPaidTotalRepeat() -
                        exportPaymentsInfoDatePrevious.getPaidTotalRepeat()) /
                        exportPaymentsInfoDatePrevious.getPaidTotalRepeat());
                newRowCommonRepeatUsd.getCell(14).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgress() != null) {
                newRowCommonAllUsd.createCell(15).setCellValue(exportApplicationsInfoDate.getCountAppsInProgress());
                newRowCommonAllUsd.getCell(15).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgressNew() != null) {
                newRowCommonNewUsd.createCell(15).setCellValue(exportApplicationsInfoDate.getCountAppsInProgressNew());
                newRowCommonNewUsd.getCell(15).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgressRepeat() != null) {
                newRowCommonRepeatUsd.createCell(15).setCellValue(exportApplicationsInfoDate.getCountAppsInProgressRepeat());
                newRowCommonRepeatUsd.getCell(15).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgress() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllUsd.createCell(16)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsInProgress() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllUsd.getCell(16).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgressNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewUsd.createCell(16)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsInProgressNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewUsd.getCell(16).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgressRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatUsd.createCell(16)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsInProgressRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatUsd.getCell(16).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystem() != null) {
                newRowCommonAllUsd.createCell(17)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledBySystem());
                newRowCommonAllUsd.getCell(17).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystemNew() != null) {
                newRowCommonNewUsd.createCell(17)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledBySystemNew());
                newRowCommonNewUsd.getCell(17).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystemRepeat() != null) {
                newRowCommonRepeatUsd.createCell(17)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledBySystemRepeat());
                newRowCommonRepeatUsd.getCell(17).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystem() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllUsd.createCell(18)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledBySystem() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllUsd.getCell(18).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystemNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewUsd.createCell(18)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledBySystemNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewUsd.getCell(18).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystemRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatUsd.createCell(18)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledBySystemRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatUsd.getCell(18).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClient() != null) {
                newRowCommonAllUsd.createCell(19)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledByClient());
                newRowCommonAllUsd.getCell(19).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClientNew() != null) {
                newRowCommonNewUsd.createCell(19)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledByClientNew());
                newRowCommonNewUsd.getCell(19).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClientRepeat() != null) {
                newRowCommonRepeatUsd.createCell(19)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledByClientRepeat());
                newRowCommonRepeatUsd.getCell(19).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClient() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllUsd.createCell(20)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledByClient() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllUsd.getCell(20).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClientNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewUsd.createCell(20)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledByClientNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewUsd.getCell(20).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClientRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatUsd.createCell(20)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledByClientRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatUsd.getCell(20).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsRejected() != null) {
                newRowCommonAllUsd.createCell(21)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsRejected());
                newRowCommonAllUsd.getCell(21).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsRejectedNew() != null) {
                newRowCommonNewUsd.createCell(21)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsRejectedNew());
                newRowCommonNewUsd.getCell(21).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsRejectedRepeat() != null) {
                newRowCommonRepeatUsd.createCell(21)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsRejectedRepeat());
                newRowCommonRepeatUsd.getCell(21).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsRejected() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllUsd.createCell(22)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsRejected() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllUsd.getCell(22).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsRejectedNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewUsd.createCell(22)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsRejectedNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewUsd.getCell(22).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsRejectedRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatUsd.createCell(22)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsRejectedRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatUsd.getCell(22).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApproved() != null) {
                newRowCommonAllUsd.createCell(23)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsWasApproved());
                newRowCommonAllUsd.getCell(23).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApprovedNew() != null) {
                newRowCommonNewUsd.createCell(23)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsWasApprovedNew());
                newRowCommonNewUsd.getCell(23).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApprovedRepeat() != null) {
                newRowCommonRepeatUsd.createCell(23)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsWasApprovedRepeat());
                newRowCommonRepeatUsd.getCell(23).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApproved() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllUsd.createCell(24)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsWasApproved() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllUsd.getCell(24).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApprovedNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewUsd.createCell(24)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsWasApprovedNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewUsd.getCell(24).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApprovedRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatUsd.createCell(24)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsWasApprovedRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatUsd.getCell(24).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsIssued() != null) {
                newRowCommonAllUsd.createCell(25)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsIssued());
                newRowCommonAllUsd.getCell(25).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsIssuedNew() != null) {
                newRowCommonNewUsd.createCell(25)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsIssuedNew());
                newRowCommonNewUsd.getCell(25).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsIssuedRepeat() != null) {
                newRowCommonRepeatUsd.createCell(25)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsIssuedRepeat());
                newRowCommonRepeatUsd.getCell(25).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsIssued() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllUsd.createCell(26)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsIssued() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllUsd.getCell(26).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsIssuedNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewUsd.createCell(26)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsIssuedNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewUsd.getCell(26).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsIssuedRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatUsd.createCell(26)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsIssuedRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatUsd.getCell(26).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllUsd.createCell(27)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllUsd.getCell(27).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewUsd.createCell(27)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewUsd.getCell(27).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatUsd.createCell(27)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatUsd.getCell(27).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsTotal() != null &&
                    exportApplicationsInfoDatePrevious.getCountAppsTotal() != null) {
                newRowCommonAllUsd.createCell(28)
                        .setCellValue((double) (exportApplicationsInfoDate.getCountAppsTotal() -
                                exportApplicationsInfoDatePrevious.getCountAppsTotal()) /
                                (double) exportApplicationsInfoDatePrevious.getCountAppsTotal());
                newRowCommonAllUsd.getCell(28).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsTotalNew() != null &&
                    exportApplicationsInfoDatePrevious.getCountAppsTotalNew() != null) {
                newRowCommonNewUsd.createCell(28)
                        .setCellValue((double) (exportApplicationsInfoDate.getCountAppsTotalNew() -
                                exportApplicationsInfoDatePrevious.getCountAppsTotalNew()) /
                                (double) exportApplicationsInfoDatePrevious.getCountAppsTotalNew());
                newRowCommonNewUsd.getCell(28).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsTotalRepeat() != null &&
                    exportApplicationsInfoDatePrevious.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatUsd.createCell(28)
                        .setCellValue((double) (exportApplicationsInfoDate.getCountAppsTotalRepeat() -
                                exportApplicationsInfoDatePrevious.getCountAppsTotalRepeat()) /
                                (double) exportApplicationsInfoDatePrevious.getCountAppsTotalRepeat());
                newRowCommonRepeatUsd.getCell(28).setCellStyle(stylePercent);
            }

            rowCommon += 1;

            if (mainDailyReportObject.getDateList().size() == a + 1 ||
                    !mainDailyReportObject.getDateList().get(a).getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a + 1).getMonth())) {
                LocalDate monthCommon = null;

                for (int z = 0; z < mainDailyReportObject.getMonthList().size(); z++) {
                    if (mainDailyReportObject.getMonthList().get(z).getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a).getMonth()) &&
                            mainDailyReportObject.getMonthList().get(z).getYear() ==
                                    mainDailyReportObject.getDateList().get(a).getYear()) {
                        monthCommon = mainDailyReportObject.getMonthList().get(z);
                    }
                }

                ExportApplicationsInfoDate exportCommonApplicationsInfoMonth = new ExportApplicationsInfoDate();
                ExportLoansInfoDate exportCommonLoansInfoMonth = new ExportLoansInfoDate();
                ExportProlongationsInfoDate exportCommonProlongationsInfoMonth = new ExportProlongationsInfoDate();
                ExportPaymentsInfoDate exportCommonPaymentsInfoMonth = new ExportPaymentsInfoDate();

                ExportApplicationsInfoDate exportCommonApplicationsInfoMonthPrevious = new ExportApplicationsInfoDate();
                ExportLoansInfoDate exportCommonLoansInfoMonthPrevious = new ExportLoansInfoDate();
                ExportProlongationsInfoDate exportCommonProlongationsInfoMonthPrevious = new ExportProlongationsInfoDate();
                ExportPaymentsInfoDate exportCommonPaymentsInfoMonthPrevious = new ExportPaymentsInfoDate();

                for (int z = 0; z < mainDailyReportObject.getExportApplicationsInfoMonthList().size(); z++) {
                    if (mainDailyReportObject.getExportApplicationsInfoMonthList().get(z).getDate().getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a).getMonth()) &&
                            mainDailyReportObject.getExportApplicationsInfoMonthList().get(z).getDate().getYear() ==
                                    mainDailyReportObject.getDateList().get(a).getYear()) {
                        exportCommonApplicationsInfoMonth =
                                mainDailyReportObject.getExportApplicationsInfoMonthList().get(z);
                    }
                }

                for (int z = 0; z < mainDailyReportObject.getExportLoansInfoMonthList().size(); z++) {
                    if (mainDailyReportObject.getExportLoansInfoMonthList().get(z).getDate().getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a).getMonth()) &&
                            mainDailyReportObject.getExportLoansInfoMonthList().get(z).getDate().getYear() ==
                                    mainDailyReportObject.getDateList().get(a).getYear()) {
                        exportCommonLoansInfoMonth =
                                mainDailyReportObject.getExportLoansInfoMonthList().get(z);
                    }
                }

                for (int z = 0; z < mainDailyReportObject.getExportProlongationsInfoMonthList().size(); z++) {
                    if (mainDailyReportObject.getExportProlongationsInfoMonthList().get(z).getDate().getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a).getMonth()) &&
                            mainDailyReportObject.getExportProlongationsInfoMonthList().get(z).getDate().getYear() ==
                                    mainDailyReportObject.getDateList().get(a).getYear()) {
                        exportCommonProlongationsInfoMonth =
                                mainDailyReportObject.getExportProlongationsInfoMonthList().get(z);
                    }
                }

                for (int z = 0; z < mainDailyReportObject.getExportPaymentsInfoMonthList().size(); z++) {
                    if (mainDailyReportObject.getExportPaymentsInfoMonthList().get(z).getDate().getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a).getMonth()) &&
                            mainDailyReportObject.getExportPaymentsInfoMonthList().get(z).getDate().getYear() ==
                                    mainDailyReportObject.getDateList().get(a).getYear()) {
                        exportCommonPaymentsInfoMonth =
                                mainDailyReportObject.getExportPaymentsInfoMonthList().get(z);
                    }
                }

                if (!mainDailyReportObject.getDateList().get(a).getMonth()
                        .equals(mainDailyReportObject.getDateList().get(0).getMonth())) {

                    for (int z = 0; z < mainDailyReportObject.getExportApplicationsInfoMonthList().size(); z++) {
                        if (mainDailyReportObject.getExportApplicationsInfoMonthList().get(z).getDate().getMonth()
                                .equals(mainDailyReportObject.getDateList().get(a).minusMonths(1).getMonth()) &&
                                mainDailyReportObject.getExportApplicationsInfoMonthList().get(z).getDate().getYear() ==
                                        mainDailyReportObject.getDateList().get(a).minusMonths(1).getYear()) {
                            exportCommonApplicationsInfoMonthPrevious =
                                    mainDailyReportObject.getExportApplicationsInfoMonthList().get(z);
                        }
                    }

                    for (int z = 0; z < mainDailyReportObject.getExportLoansInfoMonthList().size(); z++) {
                        if (mainDailyReportObject.getExportLoansInfoMonthList().get(z).getDate().getMonth()
                                .equals(mainDailyReportObject.getDateList().get(a).minusMonths(1).getMonth()) &&
                                mainDailyReportObject.getExportLoansInfoMonthList().get(z).getDate().getYear() ==
                                        mainDailyReportObject.getDateList().get(a).minusMonths(1).getYear()) {
                            exportCommonLoansInfoMonthPrevious =
                                    mainDailyReportObject.getExportLoansInfoMonthList().get(z);
                        }
                    }

                    for (int z = 0; z < mainDailyReportObject.getExportProlongationsInfoMonthList().size(); z++) {
                        if (mainDailyReportObject.getExportProlongationsInfoMonthList().get(z).getDate().getMonth()
                                .equals(mainDailyReportObject.getDateList().get(a).minusMonths(1).getMonth()) &&
                                mainDailyReportObject.getExportProlongationsInfoMonthList().get(z).getDate().getYear() ==
                                        mainDailyReportObject.getDateList().get(a).minusMonths(1).getYear()) {
                            exportCommonProlongationsInfoMonthPrevious =
                                    mainDailyReportObject.getExportProlongationsInfoMonthList().get(z);
                        }
                    }

                    for (int z = 0; z < mainDailyReportObject.getExportPaymentsInfoMonthList().size(); z++) {
                        if (mainDailyReportObject.getExportPaymentsInfoMonthList().get(z).getDate().getMonth()
                                .equals(mainDailyReportObject.getDateList().get(a).minusMonths(1).getMonth()) &&
                                mainDailyReportObject.getExportPaymentsInfoMonthList().get(z).getDate().getYear() ==
                                        mainDailyReportObject.getDateList().get(a).minusMonths(1).getYear()) {
                            exportCommonPaymentsInfoMonthPrevious =
                                    mainDailyReportObject.getExportPaymentsInfoMonthList().get(z);
                        }
                    }
                }

                rowNumberForGroupLastCommon = rowCommon - 1;

                sheetCommonDailyAllUsd.groupRow(rowNumberForGroupFirstCommon, rowNumberForGroupLastCommon);
                sheetCommonDailyNewUsd.groupRow(rowNumberForGroupFirstCommon, rowNumberForGroupLastCommon);
                sheetCommonDailyRepeatUsd.groupRow(rowNumberForGroupFirstCommon, rowNumberForGroupLastCommon);

                Row newRowCommonTotalMonthAllUsd = sheetCommonDailyAllUsd.createRow(rowCommon);
                Row newRowCommonTotalMonthNewUsd = sheetCommonDailyNewUsd.createRow(rowCommon);
                Row newRowCommonTotalMonthRepeatUsd = sheetCommonDailyRepeatUsd.createRow(rowCommon);

                newRowCommonTotalMonthAllUsd.createCell(0)
                        .setCellValue(monthCommon);
                newRowCommonTotalMonthAllUsd.getCell(0).setCellStyle(styleMonthBold);

                newRowCommonTotalMonthNewUsd.createCell(0)
                        .setCellValue(monthCommon);
                newRowCommonTotalMonthNewUsd.getCell(0).setCellStyle(styleMonthBold);

                newRowCommonTotalMonthRepeatUsd.createCell(0)
                        .setCellValue(monthCommon);
                newRowCommonTotalMonthRepeatUsd.getCell(0).setCellStyle(styleMonthBold);

                if (exportCommonLoansInfoMonth.getCountLoan() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(1)
                            .setCellValue(exportCommonLoansInfoMonth.getCountLoan());
                    newRowCommonTotalMonthAllUsd.getCell(1).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getCountLoanNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(1)
                            .setCellValue(exportCommonLoansInfoMonth.getCountLoanNew());
                    newRowCommonTotalMonthNewUsd.getCell(1).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getCountLoanRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(1)
                            .setCellValue(exportCommonLoansInfoMonth.getCountLoanRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(1).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoan() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(2)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoan() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthAllUsd.getCell(2).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(2)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoanNew() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthNewUsd.getCell(2).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(2)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoanRepeat() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthRepeatUsd.getCell(2).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoan() != null &&
                        exportCommonLoansInfoMonth.getCountLoan() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(3)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoan() /
                                    exportCommonLoansInfoMonth.getCountLoan()) /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthAllUsd.getCell(3).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanNew() != null &&
                        exportCommonLoansInfoMonth.getCountLoanNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(3)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoanNew() /
                                    exportCommonLoansInfoMonth.getCountLoanNew()) /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthNewUsd.getCell(3).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanRepeat() != null &&
                        exportCommonLoansInfoMonth.getCountLoanRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(3)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoanRepeat() /
                                    exportCommonLoansInfoMonth.getCountLoanRepeat()) /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthRepeatUsd.getCell(3).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoan() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoan() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(4)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoan() -
                                    exportCommonLoansInfoMonthPrevious.getAmountLoan()) /
                                    exportCommonLoansInfoMonthPrevious.getAmountLoan());
                    newRowCommonTotalMonthAllUsd.getCell(4).setCellStyle(stylePercentBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanNew() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoanNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(4)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoanNew() -
                                    exportCommonLoansInfoMonthPrevious.getAmountLoanNew()) /
                                    exportCommonLoansInfoMonthPrevious.getAmountLoanNew());
                    newRowCommonTotalMonthNewUsd.getCell(4).setCellStyle(stylePercentBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanRepeat() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(4)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoanRepeat() -
                                    exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat()) /
                                    exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(4).setCellStyle(stylePercentBold);
                }

                if (exportCommonProlongationsInfoMonth.getCountProlonged() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(5)
                            .setCellValue(exportCommonProlongationsInfoMonth.getCountProlonged());
                    newRowCommonTotalMonthAllUsd.getCell(5).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getCountProlongedNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(5)
                            .setCellValue(exportCommonProlongationsInfoMonth.getCountProlongedNew());
                    newRowCommonTotalMonthNewUsd.getCell(5).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getCountProlongedRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(5)
                            .setCellValue(exportCommonProlongationsInfoMonth.getCountProlongedRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(5).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(6)
                            .setCellValue(exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthAllUsd.getCell(6).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(6)
                            .setCellValue(exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthNewUsd.getCell(6).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(6)
                            .setCellValue(exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthRepeatUsd.getCell(6).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() != null &&
                        exportCommonProlongationsInfoMonth.getCountProlonged() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(7)
                            .setCellValue((exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() /
                                    exportCommonProlongationsInfoMonth.getCountProlonged()) /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthAllUsd.getCell(7).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() != null &&
                        exportCommonProlongationsInfoMonth.getCountProlongedNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(7)
                            .setCellValue((exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() /
                                    exportCommonProlongationsInfoMonth.getCountProlongedNew()) /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthNewUsd.getCell(7).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null &&
                        exportCommonProlongationsInfoMonth.getCountProlongedRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(7)
                            .setCellValue((exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() /
                                    exportCommonProlongationsInfoMonth.getCountProlongedRepeat()) /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthRepeatUsd.getCell(7).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() != null &&
                        exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(8)
                            .setCellValue((exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() -
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged()) /
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged());
                    newRowCommonTotalMonthAllUsd.getCell(8).setCellStyle(stylePercentBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() != null &&
                        exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(8)
                            .setCellValue((exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() -
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew()) /
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew());
                    newRowCommonTotalMonthNewUsd.getCell(8).setCellStyle(stylePercentBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null &&
                        exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(8)
                            .setCellValue((exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() -
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat()) /
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(8).setCellStyle(stylePercentBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoan() != null &&
                        exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(9)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoan() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged()) /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthAllUsd.getCell(9).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanNew() != null &&
                        exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(9)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoanNew() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew()) /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthNewUsd.getCell(9).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanRepeat() != null &&
                        exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(9)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoanRepeat() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat()) /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthRepeatUsd.getCell(9).setCellStyle(styleNumberBold);
                }

                if ((exportCommonLoansInfoMonth.getAmountLoan() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoan() != null) &&
                        (exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() != null &&
                                exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged() != null)) {
                    newRowCommonTotalMonthAllUsd.createCell(10)
                            .setCellValue(((exportCommonLoansInfoMonth.getAmountLoan() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged()) -
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoan() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged())) /
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoan() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged()));
                    newRowCommonTotalMonthAllUsd.getCell(10).setCellStyle(stylePercentBold);
                }

                if ((exportCommonLoansInfoMonth.getAmountLoanNew() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoanNew() != null) &&
                        (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() != null &&
                                exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew() != null)) {
                    newRowCommonTotalMonthNewUsd.createCell(10)
                            .setCellValue(((exportCommonLoansInfoMonth.getAmountLoanNew() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew()) -
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoanNew() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew())) /
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoanNew() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew()));
                    newRowCommonTotalMonthNewUsd.getCell(10).setCellStyle(stylePercentBold);
                }

                if ((exportCommonLoansInfoMonth.getAmountLoanRepeat() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat() != null) &&
                        (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null &&
                                exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat() != null)) {
                    newRowCommonTotalMonthRepeatUsd.createCell(10)
                            .setCellValue(((exportCommonLoansInfoMonth.getAmountLoanRepeat() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat()) -
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat())) /
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat()));
                    newRowCommonTotalMonthRepeatUsd.getCell(10).setCellStyle(stylePercentBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotal() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(11)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidTotal() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthAllUsd.getCell(11).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotalNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(11)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidTotalNew() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthNewUsd.getCell(11).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(11)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidTotalRepeat() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthRepeatUsd.getCell(11).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidPrincipal() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(12)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidPrincipal() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthAllUsd.getCell(12).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidPrincipalNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(12)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidPrincipalNew() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthNewUsd.getCell(12).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidPrincipalRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(12)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidPrincipalRepeat() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthRepeatUsd.getCell(12).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidIncome() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(13)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidIncome() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthAllUsd.getCell(13).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidIncomeNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(13)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidIncomeNew() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthNewUsd.getCell(13).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidIncomeRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(13)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidIncomeRepeat() /
                                    mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(monthCommon));
                    newRowCommonTotalMonthRepeatUsd.getCell(13).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotal() != null &&
                        exportCommonPaymentsInfoMonthPrevious.getPaidTotal() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(14)
                            .setCellValue((exportCommonPaymentsInfoMonth.getPaidTotal() -
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotal()) /
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotal());
                    newRowCommonTotalMonthAllUsd.getCell(14).setCellStyle(stylePercentBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotalNew() != null &&
                        exportCommonPaymentsInfoMonthPrevious.getPaidTotalNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(14)
                            .setCellValue((exportCommonPaymentsInfoMonth.getPaidTotalNew() -
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotalNew()) /
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotalNew());
                    newRowCommonTotalMonthNewUsd.getCell(14).setCellStyle(stylePercentBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotalRepeat() != null &&
                        exportCommonPaymentsInfoMonthPrevious.getPaidTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(14)
                            .setCellValue((exportCommonPaymentsInfoMonth.getPaidTotalRepeat() -
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotalRepeat()) /
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotalRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(14).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgress() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(15)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsInProgress());
                    newRowCommonTotalMonthAllUsd.getCell(15).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgressNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(15)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsInProgressNew());
                    newRowCommonTotalMonthNewUsd.getCell(15).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgressRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(15)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsInProgressRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(15).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgress() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(16)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsInProgress() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllUsd.getCell(16).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgressNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(16)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsInProgressNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewUsd.getCell(16).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgressRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(16)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsInProgressRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(16).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystem() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(17)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystem());
                    newRowCommonTotalMonthAllUsd.getCell(17).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(17)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemNew());
                    newRowCommonTotalMonthNewUsd.getCell(17).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(17)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(17).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystem() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(18)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystem() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllUsd.getCell(18).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(18)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewUsd.getCell(18).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(18)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(18).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClient() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(19)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledByClient());
                    newRowCommonTotalMonthAllUsd.getCell(19).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(19)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientNew());
                    newRowCommonTotalMonthNewUsd.getCell(19).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(19)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(19).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClient() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(20)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledByClient() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllUsd.getCell(20).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(20)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewUsd.getCell(20).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(20)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(20).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejected() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(21)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsRejected());
                    newRowCommonTotalMonthAllUsd.getCell(21).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejectedNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(21)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsRejectedNew());
                    newRowCommonTotalMonthNewUsd.getCell(21).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejectedRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(21)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsRejectedRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(21).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejected() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(22)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsRejected() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllUsd.getCell(22).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejectedNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(22)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsRejectedNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewUsd.getCell(22).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejectedRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(22)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsRejectedRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(22).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApproved() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(23)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsWasApproved());
                    newRowCommonTotalMonthAllUsd.getCell(23).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApprovedNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(23)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsWasApprovedNew());
                    newRowCommonTotalMonthNewUsd.getCell(23).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApprovedRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(23)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsWasApprovedRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(23).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApproved() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(24)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsWasApproved() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllUsd.getCell(24).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApprovedNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(24)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsWasApprovedNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewUsd.getCell(24).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApprovedRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(24)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsWasApprovedRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(24).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssued() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(25)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsIssued());
                    newRowCommonTotalMonthAllUsd.getCell(25).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssuedNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(25)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsIssuedNew());
                    newRowCommonTotalMonthNewUsd.getCell(25).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssuedRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(25)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsIssuedRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(25).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssued() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(26)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsIssued() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllUsd.getCell(26).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssuedNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(26)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsIssuedNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewUsd.getCell(26).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssuedRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(26)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsIssuedRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(26).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(27)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllUsd.getCell(27).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(27)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewUsd.getCell(27).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(27)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(27).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotal() != null &&
                        exportCommonApplicationsInfoMonthPrevious.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllUsd.createCell(28)
                            .setCellValue((double) (exportCommonApplicationsInfoMonth.getCountAppsTotal() -
                                    exportCommonApplicationsInfoMonthPrevious.getCountAppsTotal()) /
                                    (double) exportCommonApplicationsInfoMonthPrevious.getCountAppsTotal());
                    newRowCommonTotalMonthAllUsd.getCell(28).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null &&
                        exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewUsd.createCell(28)
                            .setCellValue((double) (exportCommonApplicationsInfoMonth.getCountAppsTotalNew() -
                                    exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalNew()) /
                                    (double) exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewUsd.getCell(28).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null &&
                        exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatUsd.createCell(28)
                            .setCellValue((double) (exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() -
                                    exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalRepeat()) /
                                    (double) exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatUsd.getCell(28).setCellStyle(stylePercentBold);
                }

                rowCommon += 1;
                rowNumberForGroupFirstCommon = rowCommon;

            }
        }

        //rules,Conditions
        SheetConditionalFormatting sheetCommonDailyAllUsdCF = sheetCommonDailyAllUsd.getSheetConditionalFormatting();
        SheetConditionalFormatting sheetCommonDailyNewUsdCF = sheetCommonDailyNewUsd.getSheetConditionalFormatting();
        SheetConditionalFormatting sheetCommonDailyRepeatUsdCF = sheetCommonDailyRepeatUsd.getSheetConditionalFormatting();


        //rule #1 common
        ConditionalFormattingRule ruleSheetCommonDailyAllUsd1 = sheetCommonDailyAllUsdCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.00");
        PatternFormatting pfSheetCommonDailyAllUsd1 = ruleSheetCommonDailyAllUsd1.createPatternFormatting();
        pfSheetCommonDailyAllUsd1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetCommonDailyAllUsd1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyAllUsd1 = new ConditionalFormattingRule[] {ruleSheetCommonDailyAllUsd1};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyAllUsd1 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyAllUsdCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyAllUsd1,
                conditionalFormattingRulesSheetCommonDailyAllUsd1);

        ConditionalFormattingRule ruleSheetCommonDailyNewUsd1 = sheetCommonDailyNewUsdCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.00");
        PatternFormatting pfSheetCommonDailyNewUsd1 = ruleSheetCommonDailyNewUsd1.createPatternFormatting();
        pfSheetCommonDailyNewUsd1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetCommonDailyNewUsd1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyNewUsd1 = new ConditionalFormattingRule[] {ruleSheetCommonDailyNewUsd1};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyNewUsd1 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyNewUsdCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyNewUsd1,
                conditionalFormattingRulesSheetCommonDailyNewUsd1);

        ConditionalFormattingRule ruleSheetCommonDailyRepeatUsd1 = sheetCommonDailyRepeatUsdCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.00");
        PatternFormatting pfSheetCommonDailyRepeatUsd1 = ruleSheetCommonDailyRepeatUsd1.createPatternFormatting();
        pfSheetCommonDailyRepeatUsd1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetCommonDailyRepeatUsd1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyRepeatUsd1 = new ConditionalFormattingRule[] {ruleSheetCommonDailyRepeatUsd1};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyRepeatUsd1 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyRepeatUsdCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyRepeatUsd1,
                conditionalFormattingRulesSheetCommonDailyRepeatUsd1);

        //rule #2 common
        ConditionalFormattingRule ruleSheetCommonDailyAllUsd2 = sheetCommonDailyAllUsdCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.00");
        PatternFormatting pfSheetCommonDailyAllUsd2 = ruleSheetCommonDailyAllUsd2.createPatternFormatting();
        pfSheetCommonDailyAllUsd2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetCommonDailyAllUsd2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyAllUsd2 = new ConditionalFormattingRule[] {ruleSheetCommonDailyAllUsd2};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyAllUsd2 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyAllUsdCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyAllUsd2,
                conditionalFormattingRulesSheetCommonDailyAllUsd2);

        ConditionalFormattingRule ruleSheetCommonDailyNewUsd2 = sheetCommonDailyNewUsdCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.00");
        PatternFormatting pfSheetCommonDailyNewUsd2 = ruleSheetCommonDailyNewUsd2.createPatternFormatting();
        pfSheetCommonDailyNewUsd2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetCommonDailyNewUsd2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyNewUsd2 = new ConditionalFormattingRule[] {ruleSheetCommonDailyNewUsd2};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyNewUsd2 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyNewUsdCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyNewUsd2,
                conditionalFormattingRulesSheetCommonDailyNewUsd2);

        ConditionalFormattingRule ruleSheetCommonDailyRepeatUsd2 = sheetCommonDailyRepeatUsdCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.00");
        PatternFormatting pfSheetCommonDailyRepeatUsd2 = ruleSheetCommonDailyRepeatUsd2.createPatternFormatting();
        pfSheetCommonDailyRepeatUsd2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetCommonDailyRepeatUsd2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyRepeatUsd2 = new ConditionalFormattingRule[] {ruleSheetCommonDailyRepeatUsd2};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyRepeatUsd2 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyRepeatUsdCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyRepeatUsd2,
                conditionalFormattingRulesSheetCommonDailyRepeatUsd2);

        //Sheet. Row and Columns groups, width etc.
        sheetCommonDailyAllUsd.setColumnWidth(0, 12 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(1, 14 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(2, 20 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(3, 17 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(4, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(5, 14 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(6, 20 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(7, 17 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(8, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(9, 20 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(10, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(11, 20 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(12, 20 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(13, 20 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(14, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(15, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(16, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(17, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(18, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(19, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(20, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(21, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(22, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(23, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(24, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(25, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(26, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(27, 11 * 256);
        sheetCommonDailyAllUsd.setColumnWidth(28, 11 * 256);

        sheetCommonDailyNewUsd.setColumnWidth(0, 12 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(1, 14 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(2, 20 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(3, 17 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(4, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(5, 14 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(6, 20 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(7, 17 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(8, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(9, 20 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(10, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(11, 20 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(12, 20 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(13, 20 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(14, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(15, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(16, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(17, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(18, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(19, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(20, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(21, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(22, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(23, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(24, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(25, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(26, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(27, 11 * 256);
        sheetCommonDailyNewUsd.setColumnWidth(28, 11 * 256);

        sheetCommonDailyRepeatUsd.setColumnWidth(0, 12 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(1, 14 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(2, 20 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(3, 17 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(4, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(5, 14 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(6, 20 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(7, 17 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(8, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(9, 20 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(10, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(11, 20 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(12, 20 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(13, 20 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(14, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(15, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(16, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(17, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(18, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(19, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(20, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(21, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(22, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(23, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(24, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(25, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(26, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(27, 11 * 256);
        sheetCommonDailyRepeatUsd.setColumnWidth(28, 11 * 256);

        sheetCommonDailyAllUsd.createFreezePane(1,2);
        sheetCommonDailyNewUsd.createFreezePane(1,2);
        sheetCommonDailyRepeatUsd.createFreezePane(1,2);
    }

    private static void createSheetsDailyInfoInUSDForInfoLoansInfoExpiredReport(Workbook workbook,
                                                                                ExportLoansInfoExpiredInfoReportObject reportObject,
                                                                                CellStyle styleTextHeaders, CellStyle styleDate,
                                                                                CellStyle stylePercent, CellStyle styleNumber,
                                                                                CellStyle styleMonthBold, CellStyle stylePercentBold,
                                                                                CellStyle styleNumberBold) {
        Sheet sheetCommonDailyAll = workbook.createSheet("All clients.USD");
        Sheet sheetCommonDailyNew = workbook.createSheet("New client.USD");
        Sheet sheetCommonDailyRepeat = workbook.createSheet("Repeat client.USD");

        sheetCommonDailyAll.setDisplayGridlines(false);
        sheetCommonDailyNew.setDisplayGridlines(false);
        sheetCommonDailyRepeat.setDisplayGridlines(false);

        int row = 0;

        Row headRowAll = sheetCommonDailyAll.createRow(row);
        Row headRowNew = sheetCommonDailyNew.createRow(row);
        Row headRowRepeat = sheetCommonDailyRepeat.createRow(row);

        Row underHeadRowAll = sheetCommonDailyAll.createRow(row + 1);
        Row underHeadRowNew = sheetCommonDailyNew.createRow(row + 1);
        Row underHeadRowRepeat = sheetCommonDailyRepeat.createRow(row + 1);

        headRowAll.createCell(0).setCellValue("Date");
        headRowAll.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row,row + 1,0,0));

        headRowNew.createCell(0).setCellValue("Date");
        headRowNew.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row,row + 1,0,0));

        headRowRepeat.createCell(0).setCellValue("Date");
        headRowRepeat.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row,row + 1,0,0));

        headRowAll.createCell(1).setCellValue("Issued loans");
        headRowAll.getCell(1).setCellStyle(styleTextHeaders);
        headRowAll.createCell(2).setCellStyle(styleTextHeaders);
        headRowAll.createCell(3).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 1, 3));

        headRowNew.createCell(1).setCellValue("Issued loans");
        headRowNew.getCell(1).setCellStyle(styleTextHeaders);
        headRowNew.createCell(2).setCellStyle(styleTextHeaders);
        headRowNew.createCell(3).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 1, 3));

        headRowRepeat.createCell(1).setCellValue("Issued loans");
        headRowRepeat.getCell(1).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(2).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(3).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 1, 3));

        underHeadRowAll.createCell(1).setCellValue("Count");
        underHeadRowAll.getCell(1).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(2).setCellValue("Amount");
        underHeadRowAll.getCell(2).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(3).setCellValue("Average amount");
        underHeadRowAll.getCell(3).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(1).setCellValue("Count");
        underHeadRowNew.getCell(1).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(2).setCellValue("Amount");
        underHeadRowNew.getCell(2).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(3).setCellValue("Average amount");
        underHeadRowNew.getCell(3).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(1).setCellValue("Count");
        underHeadRowRepeat.getCell(1).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(2).setCellValue("Amount");
        underHeadRowRepeat.getCell(2).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(3).setCellValue("Average amount");
        underHeadRowRepeat.getCell(3).setCellStyle(styleTextHeaders);

        headRowAll.createCell(4).setCellValue("Still active");
        headRowAll.getCell(4).setCellStyle(styleTextHeaders);
        headRowAll.createCell(5).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 4, 5));

        headRowNew.createCell(4).setCellValue("Still active");
        headRowNew.getCell(4).setCellStyle(styleTextHeaders);
        headRowNew.createCell(5).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 4, 5));

        headRowRepeat.createCell(4).setCellValue("Still active");
        headRowRepeat.getCell(4).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(5).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 4, 5));

        underHeadRowAll.createCell(4).setCellValue("Count");
        underHeadRowAll.getCell(4).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(5).setCellValue("%");
        underHeadRowAll.getCell(5).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(4).setCellValue("Count");
        underHeadRowNew.getCell(4).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(5).setCellValue("%");
        underHeadRowNew.getCell(5).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(4).setCellValue("Count");
        underHeadRowRepeat.getCell(4).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(5).setCellValue("%");
        underHeadRowRepeat.getCell(5).setCellStyle(styleTextHeaders);

        headRowAll.createCell(6).setCellValue("2 DPD");
        headRowAll.getCell(6).setCellStyle(styleTextHeaders);
        headRowAll.createCell(7).setCellStyle(styleTextHeaders);
        headRowAll.createCell(8).setCellStyle(styleTextHeaders);
        headRowAll.createCell(9).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 6, 9));

        headRowNew.createCell(6).setCellValue("2 DPD");
        headRowNew.getCell(6).setCellStyle(styleTextHeaders);
        headRowNew.createCell(7).setCellStyle(styleTextHeaders);
        headRowNew.createCell(8).setCellStyle(styleTextHeaders);
        headRowNew.createCell(9).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 6, 9));

        headRowRepeat.createCell(6).setCellValue("2 DPD");
        headRowRepeat.getCell(6).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(7).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(8).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(9).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 6, 9));

        underHeadRowAll.createCell(6).setCellValue("Count");
        underHeadRowAll.getCell(6).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(7).setCellValue("%");
        underHeadRowAll.getCell(7).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(8).setCellValue("Amount");
        underHeadRowAll.getCell(8).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(9).setCellValue("%");
        underHeadRowAll.getCell(9).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(6).setCellValue("Count");
        underHeadRowNew.getCell(6).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(7).setCellValue("%");
        underHeadRowNew.getCell(7).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(8).setCellValue("Amount");
        underHeadRowNew.getCell(8).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(9).setCellValue("%");
        underHeadRowNew.getCell(9).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(6).setCellValue("Count");
        underHeadRowRepeat.getCell(6).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(7).setCellValue("%");
        underHeadRowRepeat.getCell(7).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(8).setCellValue("Amount");
        underHeadRowRepeat.getCell(8).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(9).setCellValue("%");
        underHeadRowRepeat.getCell(9).setCellStyle(styleTextHeaders);


        headRowAll.createCell(10).setCellValue("5 DPD");
        headRowAll.getCell(10).setCellStyle(styleTextHeaders);
        headRowAll.createCell(11).setCellStyle(styleTextHeaders);
        headRowAll.createCell(12).setCellStyle(styleTextHeaders);
        headRowAll.createCell(13).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 10, 13));

        headRowNew.createCell(10).setCellValue("5 DPD");
        headRowNew.getCell(10).setCellStyle(styleTextHeaders);
        headRowNew.createCell(11).setCellStyle(styleTextHeaders);
        headRowNew.createCell(12).setCellStyle(styleTextHeaders);
        headRowNew.createCell(13).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 10, 13));

        headRowRepeat.createCell(10).setCellValue("5 DPD");
        headRowRepeat.getCell(10).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(11).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(12).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(13).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 10, 13));

        underHeadRowAll.createCell(10).setCellValue("Count");
        underHeadRowAll.getCell(10).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(11).setCellValue("%");
        underHeadRowAll.getCell(11).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(12).setCellValue("Amount");
        underHeadRowAll.getCell(12).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(13).setCellValue("%");
        underHeadRowAll.getCell(13).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(10).setCellValue("Count");
        underHeadRowNew.getCell(10).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(11).setCellValue("%");
        underHeadRowNew.getCell(11).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(12).setCellValue("Amount");
        underHeadRowNew.getCell(12).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(13).setCellValue("%");
        underHeadRowNew.getCell(13).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(10).setCellValue("Count");
        underHeadRowRepeat.getCell(10).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(11).setCellValue("%");
        underHeadRowRepeat.getCell(11).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(12).setCellValue("Amount");
        underHeadRowRepeat.getCell(12).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(13).setCellValue("%");
        underHeadRowRepeat.getCell(13).setCellStyle(styleTextHeaders);


        headRowAll.createCell(14).setCellValue("10 DPD");
        headRowAll.getCell(14).setCellStyle(styleTextHeaders);
        headRowAll.createCell(15).setCellStyle(styleTextHeaders);
        headRowAll.createCell(16).setCellStyle(styleTextHeaders);
        headRowAll.createCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 14, 17));

        headRowNew.createCell(14).setCellValue("10 DPD");
        headRowNew.getCell(14).setCellStyle(styleTextHeaders);
        headRowNew.createCell(15).setCellStyle(styleTextHeaders);
        headRowNew.createCell(16).setCellStyle(styleTextHeaders);
        headRowNew.createCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 14, 17));

        headRowRepeat.createCell(14).setCellValue("10 DPD");
        headRowRepeat.getCell(14).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(15).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(16).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 14, 17));

        underHeadRowAll.createCell(14).setCellValue("Count");
        underHeadRowAll.getCell(14).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(15).setCellValue("%");
        underHeadRowAll.getCell(15).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(16).setCellValue("Amount");
        underHeadRowAll.getCell(16).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(17).setCellValue("%");
        underHeadRowAll.getCell(17).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(14).setCellValue("Count");
        underHeadRowNew.getCell(14).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(15).setCellValue("%");
        underHeadRowNew.getCell(15).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(16).setCellValue("Amount");
        underHeadRowNew.getCell(16).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(17).setCellValue("%");
        underHeadRowNew.getCell(17).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(14).setCellValue("Count");
        underHeadRowRepeat.getCell(14).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(15).setCellValue("%");
        underHeadRowRepeat.getCell(15).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(16).setCellValue("Amount");
        underHeadRowRepeat.getCell(16).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(17).setCellValue("%");
        underHeadRowRepeat.getCell(17).setCellStyle(styleTextHeaders);


        headRowAll.createCell(18).setCellValue("15 DPD");
        headRowAll.getCell(18).setCellStyle(styleTextHeaders);
        headRowAll.createCell(19).setCellStyle(styleTextHeaders);
        headRowAll.createCell(20).setCellStyle(styleTextHeaders);
        headRowAll.createCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 18, 21));

        headRowNew.createCell(18).setCellValue("15 DPD");
        headRowNew.getCell(18).setCellStyle(styleTextHeaders);
        headRowNew.createCell(19).setCellStyle(styleTextHeaders);
        headRowNew.createCell(20).setCellStyle(styleTextHeaders);
        headRowNew.createCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 18, 21));

        headRowRepeat.createCell(18).setCellValue("15 DPD");
        headRowRepeat.getCell(18).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(19).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(20).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 18, 21));

        underHeadRowAll.createCell(18).setCellValue("Count");
        underHeadRowAll.getCell(18).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(19).setCellValue("%");
        underHeadRowAll.getCell(19).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(20).setCellValue("Amount");
        underHeadRowAll.getCell(20).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(21).setCellValue("%");
        underHeadRowAll.getCell(21).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(18).setCellValue("Count");
        underHeadRowNew.getCell(18).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(19).setCellValue("%");
        underHeadRowNew.getCell(19).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(20).setCellValue("Amount");
        underHeadRowNew.getCell(20).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(21).setCellValue("%");
        underHeadRowNew.getCell(21).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(18).setCellValue("Count");
        underHeadRowRepeat.getCell(18).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(19).setCellValue("%");
        underHeadRowRepeat.getCell(19).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(20).setCellValue("Amount");
        underHeadRowRepeat.getCell(20).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(21).setCellValue("%");
        underHeadRowRepeat.getCell(21).setCellStyle(styleTextHeaders);


        headRowAll.createCell(22).setCellValue("20 DPD");
        headRowAll.getCell(22).setCellStyle(styleTextHeaders);
        headRowAll.createCell(23).setCellStyle(styleTextHeaders);
        headRowAll.createCell(24).setCellStyle(styleTextHeaders);
        headRowAll.createCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 22, 25));

        headRowNew.createCell(22).setCellValue("20 DPD");
        headRowNew.getCell(22).setCellStyle(styleTextHeaders);
        headRowNew.createCell(23).setCellStyle(styleTextHeaders);
        headRowNew.createCell(24).setCellStyle(styleTextHeaders);
        headRowNew.createCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 22, 25));

        headRowRepeat.createCell(22).setCellValue("20 DPD");
        headRowRepeat.getCell(22).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(23).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(24).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 22, 25));

        underHeadRowAll.createCell(22).setCellValue("Count");
        underHeadRowAll.getCell(22).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(23).setCellValue("%");
        underHeadRowAll.getCell(23).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(24).setCellValue("Amount");
        underHeadRowAll.getCell(24).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(25).setCellValue("%");
        underHeadRowAll.getCell(25).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(22).setCellValue("Count");
        underHeadRowNew.getCell(22).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(23).setCellValue("%");
        underHeadRowNew.getCell(23).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(24).setCellValue("Amount");
        underHeadRowNew.getCell(24).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(25).setCellValue("%");
        underHeadRowNew.getCell(25).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(22).setCellValue("Count");
        underHeadRowRepeat.getCell(22).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(23).setCellValue("%");
        underHeadRowRepeat.getCell(23).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(24).setCellValue("Amount");
        underHeadRowRepeat.getCell(24).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(25).setCellValue("%");
        underHeadRowRepeat.getCell(25).setCellStyle(styleTextHeaders);

        headRowAll.createCell(26).setCellValue("25 DPD");
        headRowAll.getCell(26).setCellStyle(styleTextHeaders);
        headRowAll.createCell(27).setCellStyle(styleTextHeaders);
        headRowAll.createCell(28).setCellStyle(styleTextHeaders);
        headRowAll.createCell(29).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 26, 29));

        headRowNew.createCell(26).setCellValue("25 DPD");
        headRowNew.getCell(26).setCellStyle(styleTextHeaders);
        headRowNew.createCell(27).setCellStyle(styleTextHeaders);
        headRowNew.createCell(28).setCellStyle(styleTextHeaders);
        headRowNew.createCell(29).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 26, 29));

        headRowRepeat.createCell(26).setCellValue("25 DPD");
        headRowRepeat.getCell(26).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(27).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(28).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(29).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 26, 29));

        underHeadRowAll.createCell(26).setCellValue("Count");
        underHeadRowAll.getCell(26).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(27).setCellValue("%");
        underHeadRowAll.getCell(27).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(28).setCellValue("Amount");
        underHeadRowAll.getCell(28).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(29).setCellValue("%");
        underHeadRowAll.getCell(29).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(26).setCellValue("Count");
        underHeadRowNew.getCell(26).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(27).setCellValue("%");
        underHeadRowNew.getCell(27).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(28).setCellValue("Amount");
        underHeadRowNew.getCell(28).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(29).setCellValue("%");
        underHeadRowNew.getCell(29).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(26).setCellValue("Count");
        underHeadRowRepeat.getCell(26).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(27).setCellValue("%");
        underHeadRowRepeat.getCell(27).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(28).setCellValue("Amount");
        underHeadRowRepeat.getCell(28).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(29).setCellValue("%");
        underHeadRowRepeat.getCell(29).setCellStyle(styleTextHeaders);

        headRowAll.createCell(30).setCellValue("30 DPD");
        headRowAll.getCell(30).setCellStyle(styleTextHeaders);
        headRowAll.createCell(31).setCellStyle(styleTextHeaders);
        headRowAll.createCell(32).setCellStyle(styleTextHeaders);
        headRowAll.createCell(33).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 30, 33));

        headRowNew.createCell(30).setCellValue("30 DPD");
        headRowNew.getCell(30).setCellStyle(styleTextHeaders);
        headRowNew.createCell(31).setCellStyle(styleTextHeaders);
        headRowNew.createCell(32).setCellStyle(styleTextHeaders);
        headRowNew.createCell(33).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 30, 33));

        headRowRepeat.createCell(30).setCellValue("30 DPD");
        headRowRepeat.getCell(30).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(31).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(32).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(33).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 30, 33));

        underHeadRowAll.createCell(30).setCellValue("Count");
        underHeadRowAll.getCell(30).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(31).setCellValue("%");
        underHeadRowAll.getCell(31).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(32).setCellValue("Amount");
        underHeadRowAll.getCell(32).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(33).setCellValue("%");
        underHeadRowAll.getCell(33).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(30).setCellValue("Count");
        underHeadRowNew.getCell(30).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(31).setCellValue("%");
        underHeadRowNew.getCell(31).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(32).setCellValue("Amount");
        underHeadRowNew.getCell(32).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(33).setCellValue("%");
        underHeadRowNew.getCell(33).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(30).setCellValue("Count");
        underHeadRowRepeat.getCell(30).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(31).setCellValue("%");
        underHeadRowRepeat.getCell(31).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(32).setCellValue("Amount");
        underHeadRowRepeat.getCell(32).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(33).setCellValue("%");
        underHeadRowRepeat.getCell(33).setCellStyle(styleTextHeaders);

        headRowAll.createCell(34).setCellValue("40 DPD");
        headRowAll.getCell(34).setCellStyle(styleTextHeaders);
        headRowAll.createCell(35).setCellStyle(styleTextHeaders);
        headRowAll.createCell(36).setCellStyle(styleTextHeaders);
        headRowAll.createCell(37).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 34, 37));

        headRowNew.createCell(34).setCellValue("40 DPD");
        headRowNew.getCell(34).setCellStyle(styleTextHeaders);
        headRowNew.createCell(35).setCellStyle(styleTextHeaders);
        headRowNew.createCell(36).setCellStyle(styleTextHeaders);
        headRowNew.createCell(37).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 34, 37));

        headRowRepeat.createCell(34).setCellValue("40 DPD");
        headRowRepeat.getCell(34).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(35).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(36).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(37).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 34, 37));

        underHeadRowAll.createCell(34).setCellValue("Count");
        underHeadRowAll.getCell(34).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(35).setCellValue("%");
        underHeadRowAll.getCell(35).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(36).setCellValue("Amount");
        underHeadRowAll.getCell(36).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(37).setCellValue("%");
        underHeadRowAll.getCell(37).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(34).setCellValue("Count");
        underHeadRowNew.getCell(34).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(35).setCellValue("%");
        underHeadRowNew.getCell(35).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(36).setCellValue("Amount");
        underHeadRowNew.getCell(36).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(37).setCellValue("%");
        underHeadRowNew.getCell(37).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(34).setCellValue("Count");
        underHeadRowRepeat.getCell(34).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(35).setCellValue("%");
        underHeadRowRepeat.getCell(35).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(36).setCellValue("Amount");
        underHeadRowRepeat.getCell(36).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(37).setCellValue("%");
        underHeadRowRepeat.getCell(37).setCellStyle(styleTextHeaders);


        headRowAll.createCell(38).setCellValue("50 DPD");
        headRowAll.getCell(38).setCellStyle(styleTextHeaders);
        headRowAll.createCell(39).setCellStyle(styleTextHeaders);
        headRowAll.createCell(40).setCellStyle(styleTextHeaders);
        headRowAll.createCell(41).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 38, 41));

        headRowNew.createCell(38).setCellValue("50 DPD");
        headRowNew.getCell(38).setCellStyle(styleTextHeaders);
        headRowNew.createCell(39).setCellStyle(styleTextHeaders);
        headRowNew.createCell(40).setCellStyle(styleTextHeaders);
        headRowNew.createCell(41).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 38, 41));

        headRowRepeat.createCell(38).setCellValue("50 DPD");
        headRowRepeat.getCell(38).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(39).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(40).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(41).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 38, 41));

        underHeadRowAll.createCell(38).setCellValue("Count");
        underHeadRowAll.getCell(38).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(39).setCellValue("%");
        underHeadRowAll.getCell(39).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(40).setCellValue("Amount");
        underHeadRowAll.getCell(40).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(41).setCellValue("%");
        underHeadRowAll.getCell(41).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(38).setCellValue("Count");
        underHeadRowNew.getCell(38).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(39).setCellValue("%");
        underHeadRowNew.getCell(39).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(40).setCellValue("Amount");
        underHeadRowNew.getCell(40).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(41).setCellValue("%");
        underHeadRowNew.getCell(41).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(38).setCellValue("Count");
        underHeadRowRepeat.getCell(38).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(39).setCellValue("%");
        underHeadRowRepeat.getCell(39).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(40).setCellValue("Amount");
        underHeadRowRepeat.getCell(40).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(41).setCellValue("%");
        underHeadRowRepeat.getCell(41).setCellStyle(styleTextHeaders);

        headRowAll.createCell(42).setCellValue("60 DPD");
        headRowAll.getCell(42).setCellStyle(styleTextHeaders);
        headRowAll.createCell(43).setCellStyle(styleTextHeaders);
        headRowAll.createCell(44).setCellStyle(styleTextHeaders);
        headRowAll.createCell(45).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 42, 45));

        headRowNew.createCell(42).setCellValue("60 DPD");
        headRowNew.getCell(42).setCellStyle(styleTextHeaders);
        headRowNew.createCell(43).setCellStyle(styleTextHeaders);
        headRowNew.createCell(44).setCellStyle(styleTextHeaders);
        headRowNew.createCell(45).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 42, 45));

        headRowRepeat.createCell(42).setCellValue("60 DPD");
        headRowRepeat.getCell(42).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(43).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(44).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(45).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 42, 45));

        underHeadRowAll.createCell(42).setCellValue("Count");
        underHeadRowAll.getCell(42).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(43).setCellValue("%");
        underHeadRowAll.getCell(43).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(44).setCellValue("Amount");
        underHeadRowAll.getCell(44).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(45).setCellValue("%");
        underHeadRowAll.getCell(45).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(42).setCellValue("Count");
        underHeadRowNew.getCell(42).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(43).setCellValue("%");
        underHeadRowNew.getCell(43).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(44).setCellValue("Amount");
        underHeadRowNew.getCell(44).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(45).setCellValue("%");
        underHeadRowNew.getCell(45).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(42).setCellValue("Count");
        underHeadRowRepeat.getCell(42).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(43).setCellValue("%");
        underHeadRowRepeat.getCell(43).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(44).setCellValue("Amount");
        underHeadRowRepeat.getCell(44).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(45).setCellValue("%");
        underHeadRowRepeat.getCell(45).setCellStyle(styleTextHeaders);

        headRowAll.createCell(46).setCellValue("90 DPD");
        headRowAll.getCell(46).setCellStyle(styleTextHeaders);
        headRowAll.createCell(47).setCellStyle(styleTextHeaders);
        headRowAll.createCell(48).setCellStyle(styleTextHeaders);
        headRowAll.createCell(49).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 46, 49));

        headRowNew.createCell(46).setCellValue("90 DPD");
        headRowNew.getCell(46).setCellStyle(styleTextHeaders);
        headRowNew.createCell(47).setCellStyle(styleTextHeaders);
        headRowNew.createCell(48).setCellStyle(styleTextHeaders);
        headRowNew.createCell(49).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 46, 49));

        headRowRepeat.createCell(46).setCellValue("90 DPD");
        headRowRepeat.getCell(46).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(47).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(48).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(49).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 46, 49));

        underHeadRowAll.createCell(46).setCellValue("Count");
        underHeadRowAll.getCell(46).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(47).setCellValue("%");
        underHeadRowAll.getCell(47).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(48).setCellValue("Amount");
        underHeadRowAll.getCell(48).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(49).setCellValue("%");
        underHeadRowAll.getCell(49).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(46).setCellValue("Count");
        underHeadRowNew.getCell(46).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(47).setCellValue("%");
        underHeadRowNew.getCell(47).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(48).setCellValue("Amount");
        underHeadRowNew.getCell(48).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(49).setCellValue("%");
        underHeadRowNew.getCell(49).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(46).setCellValue("Count");
        underHeadRowRepeat.getCell(46).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(47).setCellValue("%");
        underHeadRowRepeat.getCell(47).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(48).setCellValue("Amount");
        underHeadRowRepeat.getCell(48).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(49).setCellValue("%");
        underHeadRowRepeat.getCell(49).setCellStyle(styleTextHeaders);

        headRowAll.createCell(50).setCellValue("120 DPD");
        headRowAll.getCell(50).setCellStyle(styleTextHeaders);
        headRowAll.createCell(51).setCellStyle(styleTextHeaders);
        headRowAll.createCell(52).setCellStyle(styleTextHeaders);
        headRowAll.createCell(53).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 50, 53));

        headRowNew.createCell(50).setCellValue("120 DPD");
        headRowNew.getCell(50).setCellStyle(styleTextHeaders);
        headRowNew.createCell(51).setCellStyle(styleTextHeaders);
        headRowNew.createCell(52).setCellStyle(styleTextHeaders);
        headRowNew.createCell(53).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 50, 53));

        headRowRepeat.createCell(50).setCellValue("120 DPD");
        headRowRepeat.getCell(50).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(51).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(52).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(53).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 50, 53));

        underHeadRowAll.createCell(50).setCellValue("Count");
        underHeadRowAll.getCell(50).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(51).setCellValue("%");
        underHeadRowAll.getCell(51).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(52).setCellValue("Amount");
        underHeadRowAll.getCell(52).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(53).setCellValue("%");
        underHeadRowAll.getCell(53).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(50).setCellValue("Count");
        underHeadRowNew.getCell(50).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(51).setCellValue("%");
        underHeadRowNew.getCell(51).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(52).setCellValue("Amount");
        underHeadRowNew.getCell(52).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(53).setCellValue("%");
        underHeadRowNew.getCell(53).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(50).setCellValue("Count");
        underHeadRowRepeat.getCell(50).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(51).setCellValue("%");
        underHeadRowRepeat.getCell(51).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(52).setCellValue("Amount");
        underHeadRowRepeat.getCell(52).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(53).setCellValue("%");
        underHeadRowRepeat.getCell(53).setCellStyle(styleTextHeaders);

        headRowAll.createCell(54).setCellValue("150 DPD");
        headRowAll.getCell(54).setCellStyle(styleTextHeaders);
        headRowAll.createCell(55).setCellStyle(styleTextHeaders);
        headRowAll.createCell(56).setCellStyle(styleTextHeaders);
        headRowAll.createCell(57).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 54, 57));

        headRowNew.createCell(54).setCellValue("150 DPD");
        headRowNew.getCell(54).setCellStyle(styleTextHeaders);
        headRowNew.createCell(55).setCellStyle(styleTextHeaders);
        headRowNew.createCell(56).setCellStyle(styleTextHeaders);
        headRowNew.createCell(57).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 54, 57));

        headRowRepeat.createCell(54).setCellValue("150 DPD");
        headRowRepeat.getCell(54).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(55).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(56).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(57).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 54, 57));

        underHeadRowAll.createCell(54).setCellValue("Count");
        underHeadRowAll.getCell(54).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(55).setCellValue("%");
        underHeadRowAll.getCell(55).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(56).setCellValue("Amount");
        underHeadRowAll.getCell(56).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(57).setCellValue("%");
        underHeadRowAll.getCell(57).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(54).setCellValue("Count");
        underHeadRowNew.getCell(54).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(55).setCellValue("%");
        underHeadRowNew.getCell(55).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(56).setCellValue("Amount");
        underHeadRowNew.getCell(56).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(57).setCellValue("%");
        underHeadRowNew.getCell(57).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(54).setCellValue("Count");
        underHeadRowRepeat.getCell(54).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(55).setCellValue("%");
        underHeadRowRepeat.getCell(55).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(56).setCellValue("Amount");
        underHeadRowRepeat.getCell(56).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(57).setCellValue("%");
        underHeadRowRepeat.getCell(57).setCellStyle(styleTextHeaders);

        headRowAll.createCell(58).setCellValue("180 DPD");
        headRowAll.getCell(58).setCellStyle(styleTextHeaders);
        headRowAll.createCell(59).setCellStyle(styleTextHeaders);
        headRowAll.createCell(60).setCellStyle(styleTextHeaders);
        headRowAll.createCell(61).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 58, 61));

        headRowNew.createCell(58).setCellValue("180 DPD");
        headRowNew.getCell(58).setCellStyle(styleTextHeaders);
        headRowNew.createCell(59).setCellStyle(styleTextHeaders);
        headRowNew.createCell(60).setCellStyle(styleTextHeaders);
        headRowNew.createCell(61).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 58, 61));

        headRowRepeat.createCell(58).setCellValue("180 DPD");
        headRowRepeat.getCell(58).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(59).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(60).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(61).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 58, 61));

        underHeadRowAll.createCell(58).setCellValue("Count");
        underHeadRowAll.getCell(58).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(59).setCellValue("%");
        underHeadRowAll.getCell(59).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(60).setCellValue("Amount");
        underHeadRowAll.getCell(60).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(61).setCellValue("%");
        underHeadRowAll.getCell(61).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(58).setCellValue("Count");
        underHeadRowNew.getCell(58).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(59).setCellValue("%");
        underHeadRowNew.getCell(59).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(60).setCellValue("Amount");
        underHeadRowNew.getCell(60).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(61).setCellValue("%");
        underHeadRowNew.getCell(61).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(58).setCellValue("Count");
        underHeadRowRepeat.getCell(58).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(59).setCellValue("%");
        underHeadRowRepeat.getCell(59).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(60).setCellValue("Amount");
        underHeadRowRepeat.getCell(60).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(61).setCellValue("%");
        underHeadRowRepeat.getCell(61).setCellStyle(styleTextHeaders);

        headRowAll.createCell(62).setCellValue("250 DPD");
        headRowAll.getCell(62).setCellStyle(styleTextHeaders);
        headRowAll.createCell(63).setCellStyle(styleTextHeaders);
        headRowAll.createCell(64).setCellStyle(styleTextHeaders);
        headRowAll.createCell(65).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 62, 65));

        headRowNew.createCell(62).setCellValue("250 DPD");
        headRowNew.getCell(62).setCellStyle(styleTextHeaders);
        headRowNew.createCell(63).setCellStyle(styleTextHeaders);
        headRowNew.createCell(64).setCellStyle(styleTextHeaders);
        headRowNew.createCell(65).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 62, 65));

        headRowRepeat.createCell(62).setCellValue("250 DPD");
        headRowRepeat.getCell(62).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(63).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(64).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(65).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 62, 65));

        underHeadRowAll.createCell(62).setCellValue("Count");
        underHeadRowAll.getCell(62).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(63).setCellValue("%");
        underHeadRowAll.getCell(63).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(64).setCellValue("Amount");
        underHeadRowAll.getCell(64).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(65).setCellValue("%");
        underHeadRowAll.getCell(65).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(62).setCellValue("Count");
        underHeadRowNew.getCell(62).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(63).setCellValue("%");
        underHeadRowNew.getCell(63).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(64).setCellValue("Amount");
        underHeadRowNew.getCell(64).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(65).setCellValue("%");
        underHeadRowNew.getCell(65).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(62).setCellValue("Count");
        underHeadRowRepeat.getCell(62).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(63).setCellValue("%");
        underHeadRowRepeat.getCell(63).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(64).setCellValue("Amount");
        underHeadRowRepeat.getCell(64).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(65).setCellValue("%");
        underHeadRowRepeat.getCell(65).setCellStyle(styleTextHeaders);

        headRowAll.createCell(66).setCellValue("300 DPD");
        headRowAll.getCell(66).setCellStyle(styleTextHeaders);
        headRowAll.createCell(67).setCellStyle(styleTextHeaders);
        headRowAll.createCell(68).setCellStyle(styleTextHeaders);
        headRowAll.createCell(69).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 66, 69));

        headRowNew.createCell(66).setCellValue("300 DPD");
        headRowNew.getCell(66).setCellStyle(styleTextHeaders);
        headRowNew.createCell(67).setCellStyle(styleTextHeaders);
        headRowNew.createCell(68).setCellStyle(styleTextHeaders);
        headRowNew.createCell(69).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 66, 69));

        headRowRepeat.createCell(66).setCellValue("300 DPD");
        headRowRepeat.getCell(66).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(67).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(68).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(69).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 66, 69));

        underHeadRowAll.createCell(66).setCellValue("Count");
        underHeadRowAll.getCell(66).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(67).setCellValue("%");
        underHeadRowAll.getCell(67).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(68).setCellValue("Amount");
        underHeadRowAll.getCell(68).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(69).setCellValue("%");
        underHeadRowAll.getCell(69).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(66).setCellValue("Count");
        underHeadRowNew.getCell(66).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(67).setCellValue("%");
        underHeadRowNew.getCell(67).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(68).setCellValue("Amount");
        underHeadRowNew.getCell(68).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(69).setCellValue("%");
        underHeadRowNew.getCell(69).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(66).setCellValue("Count");
        underHeadRowRepeat.getCell(66).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(67).setCellValue("%");
        underHeadRowRepeat.getCell(67).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(68).setCellValue("Amount");
        underHeadRowRepeat.getCell(68).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(69).setCellValue("%");
        underHeadRowRepeat.getCell(69).setCellStyle(styleTextHeaders);

        headRowAll.createCell(70).setCellValue("500 DPD");
        headRowAll.getCell(70).setCellStyle(styleTextHeaders);
        headRowAll.createCell(71).setCellStyle(styleTextHeaders);
        headRowAll.createCell(72).setCellStyle(styleTextHeaders);
        headRowAll.createCell(73).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 70, 73));

        headRowNew.createCell(70).setCellValue("500 DPD");
        headRowNew.getCell(70).setCellStyle(styleTextHeaders);
        headRowNew.createCell(71).setCellStyle(styleTextHeaders);
        headRowNew.createCell(72).setCellStyle(styleTextHeaders);
        headRowNew.createCell(73).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 70, 73));

        headRowRepeat.createCell(70).setCellValue("500 DPD");
        headRowRepeat.getCell(70).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(71).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(72).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(73).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 70, 73));

        underHeadRowAll.createCell(70).setCellValue("Count");
        underHeadRowAll.getCell(70).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(71).setCellValue("%");
        underHeadRowAll.getCell(71).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(72).setCellValue("Amount");
        underHeadRowAll.getCell(72).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(73).setCellValue("%");
        underHeadRowAll.getCell(73).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(70).setCellValue("Count");
        underHeadRowNew.getCell(70).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(71).setCellValue("%");
        underHeadRowNew.getCell(71).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(72).setCellValue("Amount");
        underHeadRowNew.getCell(72).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(73).setCellValue("%");
        underHeadRowNew.getCell(73).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(70).setCellValue("Count");
        underHeadRowRepeat.getCell(70).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(71).setCellValue("%");
        underHeadRowRepeat.getCell(71).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(72).setCellValue("Amount");
        underHeadRowRepeat.getCell(72).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(73).setCellValue("%");
        underHeadRowRepeat.getCell(73).setCellStyle(styleTextHeaders);

        row += 2;
        int rowNumberForGroupFirst = row;
        int rowNumberForGroupLast;

        for (int a = 0; a < reportObject.getDateList().size(); a++) {
            LoanInfoExpiredInfo loanInfoDate = new LoanInfoExpiredInfo();

            for (LoanInfoExpiredInfo loan : reportObject.getLoanInfoDateList()) {
                if (loan.getDate().equals(reportObject.getDateList().get(a))) {
                    loanInfoDate = loan;
                }
            }

            CurrencyRate currencyRateForDate = new CurrencyRate();

            for (CurrencyRate currencyRate : reportObject.getCurrencyRateList()) {
                if (currencyRate.getDate().equals(reportObject.getDateList().get(a))) {
                    currencyRateForDate = currencyRate;
                }
            }

            if (loanInfoDate.getDate() != null && currencyRateForDate.getDate() != null) {
                Row rowCommon = sheetCommonDailyAll.createRow(row);
                Row rowCommonNew = sheetCommonDailyNew.createRow(row);
                Row rowCommonRepeat = sheetCommonDailyRepeat.createRow(row);

                rowCommon.createCell(0).setCellValue(loanInfoDate.getDate());
                rowCommon.getCell(0).setCellStyle(styleDate);

                if (loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(1).setCellValue(loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(1).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(2).setCellValue(loanInfoDate.getTotalIssuedLoanAmount() /
                            currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(2).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalIssuedLoanAmount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(3).setCellValue((loanInfoDate.getTotalIssuedLoanAmount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount()) / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(3).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalActiveLoanCount() != null) {
                    rowCommon.createCell(4).setCellValue(loanInfoDate.getTotalActiveLoanCount());
                    rowCommon.getCell(4).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalActiveLoanCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(5).setCellValue((double) loanInfoDate.getTotalActiveLoanCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(5).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn2DpdCount() != null) {
                    rowCommon.createCell(6).setCellValue(loanInfoDate.getTotalOn2DpdCount());
                    rowCommon.getCell(6).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn2DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(7).setCellValue((double) loanInfoDate.getTotalOn2DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(7).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn2DpdAmount() != null) {
                    rowCommon.createCell(8).setCellValue(loanInfoDate.getTotalOn2DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(8).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn2DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(9).setCellValue(loanInfoDate.getTotalOn2DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(9).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn5DpdCount() != null) {
                    rowCommon.createCell(10).setCellValue(loanInfoDate.getTotalOn5DpdCount());
                    rowCommon.getCell(10).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn5DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(11).setCellValue((double) loanInfoDate.getTotalOn5DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(11).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn5DpdAmount() != null) {
                    rowCommon.createCell(12).setCellValue(loanInfoDate.getTotalOn5DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(12).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn5DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(13).setCellValue(loanInfoDate.getTotalOn5DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(13).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn10DpdCount() != null) {
                    rowCommon.createCell(14).setCellValue(loanInfoDate.getTotalOn10DpdCount());
                    rowCommon.getCell(14).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn10DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(15).setCellValue((double) loanInfoDate.getTotalOn10DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(15).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn10DpdAmount() != null) {
                    rowCommon.createCell(16).setCellValue(loanInfoDate.getTotalOn10DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(16).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn10DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(17).setCellValue(loanInfoDate.getTotalOn10DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(17).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn15DpdCount() != null) {
                    rowCommon.createCell(18).setCellValue(loanInfoDate.getTotalOn15DpdCount());
                    rowCommon.getCell(18).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn15DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(19).setCellValue((double) loanInfoDate.getTotalOn15DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(19).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn15DpdAmount() != null) {
                    rowCommon.createCell(20).setCellValue(loanInfoDate.getTotalOn15DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(20).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn15DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(21).setCellValue(loanInfoDate.getTotalOn15DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(21).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn20DpdCount() != null) {
                    rowCommon.createCell(22).setCellValue(loanInfoDate.getTotalOn20DpdCount());
                    rowCommon.getCell(22).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn20DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(23).setCellValue((double) loanInfoDate.getTotalOn20DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(23).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn20DpdAmount() != null) {
                    rowCommon.createCell(24).setCellValue(loanInfoDate.getTotalOn20DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(24).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn20DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(25).setCellValue(loanInfoDate.getTotalOn20DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(25).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn25DpdCount() != null) {
                    rowCommon.createCell(26).setCellValue(loanInfoDate.getTotalOn25DpdCount());
                    rowCommon.getCell(26).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn25DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(27).setCellValue((double) loanInfoDate.getTotalOn25DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(27).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn25DpdAmount() != null) {
                    rowCommon.createCell(28).setCellValue(loanInfoDate.getTotalOn25DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(28).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn25DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(29).setCellValue(loanInfoDate.getTotalOn25DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(29).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn30DpdCount() != null) {
                    rowCommon.createCell(30).setCellValue(loanInfoDate.getTotalOn30DpdCount());
                    rowCommon.getCell(30).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn30DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(31).setCellValue((double) loanInfoDate.getTotalOn30DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(31).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn30DpdAmount() != null) {
                    rowCommon.createCell(32).setCellValue(loanInfoDate.getTotalOn30DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(32).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn30DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(33).setCellValue(loanInfoDate.getTotalOn30DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(33).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn40DpdCount() != null) {
                    rowCommon.createCell(34).setCellValue(loanInfoDate.getTotalOn40DpdCount());
                    rowCommon.getCell(34).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn40DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(35).setCellValue((double) loanInfoDate.getTotalOn40DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(35).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn40DpdAmount() != null) {
                    rowCommon.createCell(36).setCellValue(loanInfoDate.getTotalOn40DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(36).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn40DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(37).setCellValue(loanInfoDate.getTotalOn40DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(37).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn50DpdCount() != null) {
                    rowCommon.createCell(38).setCellValue(loanInfoDate.getTotalOn50DpdCount());
                    rowCommon.getCell(38).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn50DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(39).setCellValue((double) loanInfoDate.getTotalOn50DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(39).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn50DpdAmount() != null) {
                    rowCommon.createCell(40).setCellValue(loanInfoDate.getTotalOn50DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(40).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn50DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(41).setCellValue(loanInfoDate.getTotalOn50DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(41).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn60DpdCount() != null) {
                    rowCommon.createCell(42).setCellValue(loanInfoDate.getTotalOn60DpdCount());
                    rowCommon.getCell(42).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn60DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(43).setCellValue((double) loanInfoDate.getTotalOn60DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(43).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn60DpdAmount() != null) {
                    rowCommon.createCell(44).setCellValue(loanInfoDate.getTotalOn60DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(44).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn60DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(45).setCellValue(loanInfoDate.getTotalOn60DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(45).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn90DpdCount() != null) {
                    rowCommon.createCell(46).setCellValue(loanInfoDate.getTotalOn90DpdCount());
                    rowCommon.getCell(46).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn90DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(47).setCellValue((double) loanInfoDate.getTotalOn90DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(47).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn90DpdAmount() != null) {
                    rowCommon.createCell(48).setCellValue(loanInfoDate.getTotalOn90DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(48).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn90DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(49).setCellValue(loanInfoDate.getTotalOn90DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(49).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn120DpdCount() != null) {
                    rowCommon.createCell(50).setCellValue(loanInfoDate.getTotalOn120DpdCount());
                    rowCommon.getCell(50).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn120DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(51).setCellValue((double) loanInfoDate.getTotalOn120DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(51).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn120DpdAmount() != null) {
                    rowCommon.createCell(52).setCellValue(loanInfoDate.getTotalOn120DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(52).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn120DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(53).setCellValue(loanInfoDate.getTotalOn120DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(53).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn150DpdCount() != null) {
                    rowCommon.createCell(54).setCellValue(loanInfoDate.getTotalOn150DpdCount());
                    rowCommon.getCell(54).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn150DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(55).setCellValue((double) loanInfoDate.getTotalOn150DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(55).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn150DpdAmount() != null) {
                    rowCommon.createCell(56).setCellValue(loanInfoDate.getTotalOn150DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(56).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn150DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(57).setCellValue(loanInfoDate.getTotalOn150DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(57).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn180DpdCount() != null) {
                    rowCommon.createCell(58).setCellValue(loanInfoDate.getTotalOn180DpdCount());
                    rowCommon.getCell(58).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn180DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(59).setCellValue((double) loanInfoDate.getTotalOn180DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(59).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn180DpdAmount() != null) {
                    rowCommon.createCell(60).setCellValue(loanInfoDate.getTotalOn180DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(60).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn180DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(61).setCellValue(loanInfoDate.getTotalOn180DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(61).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn250DpdCount() != null) {
                    rowCommon.createCell(62).setCellValue(loanInfoDate.getTotalOn250DpdCount());
                    rowCommon.getCell(62).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn250DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(63).setCellValue((double) loanInfoDate.getTotalOn250DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(63).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn250DpdAmount() != null) {
                    rowCommon.createCell(64).setCellValue(loanInfoDate.getTotalOn250DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(64).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn250DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(65).setCellValue(loanInfoDate.getTotalOn250DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(65).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn300DpdCount() != null) {
                    rowCommon.createCell(66).setCellValue(loanInfoDate.getTotalOn300DpdCount());
                    rowCommon.getCell(66).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn300DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(67).setCellValue((double) loanInfoDate.getTotalOn300DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(67).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn300DpdAmount() != null) {
                    rowCommon.createCell(68).setCellValue(loanInfoDate.getTotalOn300DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(68).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn300DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(69).setCellValue(loanInfoDate.getTotalOn300DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(69).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn500DpdCount() != null) {
                    rowCommon.createCell(70).setCellValue(loanInfoDate.getTotalOn500DpdCount());
                    rowCommon.getCell(70).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn500DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(71).setCellValue((double) loanInfoDate.getTotalOn500DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(71).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn500DpdAmount() != null) {
                    rowCommon.createCell(72).setCellValue(loanInfoDate.getTotalOn500DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommon.getCell(72).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn500DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(73).setCellValue(loanInfoDate.getTotalOn500DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(73).setCellStyle(stylePercent);
                }

                rowCommonNew.createCell(0).setCellValue(loanInfoDate.getDate());
                rowCommonNew.getCell(0).setCellStyle(styleDate);

                if (loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(1).setCellValue(loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(1).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(2).setCellValue(loanInfoDate.getPotentialIssuedLoanAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(2).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialIssuedLoanAmount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(3).setCellValue((loanInfoDate.getPotentialIssuedLoanAmount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount()) / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(3).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialActiveLoanCount() != null) {
                    rowCommonNew.createCell(4).setCellValue(loanInfoDate.getPotentialActiveLoanCount());
                    rowCommonNew.getCell(4).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialActiveLoanCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(5).setCellValue((double) loanInfoDate.getPotentialActiveLoanCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(5).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn2DpdCount() != null) {
                    rowCommonNew.createCell(6).setCellValue(loanInfoDate.getPotentialOn2DpdCount());
                    rowCommonNew.getCell(6).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn2DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(7).setCellValue((double) loanInfoDate.getPotentialOn2DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(7).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn2DpdAmount() != null) {
                    rowCommonNew.createCell(8).setCellValue(loanInfoDate.getPotentialOn2DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(8).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn2DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(9).setCellValue(loanInfoDate.getPotentialOn2DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(9).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn5DpdCount() != null) {
                    rowCommonNew.createCell(10).setCellValue(loanInfoDate.getPotentialOn5DpdCount());
                    rowCommonNew.getCell(10).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn5DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(11).setCellValue((double) loanInfoDate.getPotentialOn5DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(11).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn5DpdAmount() != null) {
                    rowCommonNew.createCell(12).setCellValue(loanInfoDate.getPotentialOn5DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(12).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn5DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(13).setCellValue(loanInfoDate.getPotentialOn5DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(13).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn10DpdCount() != null) {
                    rowCommonNew.createCell(14).setCellValue(loanInfoDate.getPotentialOn10DpdCount());
                    rowCommonNew.getCell(14).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn10DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(15).setCellValue((double) loanInfoDate.getPotentialOn10DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(15).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn10DpdAmount() != null) {
                    rowCommonNew.createCell(16).setCellValue(loanInfoDate.getPotentialOn10DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(16).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn10DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(17).setCellValue(loanInfoDate.getPotentialOn10DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(17).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn15DpdCount() != null) {
                    rowCommonNew.createCell(18).setCellValue(loanInfoDate.getPotentialOn15DpdCount());
                    rowCommonNew.getCell(18).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn15DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(19).setCellValue((double) loanInfoDate.getPotentialOn15DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(19).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn15DpdAmount() != null) {
                    rowCommonNew.createCell(20).setCellValue(loanInfoDate.getPotentialOn15DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(20).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn15DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(21).setCellValue(loanInfoDate.getPotentialOn15DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(21).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn20DpdCount() != null) {
                    rowCommonNew.createCell(22).setCellValue(loanInfoDate.getPotentialOn20DpdCount());
                    rowCommonNew.getCell(22).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn20DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(23).setCellValue((double) loanInfoDate.getPotentialOn20DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(23).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn20DpdAmount() != null) {
                    rowCommonNew.createCell(24).setCellValue(loanInfoDate.getPotentialOn20DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(24).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn20DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(25).setCellValue(loanInfoDate.getPotentialOn20DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(25).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn25DpdCount() != null) {
                    rowCommonNew.createCell(26).setCellValue(loanInfoDate.getPotentialOn25DpdCount());
                    rowCommonNew.getCell(26).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn25DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(27).setCellValue((double) loanInfoDate.getPotentialOn25DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(27).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn25DpdAmount() != null) {
                    rowCommonNew.createCell(28).setCellValue(loanInfoDate.getPotentialOn25DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(28).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn25DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(29).setCellValue(loanInfoDate.getPotentialOn25DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(29).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn30DpdCount() != null) {
                    rowCommonNew.createCell(30).setCellValue(loanInfoDate.getPotentialOn30DpdCount());
                    rowCommonNew.getCell(30).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn30DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(31).setCellValue((double) loanInfoDate.getPotentialOn30DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(31).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn30DpdAmount() != null) {
                    rowCommonNew.createCell(32).setCellValue(loanInfoDate.getPotentialOn30DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(32).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn30DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(33).setCellValue(loanInfoDate.getPotentialOn30DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(33).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn40DpdCount() != null) {
                    rowCommonNew.createCell(34).setCellValue(loanInfoDate.getPotentialOn40DpdCount());
                    rowCommonNew.getCell(34).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn40DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(35).setCellValue((double) loanInfoDate.getPotentialOn40DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(35).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn40DpdAmount() != null) {
                    rowCommonNew.createCell(36).setCellValue(loanInfoDate.getPotentialOn40DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(36).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn40DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(37).setCellValue(loanInfoDate.getPotentialOn40DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(37).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn50DpdCount() != null) {
                    rowCommonNew.createCell(38).setCellValue(loanInfoDate.getPotentialOn50DpdCount());
                    rowCommonNew.getCell(38).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn50DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(39).setCellValue((double) loanInfoDate.getPotentialOn50DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(39).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn50DpdAmount() != null) {
                    rowCommonNew.createCell(40).setCellValue(loanInfoDate.getPotentialOn50DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(40).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn50DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(41).setCellValue(loanInfoDate.getPotentialOn50DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(41).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn60DpdCount() != null) {
                    rowCommonNew.createCell(42).setCellValue(loanInfoDate.getPotentialOn60DpdCount());
                    rowCommonNew.getCell(42).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn60DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(43).setCellValue((double) loanInfoDate.getPotentialOn60DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(43).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn60DpdAmount() != null) {
                    rowCommonNew.createCell(44).setCellValue(loanInfoDate.getPotentialOn60DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(44).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn60DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(45).setCellValue(loanInfoDate.getPotentialOn60DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(45).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn90DpdCount() != null) {
                    rowCommonNew.createCell(46).setCellValue(loanInfoDate.getPotentialOn90DpdCount());
                    rowCommonNew.getCell(46).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn90DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(47).setCellValue((double) loanInfoDate.getPotentialOn90DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(47).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn90DpdAmount() != null) {
                    rowCommonNew.createCell(48).setCellValue(loanInfoDate.getPotentialOn90DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(48).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn90DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(49).setCellValue(loanInfoDate.getPotentialOn90DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(49).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn120DpdCount() != null) {
                    rowCommonNew.createCell(50).setCellValue(loanInfoDate.getPotentialOn120DpdCount());
                    rowCommonNew.getCell(50).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn120DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(51).setCellValue((double) loanInfoDate.getPotentialOn120DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(51).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn120DpdAmount() != null) {
                    rowCommonNew.createCell(52).setCellValue(loanInfoDate.getPotentialOn120DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(52).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn120DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(53).setCellValue(loanInfoDate.getPotentialOn120DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(53).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn150DpdCount() != null) {
                    rowCommonNew.createCell(54).setCellValue(loanInfoDate.getPotentialOn150DpdCount());
                    rowCommonNew.getCell(54).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn150DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(55).setCellValue((double) loanInfoDate.getPotentialOn150DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(55).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn150DpdAmount() != null) {
                    rowCommonNew.createCell(56).setCellValue(loanInfoDate.getPotentialOn150DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(56).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn150DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(57).setCellValue(loanInfoDate.getPotentialOn150DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(57).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn180DpdCount() != null) {
                    rowCommonNew.createCell(58).setCellValue(loanInfoDate.getPotentialOn180DpdCount());
                    rowCommonNew.getCell(58).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn180DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(59).setCellValue((double) loanInfoDate.getPotentialOn180DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(59).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn180DpdAmount() != null) {
                    rowCommonNew.createCell(60).setCellValue(loanInfoDate.getPotentialOn180DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(60).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn180DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(61).setCellValue(loanInfoDate.getPotentialOn180DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(61).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn250DpdCount() != null) {
                    rowCommonNew.createCell(62).setCellValue(loanInfoDate.getPotentialOn250DpdCount());
                    rowCommonNew.getCell(62).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn250DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(63).setCellValue((double) loanInfoDate.getPotentialOn250DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(63).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn250DpdAmount() != null) {
                    rowCommonNew.createCell(64).setCellValue(loanInfoDate.getPotentialOn250DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(64).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn250DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(65).setCellValue(loanInfoDate.getPotentialOn250DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(65).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn300DpdCount() != null) {
                    rowCommonNew.createCell(66).setCellValue(loanInfoDate.getPotentialOn300DpdCount());
                    rowCommonNew.getCell(66).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn300DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(67).setCellValue((double) loanInfoDate.getPotentialOn300DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(67).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn300DpdAmount() != null) {
                    rowCommonNew.createCell(68).setCellValue(loanInfoDate.getPotentialOn300DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(68).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn300DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(69).setCellValue(loanInfoDate.getPotentialOn300DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(69).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn500DpdCount() != null) {
                    rowCommonNew.createCell(70).setCellValue(loanInfoDate.getPotentialOn500DpdCount());
                    rowCommonNew.getCell(70).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn500DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(71).setCellValue((double) loanInfoDate.getPotentialOn500DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(71).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn500DpdAmount() != null) {
                    rowCommonNew.createCell(72).setCellValue(loanInfoDate.getPotentialOn500DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonNew.getCell(72).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn500DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(73).setCellValue(loanInfoDate.getPotentialOn500DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(73).setCellStyle(stylePercent);
                }

                rowCommonRepeat.createCell(0).setCellValue(loanInfoDate.getDate());
                rowCommonRepeat.getCell(0).setCellStyle(styleDate);

                if (loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(1).setCellValue(loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(1).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(2).setCellValue(loanInfoDate.getRepeatIssuedLoanAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(2).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatIssuedLoanAmount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(3).setCellValue((loanInfoDate.getRepeatIssuedLoanAmount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount()) / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(3).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatActiveLoanCount() != null) {
                    rowCommonRepeat.createCell(4).setCellValue(loanInfoDate.getRepeatActiveLoanCount());
                    rowCommonRepeat.getCell(4).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatActiveLoanCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(5).setCellValue((double) loanInfoDate.getRepeatActiveLoanCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(5).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn2DpdCount() != null) {
                    rowCommonRepeat.createCell(6).setCellValue(loanInfoDate.getRepeatOn2DpdCount());
                    rowCommonRepeat.getCell(6).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn2DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(7).setCellValue((double) loanInfoDate.getRepeatOn2DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(7).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn2DpdAmount() != null) {
                    rowCommonRepeat.createCell(8).setCellValue(loanInfoDate.getRepeatOn2DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(8).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn2DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(9).setCellValue(loanInfoDate.getRepeatOn2DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(9).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn5DpdCount() != null) {
                    rowCommonRepeat.createCell(10).setCellValue(loanInfoDate.getRepeatOn5DpdCount());
                    rowCommonRepeat.getCell(10).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn5DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(11).setCellValue((double) loanInfoDate.getRepeatOn5DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(11).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn5DpdAmount() != null) {
                    rowCommonRepeat.createCell(12).setCellValue(loanInfoDate.getRepeatOn5DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(12).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn5DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(13).setCellValue(loanInfoDate.getRepeatOn5DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(13).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn10DpdCount() != null) {
                    rowCommonRepeat.createCell(14).setCellValue(loanInfoDate.getRepeatOn10DpdCount());
                    rowCommonRepeat.getCell(14).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn10DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(15).setCellValue((double) loanInfoDate.getRepeatOn10DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(15).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn10DpdAmount() != null) {
                    rowCommonRepeat.createCell(16).setCellValue(loanInfoDate.getRepeatOn10DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(16).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn10DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(17).setCellValue(loanInfoDate.getRepeatOn10DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(17).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn15DpdCount() != null) {
                    rowCommonRepeat.createCell(18).setCellValue(loanInfoDate.getRepeatOn15DpdCount());
                    rowCommonRepeat.getCell(18).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn15DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(19).setCellValue((double) loanInfoDate.getRepeatOn15DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(19).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn15DpdAmount() != null) {
                    rowCommonRepeat.createCell(20).setCellValue(loanInfoDate.getRepeatOn15DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(20).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn15DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(21).setCellValue(loanInfoDate.getRepeatOn15DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(21).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn20DpdCount() != null) {
                    rowCommonRepeat.createCell(22).setCellValue(loanInfoDate.getRepeatOn20DpdCount());
                    rowCommonRepeat.getCell(22).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn20DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(23).setCellValue((double) loanInfoDate.getRepeatOn20DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(23).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn20DpdAmount() != null) {
                    rowCommonRepeat.createCell(24).setCellValue(loanInfoDate.getRepeatOn20DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(24).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn20DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(25).setCellValue(loanInfoDate.getRepeatOn20DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(25).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn25DpdCount() != null) {
                    rowCommonRepeat.createCell(26).setCellValue(loanInfoDate.getRepeatOn25DpdCount());
                    rowCommonRepeat.getCell(26).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn25DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(27).setCellValue((double) loanInfoDate.getRepeatOn25DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(27).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn25DpdAmount() != null) {
                    rowCommonRepeat.createCell(28).setCellValue(loanInfoDate.getRepeatOn25DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(28).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn25DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(29).setCellValue(loanInfoDate.getRepeatOn25DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(29).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn30DpdCount() != null) {
                    rowCommonRepeat.createCell(30).setCellValue(loanInfoDate.getRepeatOn30DpdCount());
                    rowCommonRepeat.getCell(30).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn30DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(31).setCellValue((double) loanInfoDate.getRepeatOn30DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(31).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn30DpdAmount() != null) {
                    rowCommonRepeat.createCell(32).setCellValue(loanInfoDate.getRepeatOn30DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(32).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn30DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(33).setCellValue(loanInfoDate.getRepeatOn30DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(33).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn40DpdCount() != null) {
                    rowCommonRepeat.createCell(34).setCellValue(loanInfoDate.getRepeatOn40DpdCount());
                    rowCommonRepeat.getCell(34).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn40DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(35).setCellValue((double) loanInfoDate.getRepeatOn40DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(35).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn40DpdAmount() != null) {
                    rowCommonRepeat.createCell(36).setCellValue(loanInfoDate.getRepeatOn40DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(36).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn40DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(37).setCellValue(loanInfoDate.getRepeatOn40DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(37).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn50DpdCount() != null) {
                    rowCommonRepeat.createCell(38).setCellValue(loanInfoDate.getRepeatOn50DpdCount());
                    rowCommonRepeat.getCell(38).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn50DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(39).setCellValue((double) loanInfoDate.getRepeatOn50DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(39).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn50DpdAmount() != null) {
                    rowCommonRepeat.createCell(40).setCellValue(loanInfoDate.getRepeatOn50DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(40).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn50DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(41).setCellValue(loanInfoDate.getRepeatOn50DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(41).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn60DpdCount() != null) {
                    rowCommonRepeat.createCell(42).setCellValue(loanInfoDate.getRepeatOn60DpdCount());
                    rowCommonRepeat.getCell(42).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn60DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(43).setCellValue((double) loanInfoDate.getRepeatOn60DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(43).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn60DpdAmount() != null) {
                    rowCommonRepeat.createCell(44).setCellValue(loanInfoDate.getRepeatOn60DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(44).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn60DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(45).setCellValue(loanInfoDate.getRepeatOn60DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(45).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn90DpdCount() != null) {
                    rowCommonRepeat.createCell(46).setCellValue(loanInfoDate.getRepeatOn90DpdCount());
                    rowCommonRepeat.getCell(46).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn90DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(47).setCellValue((double) loanInfoDate.getRepeatOn90DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(47).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn90DpdAmount() != null) {
                    rowCommonRepeat.createCell(48).setCellValue(loanInfoDate.getRepeatOn90DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(48).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn90DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(49).setCellValue(loanInfoDate.getRepeatOn90DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(49).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn120DpdCount() != null) {
                    rowCommonRepeat.createCell(50).setCellValue(loanInfoDate.getRepeatOn120DpdCount());
                    rowCommonRepeat.getCell(50).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn120DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(51).setCellValue((double) loanInfoDate.getRepeatOn120DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(51).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn120DpdAmount() != null) {
                    rowCommonRepeat.createCell(52).setCellValue(loanInfoDate.getRepeatOn120DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(52).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn120DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(53).setCellValue(loanInfoDate.getRepeatOn120DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(53).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn150DpdCount() != null) {
                    rowCommonRepeat.createCell(54).setCellValue(loanInfoDate.getRepeatOn150DpdCount());
                    rowCommonRepeat.getCell(54).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn150DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(55).setCellValue((double) loanInfoDate.getRepeatOn150DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(55).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn150DpdAmount() != null) {
                    rowCommonRepeat.createCell(56).setCellValue(loanInfoDate.getRepeatOn150DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(56).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn150DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(57).setCellValue(loanInfoDate.getRepeatOn150DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(57).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn180DpdCount() != null) {
                    rowCommonRepeat.createCell(58).setCellValue(loanInfoDate.getRepeatOn180DpdCount());
                    rowCommonRepeat.getCell(58).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn180DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(59).setCellValue((double) loanInfoDate.getRepeatOn180DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(59).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn180DpdAmount() != null) {
                    rowCommonRepeat.createCell(60).setCellValue(loanInfoDate.getRepeatOn180DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(60).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn180DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(61).setCellValue(loanInfoDate.getRepeatOn180DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(61).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn250DpdCount() != null) {
                    rowCommonRepeat.createCell(62).setCellValue(loanInfoDate.getRepeatOn250DpdCount());
                    rowCommonRepeat.getCell(62).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn250DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(63).setCellValue((double) loanInfoDate.getRepeatOn250DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(63).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn250DpdAmount() != null) {
                    rowCommonRepeat.createCell(64).setCellValue(loanInfoDate.getRepeatOn250DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(64).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn250DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(65).setCellValue(loanInfoDate.getRepeatOn250DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(65).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn300DpdCount() != null) {
                    rowCommonRepeat.createCell(66).setCellValue(loanInfoDate.getRepeatOn300DpdCount());
                    rowCommonRepeat.getCell(66).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn300DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(67).setCellValue((double) loanInfoDate.getRepeatOn300DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(67).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn300DpdAmount() != null) {
                    rowCommonRepeat.createCell(68).setCellValue(loanInfoDate.getRepeatOn300DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(68).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn300DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(69).setCellValue(loanInfoDate.getRepeatOn300DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(69).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn500DpdCount() != null) {
                    rowCommonRepeat.createCell(70).setCellValue(loanInfoDate.getRepeatOn500DpdCount());
                    rowCommonRepeat.getCell(70).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn500DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(71).setCellValue((double) loanInfoDate.getRepeatOn500DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(71).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn500DpdAmount() != null) {
                    rowCommonRepeat.createCell(72).setCellValue(loanInfoDate.getRepeatOn500DpdAmount() / currencyRateForDate.getUsdVnd());
                    rowCommonRepeat.getCell(72).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn500DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(73).setCellValue(loanInfoDate.getRepeatOn500DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(73).setCellStyle(stylePercent);
                }


                row++;

                if (reportObject.getDateList().size() == a + 1 ||
                        !reportObject.getDateList().get(a).getMonth()
                                .equals(reportObject.getDateList().get(a + 1).getMonth())) {
                    LocalDate month = null;

                    for (LocalDate monthDate : reportObject.getMonthList()) {
                        if (monthDate.getMonth().equals(reportObject.getDateList().get(a).getMonth()) &&
                                monthDate.getYear() == reportObject.getDateList().get(a).getYear()) {
                            month = monthDate;
                        }
                    }

                    LoanInfoExpiredInfo loanInfoMonth = new LoanInfoExpiredInfo();
                    Double currencyRateForMonth = reportObject.getMapMonthAndAverageCurrencyRateUsdVnd().get(month);

                    for (LoanInfoExpiredInfo loanInfo : reportObject.getLoanInfoMonthList()) {
                        if (loanInfo.getDate().equals(month)) {
                            loanInfoMonth = loanInfo;
                        }
                    }

                    if (loanInfoMonth.getDate() != null) {
                        rowNumberForGroupLast = row - 1;
                        sheetCommonDailyAll.groupRow(rowNumberForGroupFirst, rowNumberForGroupLast);
                        sheetCommonDailyNew.groupRow(rowNumberForGroupFirst, rowNumberForGroupLast);
                        sheetCommonDailyRepeat.groupRow(rowNumberForGroupFirst, rowNumberForGroupLast);

                        Row rowCommonMonth = sheetCommonDailyAll.createRow(row);
                        Row rowCommonMonthNew = sheetCommonDailyNew.createRow(row);
                        Row rowCommonMonthRepeat = sheetCommonDailyRepeat.createRow(row);

                        rowCommonMonth.createCell(0).setCellValue(loanInfoMonth.getDate());
                        rowCommonMonth.getCell(0).setCellStyle(styleMonthBold);
                        if (loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(1).setCellValue(loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(1).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(2).setCellValue(loanInfoMonth.getTotalIssuedLoanAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(2).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalIssuedLoanAmount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(3).setCellValue((loanInfoMonth.getTotalIssuedLoanAmount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount()) / currencyRateForMonth);
                            rowCommonMonth.getCell(3).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalActiveLoanCount() != null) {
                            rowCommonMonth.createCell(4).setCellValue(loanInfoMonth.getTotalActiveLoanCount());
                            rowCommonMonth.getCell(4).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalActiveLoanCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(5).setCellValue((double) loanInfoMonth.getTotalActiveLoanCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(5).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn2DpdCount() != null) {
                            rowCommonMonth.createCell(6).setCellValue(loanInfoMonth.getTotalOn2DpdCount());
                            rowCommonMonth.getCell(6).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn2DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(7).setCellValue((double) loanInfoMonth.getTotalOn2DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(7).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn2DpdAmount() != null) {
                            rowCommonMonth.createCell(8).setCellValue(loanInfoMonth.getTotalOn2DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(8).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn2DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(9).setCellValue(loanInfoMonth.getTotalOn2DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(9).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn5DpdCount() != null) {
                            rowCommonMonth.createCell(10).setCellValue(loanInfoMonth.getTotalOn5DpdCount());
                            rowCommonMonth.getCell(10).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn5DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(11).setCellValue((double) loanInfoMonth.getTotalOn5DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(11).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn5DpdAmount() != null) {
                            rowCommonMonth.createCell(12).setCellValue(loanInfoMonth.getTotalOn5DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(12).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn5DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(13).setCellValue(loanInfoMonth.getTotalOn5DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(13).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn10DpdCount() != null) {
                            rowCommonMonth.createCell(14).setCellValue(loanInfoMonth.getTotalOn10DpdCount());
                            rowCommonMonth.getCell(14).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn10DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(15).setCellValue((double) loanInfoMonth.getTotalOn10DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(15).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn10DpdAmount() != null) {
                            rowCommonMonth.createCell(16).setCellValue(loanInfoMonth.getTotalOn10DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(16).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn10DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(17).setCellValue(loanInfoMonth.getTotalOn10DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(17).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn15DpdCount() != null) {
                            rowCommonMonth.createCell(18).setCellValue(loanInfoMonth.getTotalOn15DpdCount());
                            rowCommonMonth.getCell(18).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn15DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(19).setCellValue((double) loanInfoMonth.getTotalOn15DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(19).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn15DpdAmount() != null) {
                            rowCommonMonth.createCell(20).setCellValue(loanInfoMonth.getTotalOn15DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(20).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn15DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(21).setCellValue(loanInfoMonth.getTotalOn15DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(21).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn20DpdCount() != null) {
                            rowCommonMonth.createCell(22).setCellValue(loanInfoMonth.getTotalOn20DpdCount());
                            rowCommonMonth.getCell(22).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn20DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(23).setCellValue((double) loanInfoMonth.getTotalOn20DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(23).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn20DpdAmount() != null) {
                            rowCommonMonth.createCell(24).setCellValue(loanInfoMonth.getTotalOn20DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(24).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn20DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(25).setCellValue(loanInfoMonth.getTotalOn20DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(25).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn25DpdCount() != null) {
                            rowCommonMonth.createCell(26).setCellValue(loanInfoMonth.getTotalOn25DpdCount());
                            rowCommonMonth.getCell(26).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn25DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(27).setCellValue((double) loanInfoMonth.getTotalOn25DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(27).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn25DpdAmount() != null) {
                            rowCommonMonth.createCell(28).setCellValue(loanInfoMonth.getTotalOn25DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(28).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn25DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(29).setCellValue(loanInfoMonth.getTotalOn25DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(29).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn30DpdCount() != null) {
                            rowCommonMonth.createCell(30).setCellValue(loanInfoMonth.getTotalOn30DpdCount());
                            rowCommonMonth.getCell(30).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn30DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(31).setCellValue((double) loanInfoMonth.getTotalOn30DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(31).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn30DpdAmount() != null) {
                            rowCommonMonth.createCell(32).setCellValue(loanInfoMonth.getTotalOn30DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(32).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn30DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(33).setCellValue(loanInfoMonth.getTotalOn30DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(33).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn40DpdCount() != null) {
                            rowCommonMonth.createCell(34).setCellValue(loanInfoMonth.getTotalOn40DpdCount());
                            rowCommonMonth.getCell(34).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn40DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(35).setCellValue((double) loanInfoMonth.getTotalOn40DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(35).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn40DpdAmount() != null) {
                            rowCommonMonth.createCell(36).setCellValue(loanInfoMonth.getTotalOn40DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(36).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn40DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(37).setCellValue(loanInfoMonth.getTotalOn40DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(37).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn50DpdCount() != null) {
                            rowCommonMonth.createCell(38).setCellValue(loanInfoMonth.getTotalOn50DpdCount());
                            rowCommonMonth.getCell(38).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn50DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(39).setCellValue((double) loanInfoMonth.getTotalOn50DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(39).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn50DpdAmount() != null) {
                            rowCommonMonth.createCell(40).setCellValue(loanInfoMonth.getTotalOn50DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(40).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn50DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(41).setCellValue(loanInfoMonth.getTotalOn50DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(41).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn60DpdCount() != null) {
                            rowCommonMonth.createCell(42).setCellValue(loanInfoMonth.getTotalOn60DpdCount());
                            rowCommonMonth.getCell(42).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn60DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(43).setCellValue((double) loanInfoMonth.getTotalOn60DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(43).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn60DpdAmount() != null) {
                            rowCommonMonth.createCell(44).setCellValue(loanInfoMonth.getTotalOn60DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(44).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn60DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(45).setCellValue(loanInfoMonth.getTotalOn60DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(45).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn90DpdCount() != null) {
                            rowCommonMonth.createCell(46).setCellValue(loanInfoMonth.getTotalOn90DpdCount());
                            rowCommonMonth.getCell(46).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn90DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(47).setCellValue((double) loanInfoMonth.getTotalOn90DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(47).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn90DpdAmount() != null) {
                            rowCommonMonth.createCell(48).setCellValue(loanInfoMonth.getTotalOn90DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(48).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn90DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(49).setCellValue(loanInfoMonth.getTotalOn90DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(49).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn120DpdCount() != null) {
                            rowCommonMonth.createCell(50).setCellValue(loanInfoMonth.getTotalOn120DpdCount());
                            rowCommonMonth.getCell(50).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn120DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(51).setCellValue((double) loanInfoMonth.getTotalOn120DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(51).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn120DpdAmount() != null) {
                            rowCommonMonth.createCell(52).setCellValue(loanInfoMonth.getTotalOn120DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(52).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn120DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(53).setCellValue(loanInfoMonth.getTotalOn120DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(53).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn150DpdCount() != null) {
                            rowCommonMonth.createCell(54).setCellValue(loanInfoMonth.getTotalOn150DpdCount());
                            rowCommonMonth.getCell(54).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn150DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(55).setCellValue((double) loanInfoMonth.getTotalOn150DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(55).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn150DpdAmount() != null) {
                            rowCommonMonth.createCell(56).setCellValue(loanInfoMonth.getTotalOn150DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(56).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn150DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(57).setCellValue(loanInfoMonth.getTotalOn150DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(57).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn180DpdCount() != null) {
                            rowCommonMonth.createCell(58).setCellValue(loanInfoMonth.getTotalOn180DpdCount());
                            rowCommonMonth.getCell(58).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn180DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(59).setCellValue((double) loanInfoMonth.getTotalOn180DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(59).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn180DpdAmount() != null) {
                            rowCommonMonth.createCell(60).setCellValue(loanInfoMonth.getTotalOn180DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(60).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn180DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(61).setCellValue(loanInfoMonth.getTotalOn180DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(61).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn250DpdCount() != null) {
                            rowCommonMonth.createCell(62).setCellValue(loanInfoMonth.getTotalOn250DpdCount());
                            rowCommonMonth.getCell(62).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn250DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(63).setCellValue((double) loanInfoMonth.getTotalOn250DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(63).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn250DpdAmount() != null) {
                            rowCommonMonth.createCell(64).setCellValue(loanInfoMonth.getTotalOn250DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(64).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn250DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(65).setCellValue(loanInfoMonth.getTotalOn250DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(65).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn300DpdCount() != null) {
                            rowCommonMonth.createCell(66).setCellValue(loanInfoMonth.getTotalOn300DpdCount());
                            rowCommonMonth.getCell(66).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn300DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(67).setCellValue((double) loanInfoMonth.getTotalOn300DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(67).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn300DpdAmount() != null) {
                            rowCommonMonth.createCell(68).setCellValue(loanInfoMonth.getTotalOn300DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(68).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn300DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(69).setCellValue(loanInfoMonth.getTotalOn300DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(69).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn500DpdCount() != null) {
                            rowCommonMonth.createCell(70).setCellValue(loanInfoMonth.getTotalOn500DpdCount());
                            rowCommonMonth.getCell(70).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn500DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(71).setCellValue((double) loanInfoMonth.getTotalOn500DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(71).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn500DpdAmount() != null) {
                            rowCommonMonth.createCell(72).setCellValue(loanInfoMonth.getTotalOn500DpdAmount() / currencyRateForMonth);
                            rowCommonMonth.getCell(72).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn500DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(73).setCellValue(loanInfoMonth.getTotalOn500DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(73).setCellStyle(stylePercentBold);
                        }

                        rowCommonMonthNew.createCell(0).setCellValue(loanInfoMonth.getDate());
                        rowCommonMonthNew.getCell(0).setCellStyle(styleMonthBold);
                        if (loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(1).setCellValue(loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(1).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(2).setCellValue(loanInfoMonth.getPotentialIssuedLoanAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(2).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialIssuedLoanAmount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(3).setCellValue((loanInfoMonth.getPotentialIssuedLoanAmount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount()) / currencyRateForMonth);
                            rowCommonMonthNew.getCell(3).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialActiveLoanCount() != null) {
                            rowCommonMonthNew.createCell(4).setCellValue(loanInfoMonth.getPotentialActiveLoanCount());
                            rowCommonMonthNew.getCell(4).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialActiveLoanCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(5).setCellValue((double) loanInfoMonth.getPotentialActiveLoanCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(5).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn2DpdCount() != null) {
                            rowCommonMonthNew.createCell(6).setCellValue(loanInfoMonth.getPotentialOn2DpdCount());
                            rowCommonMonthNew.getCell(6).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn2DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(7).setCellValue((double) loanInfoMonth.getPotentialOn2DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(7).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn2DpdAmount() != null) {
                            rowCommonMonthNew.createCell(8).setCellValue(loanInfoMonth.getPotentialOn2DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(8).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn2DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(9).setCellValue(loanInfoMonth.getPotentialOn2DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(9).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn5DpdCount() != null) {
                            rowCommonMonthNew.createCell(10).setCellValue(loanInfoMonth.getPotentialOn5DpdCount());
                            rowCommonMonthNew.getCell(10).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn5DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(11).setCellValue((double) loanInfoMonth.getPotentialOn5DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(11).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn5DpdAmount() != null) {
                            rowCommonMonthNew.createCell(12).setCellValue(loanInfoMonth.getPotentialOn5DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(12).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn5DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(13).setCellValue(loanInfoMonth.getPotentialOn5DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(13).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn10DpdCount() != null) {
                            rowCommonMonthNew.createCell(14).setCellValue(loanInfoMonth.getPotentialOn10DpdCount());
                            rowCommonMonthNew.getCell(14).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn10DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(15).setCellValue((double) loanInfoMonth.getPotentialOn10DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(15).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn10DpdAmount() != null) {
                            rowCommonMonthNew.createCell(16).setCellValue(loanInfoMonth.getPotentialOn10DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(16).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn10DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(17).setCellValue(loanInfoMonth.getPotentialOn10DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(17).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn15DpdCount() != null) {
                            rowCommonMonthNew.createCell(18).setCellValue(loanInfoMonth.getPotentialOn15DpdCount());
                            rowCommonMonthNew.getCell(18).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn15DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(19).setCellValue((double) loanInfoMonth.getPotentialOn15DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(19).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn15DpdAmount() != null) {
                            rowCommonMonthNew.createCell(20).setCellValue(loanInfoMonth.getPotentialOn15DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(20).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn15DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(21).setCellValue(loanInfoMonth.getPotentialOn15DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(21).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn20DpdCount() != null) {
                            rowCommonMonthNew.createCell(22).setCellValue(loanInfoMonth.getPotentialOn20DpdCount());
                            rowCommonMonthNew.getCell(22).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn20DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(23).setCellValue((double) loanInfoMonth.getPotentialOn20DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(23).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn20DpdAmount() != null) {
                            rowCommonMonthNew.createCell(24).setCellValue(loanInfoMonth.getPotentialOn20DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(24).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn20DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(25).setCellValue(loanInfoMonth.getPotentialOn20DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(25).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn25DpdCount() != null) {
                            rowCommonMonthNew.createCell(26).setCellValue(loanInfoMonth.getPotentialOn25DpdCount());
                            rowCommonMonthNew.getCell(26).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn25DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(27).setCellValue((double) loanInfoMonth.getPotentialOn25DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(27).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn25DpdAmount() != null) {
                            rowCommonMonthNew.createCell(28).setCellValue(loanInfoMonth.getPotentialOn25DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(28).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn25DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(29).setCellValue(loanInfoMonth.getPotentialOn25DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(29).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn30DpdCount() != null) {
                            rowCommonMonthNew.createCell(30).setCellValue(loanInfoMonth.getPotentialOn30DpdCount());
                            rowCommonMonthNew.getCell(30).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn30DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(31).setCellValue((double) loanInfoMonth.getPotentialOn30DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(31).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn30DpdAmount() != null) {
                            rowCommonMonthNew.createCell(32).setCellValue(loanInfoMonth.getPotentialOn30DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(32).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn30DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(33).setCellValue(loanInfoMonth.getPotentialOn30DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(33).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn40DpdCount() != null) {
                            rowCommonMonthNew.createCell(34).setCellValue(loanInfoMonth.getPotentialOn40DpdCount());
                            rowCommonMonthNew.getCell(34).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn40DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(35).setCellValue((double) loanInfoMonth.getPotentialOn40DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(35).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn40DpdAmount() != null) {
                            rowCommonMonthNew.createCell(36).setCellValue(loanInfoMonth.getPotentialOn40DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(36).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn40DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(37).setCellValue(loanInfoMonth.getPotentialOn40DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(37).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn50DpdCount() != null) {
                            rowCommonMonthNew.createCell(38).setCellValue(loanInfoMonth.getPotentialOn50DpdCount());
                            rowCommonMonthNew.getCell(38).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn50DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(39).setCellValue((double) loanInfoMonth.getPotentialOn50DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(39).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn50DpdAmount() != null) {
                            rowCommonMonthNew.createCell(40).setCellValue(loanInfoMonth.getPotentialOn50DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(40).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn50DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(41).setCellValue(loanInfoMonth.getPotentialOn50DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(41).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn60DpdCount() != null) {
                            rowCommonMonthNew.createCell(42).setCellValue(loanInfoMonth.getPotentialOn60DpdCount());
                            rowCommonMonthNew.getCell(42).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn60DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(43).setCellValue((double) loanInfoMonth.getPotentialOn60DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(43).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn60DpdAmount() != null) {
                            rowCommonMonthNew.createCell(44).setCellValue(loanInfoMonth.getPotentialOn60DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(44).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn60DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(45).setCellValue(loanInfoMonth.getPotentialOn60DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(45).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn90DpdCount() != null) {
                            rowCommonMonthNew.createCell(46).setCellValue(loanInfoMonth.getPotentialOn90DpdCount());
                            rowCommonMonthNew.getCell(46).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn90DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(47).setCellValue((double) loanInfoMonth.getPotentialOn90DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(47).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn90DpdAmount() != null) {
                            rowCommonMonthNew.createCell(48).setCellValue(loanInfoMonth.getPotentialOn90DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(48).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn90DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(49).setCellValue(loanInfoMonth.getPotentialOn90DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(49).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn120DpdCount() != null) {
                            rowCommonMonthNew.createCell(50).setCellValue(loanInfoMonth.getPotentialOn120DpdCount());
                            rowCommonMonthNew.getCell(50).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn120DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(51).setCellValue((double) loanInfoMonth.getPotentialOn120DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(51).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn120DpdAmount() != null) {
                            rowCommonMonthNew.createCell(52).setCellValue(loanInfoMonth.getPotentialOn120DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(52).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn120DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(53).setCellValue(loanInfoMonth.getPotentialOn120DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(53).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn150DpdCount() != null) {
                            rowCommonMonthNew.createCell(54).setCellValue(loanInfoMonth.getPotentialOn150DpdCount());
                            rowCommonMonthNew.getCell(54).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn150DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(55).setCellValue((double) loanInfoMonth.getPotentialOn150DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(55).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn150DpdAmount() != null) {
                            rowCommonMonthNew.createCell(56).setCellValue(loanInfoMonth.getPotentialOn150DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(56).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn150DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(57).setCellValue(loanInfoMonth.getPotentialOn150DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(57).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn180DpdCount() != null) {
                            rowCommonMonthNew.createCell(58).setCellValue(loanInfoMonth.getPotentialOn180DpdCount());
                            rowCommonMonthNew.getCell(58).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn180DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(59).setCellValue((double) loanInfoMonth.getPotentialOn180DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(59).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn180DpdAmount() != null) {
                            rowCommonMonthNew.createCell(60).setCellValue(loanInfoMonth.getPotentialOn180DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(60).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn180DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(61).setCellValue(loanInfoMonth.getPotentialOn180DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(61).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn250DpdCount() != null) {
                            rowCommonMonthNew.createCell(62).setCellValue(loanInfoMonth.getPotentialOn250DpdCount());
                            rowCommonMonthNew.getCell(62).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn250DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(63).setCellValue((double) loanInfoMonth.getPotentialOn250DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(63).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn250DpdAmount() != null) {
                            rowCommonMonthNew.createCell(64).setCellValue(loanInfoMonth.getPotentialOn250DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(64).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn250DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(65).setCellValue(loanInfoMonth.getPotentialOn250DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(65).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn300DpdCount() != null) {
                            rowCommonMonthNew.createCell(66).setCellValue(loanInfoMonth.getPotentialOn300DpdCount());
                            rowCommonMonthNew.getCell(66).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn300DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(67).setCellValue((double) loanInfoMonth.getPotentialOn300DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(67).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn300DpdAmount() != null) {
                            rowCommonMonthNew.createCell(68).setCellValue(loanInfoMonth.getPotentialOn300DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(68).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn300DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(69).setCellValue(loanInfoMonth.getPotentialOn300DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(69).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn500DpdCount() != null) {
                            rowCommonMonthNew.createCell(70).setCellValue(loanInfoMonth.getPotentialOn500DpdCount());
                            rowCommonMonthNew.getCell(70).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn500DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(71).setCellValue((double) loanInfoMonth.getPotentialOn500DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(71).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn500DpdAmount() != null) {
                            rowCommonMonthNew.createCell(72).setCellValue(loanInfoMonth.getPotentialOn500DpdAmount() / currencyRateForMonth);
                            rowCommonMonthNew.getCell(72).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn500DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(73).setCellValue(loanInfoMonth.getPotentialOn500DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(73).setCellStyle(stylePercentBold);
                        }

                        rowCommonMonthRepeat.createCell(0).setCellValue(loanInfoMonth.getDate());
                        rowCommonMonthRepeat.getCell(0).setCellStyle(styleMonthBold);
                        if (loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(1).setCellValue(loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(1).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(2).setCellValue(loanInfoMonth.getRepeatIssuedLoanAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(2).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatIssuedLoanAmount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(3).setCellValue((loanInfoMonth.getRepeatIssuedLoanAmount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount()) / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(3).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatActiveLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(4).setCellValue(loanInfoMonth.getRepeatActiveLoanCount());
                            rowCommonMonthRepeat.getCell(4).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatActiveLoanCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(5).setCellValue((double) loanInfoMonth.getRepeatActiveLoanCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(5).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn2DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(6).setCellValue(loanInfoMonth.getRepeatOn2DpdCount());
                            rowCommonMonthRepeat.getCell(6).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn2DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(7).setCellValue((double) loanInfoMonth.getRepeatOn2DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(7).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn2DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(8).setCellValue(loanInfoMonth.getRepeatOn2DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(8).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn2DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(9).setCellValue(loanInfoMonth.getRepeatOn2DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(9).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn5DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(10).setCellValue(loanInfoMonth.getRepeatOn5DpdCount());
                            rowCommonMonthRepeat.getCell(10).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn5DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(11).setCellValue((double) loanInfoMonth.getRepeatOn5DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(11).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn5DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(12).setCellValue(loanInfoMonth.getRepeatOn5DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(12).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn5DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(13).setCellValue(loanInfoMonth.getRepeatOn5DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(13).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn10DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(14).setCellValue(loanInfoMonth.getRepeatOn10DpdCount());
                            rowCommonMonthRepeat.getCell(14).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn10DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(15).setCellValue((double) loanInfoMonth.getRepeatOn10DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(15).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn10DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(16).setCellValue(loanInfoMonth.getRepeatOn10DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(16).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn10DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(17).setCellValue(loanInfoMonth.getRepeatOn10DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(17).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn15DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(18).setCellValue(loanInfoMonth.getRepeatOn15DpdCount());
                            rowCommonMonthRepeat.getCell(18).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn15DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(19).setCellValue((double) loanInfoMonth.getRepeatOn15DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(19).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn15DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(20).setCellValue(loanInfoMonth.getRepeatOn15DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(20).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn15DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(21).setCellValue(loanInfoMonth.getRepeatOn15DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(21).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn20DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(22).setCellValue(loanInfoMonth.getRepeatOn20DpdCount());
                            rowCommonMonthRepeat.getCell(22).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn20DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(23).setCellValue((double) loanInfoMonth.getRepeatOn20DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(23).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn20DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(24).setCellValue(loanInfoMonth.getRepeatOn20DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(24).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn20DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(25).setCellValue(loanInfoMonth.getRepeatOn20DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(25).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn25DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(26).setCellValue(loanInfoMonth.getRepeatOn25DpdCount());
                            rowCommonMonthRepeat.getCell(26).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn25DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(27).setCellValue((double) loanInfoMonth.getRepeatOn25DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(27).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn25DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(28).setCellValue(loanInfoMonth.getRepeatOn25DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(28).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn25DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(29).setCellValue(loanInfoMonth.getRepeatOn25DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(29).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn30DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(30).setCellValue(loanInfoMonth.getRepeatOn30DpdCount());
                            rowCommonMonthRepeat.getCell(30).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn30DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(31).setCellValue((double) loanInfoMonth.getRepeatOn30DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(31).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn30DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(32).setCellValue(loanInfoMonth.getRepeatOn30DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(32).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn30DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(33).setCellValue(loanInfoMonth.getRepeatOn30DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(33).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn40DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(34).setCellValue(loanInfoMonth.getRepeatOn40DpdCount());
                            rowCommonMonthRepeat.getCell(34).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn40DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(35).setCellValue((double) loanInfoMonth.getRepeatOn40DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(35).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn40DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(36).setCellValue(loanInfoMonth.getRepeatOn40DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(36).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn40DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(37).setCellValue(loanInfoMonth.getRepeatOn40DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(37).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn50DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(38).setCellValue(loanInfoMonth.getRepeatOn50DpdCount());
                            rowCommonMonthRepeat.getCell(38).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn50DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(39).setCellValue((double) loanInfoMonth.getRepeatOn50DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(39).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn50DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(40).setCellValue(loanInfoMonth.getRepeatOn50DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(40).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn50DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(41).setCellValue(loanInfoMonth.getRepeatOn50DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(41).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn60DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(42).setCellValue(loanInfoMonth.getRepeatOn60DpdCount());
                            rowCommonMonthRepeat.getCell(42).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn60DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(43).setCellValue((double) loanInfoMonth.getRepeatOn60DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(43).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn60DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(44).setCellValue(loanInfoMonth.getRepeatOn60DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(44).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn60DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(45).setCellValue(loanInfoMonth.getRepeatOn60DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(45).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn90DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(46).setCellValue(loanInfoMonth.getRepeatOn90DpdCount());
                            rowCommonMonthRepeat.getCell(46).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn90DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(47).setCellValue((double) loanInfoMonth.getRepeatOn90DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(47).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn90DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(48).setCellValue(loanInfoMonth.getRepeatOn90DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(48).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn90DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(49).setCellValue(loanInfoMonth.getRepeatOn90DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(49).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn120DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(50).setCellValue(loanInfoMonth.getRepeatOn120DpdCount());
                            rowCommonMonthRepeat.getCell(50).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn120DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(51).setCellValue((double) loanInfoMonth.getRepeatOn120DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(51).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn120DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(52).setCellValue(loanInfoMonth.getRepeatOn120DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(52).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn120DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(53).setCellValue(loanInfoMonth.getRepeatOn120DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(53).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn150DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(54).setCellValue(loanInfoMonth.getRepeatOn150DpdCount());
                            rowCommonMonthRepeat.getCell(54).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn150DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(55).setCellValue((double) loanInfoMonth.getRepeatOn150DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(55).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn150DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(56).setCellValue(loanInfoMonth.getRepeatOn150DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(56).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn150DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(57).setCellValue(loanInfoMonth.getRepeatOn150DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(57).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn180DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(58).setCellValue(loanInfoMonth.getRepeatOn180DpdCount());
                            rowCommonMonthRepeat.getCell(58).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn180DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(59).setCellValue((double) loanInfoMonth.getRepeatOn180DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(59).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn180DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(60).setCellValue(loanInfoMonth.getRepeatOn180DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(60).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn180DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(61).setCellValue(loanInfoMonth.getRepeatOn180DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(61).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn250DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(62).setCellValue(loanInfoMonth.getRepeatOn250DpdCount());
                            rowCommonMonthRepeat.getCell(62).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn250DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(63).setCellValue((double) loanInfoMonth.getRepeatOn250DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(63).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn250DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(64).setCellValue(loanInfoMonth.getRepeatOn250DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(64).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn250DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(65).setCellValue(loanInfoMonth.getRepeatOn250DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(65).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn300DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(66).setCellValue(loanInfoMonth.getRepeatOn300DpdCount());
                            rowCommonMonthRepeat.getCell(66).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn300DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(67).setCellValue((double) loanInfoMonth.getRepeatOn300DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(67).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn300DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(68).setCellValue(loanInfoMonth.getRepeatOn300DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(68).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn300DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(69).setCellValue(loanInfoMonth.getRepeatOn300DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(69).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn500DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(70).setCellValue(loanInfoMonth.getRepeatOn500DpdCount());
                            rowCommonMonthRepeat.getCell(70).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn500DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(71).setCellValue((double) loanInfoMonth.getRepeatOn500DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(71).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn500DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(72).setCellValue(loanInfoMonth.getRepeatOn500DpdAmount() / currencyRateForMonth);
                            rowCommonMonthRepeat.getCell(72).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn500DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(73).setCellValue(loanInfoMonth.getRepeatOn500DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(73).setCellStyle(stylePercentBold);
                        }

                        row ++;
                        rowNumberForGroupFirst = row;
                    }
                }
            }
        }


        //Sheet. Row and Columns groups, width etc.
        sheetCommonDailyAll.setColumnWidth(0, 16 * 256);
        sheetCommonDailyAll.setColumnWidth(1, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(2, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(3, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(4, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(5, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(6, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(7, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(8, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(9, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(10, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(11, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(12, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(13, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(14, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(15, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(16, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(17, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(18, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(19, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(20, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(21, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(22, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(23, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(24, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(25, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(26, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(27, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(28, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(29, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(30, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(31, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(32, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(33, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(34, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(35, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(36, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(37, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(38, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(39, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(40, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(41, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(42, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(43, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(44, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(45, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(46, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(47, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(48, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(49, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(50, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(51, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(52, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(53, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(54, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(55, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(56, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(57, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(58, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(59, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(60, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(61, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(62, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(63, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(64, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(65, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(66, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(67, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(68, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(69, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(70, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(71, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(72, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(73, 14 * 256);

        sheetCommonDailyNew.setColumnWidth(0, 16 * 256);
        sheetCommonDailyNew.setColumnWidth(1, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(2, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(3, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(4, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(5, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(6, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(7, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(8, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(9, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(10, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(11, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(12, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(13, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(14, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(15, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(16, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(17, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(18, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(19, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(20, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(21, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(22, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(23, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(24, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(25, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(26, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(27, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(28, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(29, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(30, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(31, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(32, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(33, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(34, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(35, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(36, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(37, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(38, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(39, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(40, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(41, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(42, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(43, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(44, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(45, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(46, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(47, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(48, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(49, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(50, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(51, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(52, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(53, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(54, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(55, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(56, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(57, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(58, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(59, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(60, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(61, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(62, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(63, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(64, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(65, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(66, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(67, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(68, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(69, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(70, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(71, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(72, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(73, 14 * 256);

        sheetCommonDailyRepeat.setColumnWidth(0, 16 * 256);
        sheetCommonDailyRepeat.setColumnWidth(1, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(2, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(3, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(4, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(5, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(6, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(7, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(8, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(9, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(10, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(11, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(12, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(13, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(14, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(15, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(16, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(17, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(18, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(19, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(20, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(21, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(22, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(23, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(24, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(25, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(26, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(27, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(28, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(29, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(30, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(31, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(32, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(33, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(34, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(35, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(36, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(37, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(38, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(39, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(40, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(41, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(42, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(43, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(44, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(45, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(46, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(47, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(48, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(49, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(50, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(51, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(52, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(53, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(54, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(55, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(56, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(57, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(58, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(59, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(60, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(61, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(62, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(63, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(64, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(65, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(66, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(67, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(68, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(69, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(70, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(71, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(72, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(73, 14 * 256);

        sheetCommonDailyAll.createFreezePane(1,2);
        sheetCommonDailyNew.createFreezePane(1,2);
        sheetCommonDailyRepeat.createFreezePane(1,2);
    }

    private static void createSheetsDailyInfoInVNDForInfoLoansInfoExpiredReport(Workbook workbook,
                                                                                ExportLoansInfoExpiredInfoReportObject reportObject,
                                                                                CellStyle styleTextHeaders, CellStyle styleDate,
                                                                                CellStyle stylePercent, CellStyle styleNumber,
                                                                                CellStyle styleMonthBold, CellStyle stylePercentBold,
                                                                                CellStyle styleNumberBold) {
        Sheet sheetCommonDailyAll = workbook.createSheet("All clients.VND");
        Sheet sheetCommonDailyNew = workbook.createSheet("New client.VND");
        Sheet sheetCommonDailyRepeat = workbook.createSheet("Repeat client.VND");

        sheetCommonDailyAll.setDisplayGridlines(false);
        sheetCommonDailyNew.setDisplayGridlines(false);
        sheetCommonDailyRepeat.setDisplayGridlines(false);

        int row = 0;

        Row headRowAll = sheetCommonDailyAll.createRow(row);
        Row headRowNew = sheetCommonDailyNew.createRow(row);
        Row headRowRepeat = sheetCommonDailyRepeat.createRow(row);

        Row underHeadRowAll = sheetCommonDailyAll.createRow(row + 1);
        Row underHeadRowNew = sheetCommonDailyNew.createRow(row + 1);
        Row underHeadRowRepeat = sheetCommonDailyRepeat.createRow(row + 1);

        headRowAll.createCell(0).setCellValue("Date");
        headRowAll.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row,row + 1,0,0));

        headRowNew.createCell(0).setCellValue("Date");
        headRowNew.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row,row + 1,0,0));

        headRowRepeat.createCell(0).setCellValue("Date");
        headRowRepeat.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row,row + 1,0,0));

        headRowAll.createCell(1).setCellValue("Issued loans");
        headRowAll.getCell(1).setCellStyle(styleTextHeaders);
        headRowAll.createCell(2).setCellStyle(styleTextHeaders);
        headRowAll.createCell(3).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 1, 3));

        headRowNew.createCell(1).setCellValue("Issued loans");
        headRowNew.getCell(1).setCellStyle(styleTextHeaders);
        headRowNew.createCell(2).setCellStyle(styleTextHeaders);
        headRowNew.createCell(3).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 1, 3));

        headRowRepeat.createCell(1).setCellValue("Issued loans");
        headRowRepeat.getCell(1).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(2).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(3).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 1, 3));

        underHeadRowAll.createCell(1).setCellValue("Count");
        underHeadRowAll.getCell(1).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(2).setCellValue("Amount");
        underHeadRowAll.getCell(2).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(3).setCellValue("Average amount");
        underHeadRowAll.getCell(3).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(1).setCellValue("Count");
        underHeadRowNew.getCell(1).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(2).setCellValue("Amount");
        underHeadRowNew.getCell(2).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(3).setCellValue("Average amount");
        underHeadRowNew.getCell(3).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(1).setCellValue("Count");
        underHeadRowRepeat.getCell(1).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(2).setCellValue("Amount");
        underHeadRowRepeat.getCell(2).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(3).setCellValue("Average amount");
        underHeadRowRepeat.getCell(3).setCellStyle(styleTextHeaders);

        headRowAll.createCell(4).setCellValue("Still active");
        headRowAll.getCell(4).setCellStyle(styleTextHeaders);
        headRowAll.createCell(5).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 4, 5));

        headRowNew.createCell(4).setCellValue("Still active");
        headRowNew.getCell(4).setCellStyle(styleTextHeaders);
        headRowNew.createCell(5).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 4, 5));

        headRowRepeat.createCell(4).setCellValue("Still active");
        headRowRepeat.getCell(4).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(5).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 4, 5));

        underHeadRowAll.createCell(4).setCellValue("Count");
        underHeadRowAll.getCell(4).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(5).setCellValue("%");
        underHeadRowAll.getCell(5).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(4).setCellValue("Count");
        underHeadRowNew.getCell(4).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(5).setCellValue("%");
        underHeadRowNew.getCell(5).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(4).setCellValue("Count");
        underHeadRowRepeat.getCell(4).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(5).setCellValue("%");
        underHeadRowRepeat.getCell(5).setCellStyle(styleTextHeaders);

        headRowAll.createCell(6).setCellValue("2 DPD");
        headRowAll.getCell(6).setCellStyle(styleTextHeaders);
        headRowAll.createCell(7).setCellStyle(styleTextHeaders);
        headRowAll.createCell(8).setCellStyle(styleTextHeaders);
        headRowAll.createCell(9).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 6, 9));

        headRowNew.createCell(6).setCellValue("2 DPD");
        headRowNew.getCell(6).setCellStyle(styleTextHeaders);
        headRowNew.createCell(7).setCellStyle(styleTextHeaders);
        headRowNew.createCell(8).setCellStyle(styleTextHeaders);
        headRowNew.createCell(9).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 6, 9));

        headRowRepeat.createCell(6).setCellValue("2 DPD");
        headRowRepeat.getCell(6).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(7).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(8).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(9).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 6, 9));

        underHeadRowAll.createCell(6).setCellValue("Count");
        underHeadRowAll.getCell(6).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(7).setCellValue("%");
        underHeadRowAll.getCell(7).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(8).setCellValue("Amount");
        underHeadRowAll.getCell(8).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(9).setCellValue("%");
        underHeadRowAll.getCell(9).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(6).setCellValue("Count");
        underHeadRowNew.getCell(6).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(7).setCellValue("%");
        underHeadRowNew.getCell(7).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(8).setCellValue("Amount");
        underHeadRowNew.getCell(8).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(9).setCellValue("%");
        underHeadRowNew.getCell(9).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(6).setCellValue("Count");
        underHeadRowRepeat.getCell(6).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(7).setCellValue("%");
        underHeadRowRepeat.getCell(7).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(8).setCellValue("Amount");
        underHeadRowRepeat.getCell(8).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(9).setCellValue("%");
        underHeadRowRepeat.getCell(9).setCellStyle(styleTextHeaders);


        headRowAll.createCell(10).setCellValue("5 DPD");
        headRowAll.getCell(10).setCellStyle(styleTextHeaders);
        headRowAll.createCell(11).setCellStyle(styleTextHeaders);
        headRowAll.createCell(12).setCellStyle(styleTextHeaders);
        headRowAll.createCell(13).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 10, 13));

        headRowNew.createCell(10).setCellValue("5 DPD");
        headRowNew.getCell(10).setCellStyle(styleTextHeaders);
        headRowNew.createCell(11).setCellStyle(styleTextHeaders);
        headRowNew.createCell(12).setCellStyle(styleTextHeaders);
        headRowNew.createCell(13).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 10, 13));

        headRowRepeat.createCell(10).setCellValue("5 DPD");
        headRowRepeat.getCell(10).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(11).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(12).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(13).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 10, 13));

        underHeadRowAll.createCell(10).setCellValue("Count");
        underHeadRowAll.getCell(10).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(11).setCellValue("%");
        underHeadRowAll.getCell(11).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(12).setCellValue("Amount");
        underHeadRowAll.getCell(12).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(13).setCellValue("%");
        underHeadRowAll.getCell(13).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(10).setCellValue("Count");
        underHeadRowNew.getCell(10).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(11).setCellValue("%");
        underHeadRowNew.getCell(11).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(12).setCellValue("Amount");
        underHeadRowNew.getCell(12).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(13).setCellValue("%");
        underHeadRowNew.getCell(13).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(10).setCellValue("Count");
        underHeadRowRepeat.getCell(10).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(11).setCellValue("%");
        underHeadRowRepeat.getCell(11).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(12).setCellValue("Amount");
        underHeadRowRepeat.getCell(12).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(13).setCellValue("%");
        underHeadRowRepeat.getCell(13).setCellStyle(styleTextHeaders);


        headRowAll.createCell(14).setCellValue("10 DPD");
        headRowAll.getCell(14).setCellStyle(styleTextHeaders);
        headRowAll.createCell(15).setCellStyle(styleTextHeaders);
        headRowAll.createCell(16).setCellStyle(styleTextHeaders);
        headRowAll.createCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 14, 17));

        headRowNew.createCell(14).setCellValue("10 DPD");
        headRowNew.getCell(14).setCellStyle(styleTextHeaders);
        headRowNew.createCell(15).setCellStyle(styleTextHeaders);
        headRowNew.createCell(16).setCellStyle(styleTextHeaders);
        headRowNew.createCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 14, 17));

        headRowRepeat.createCell(14).setCellValue("10 DPD");
        headRowRepeat.getCell(14).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(15).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(16).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 14, 17));

        underHeadRowAll.createCell(14).setCellValue("Count");
        underHeadRowAll.getCell(14).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(15).setCellValue("%");
        underHeadRowAll.getCell(15).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(16).setCellValue("Amount");
        underHeadRowAll.getCell(16).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(17).setCellValue("%");
        underHeadRowAll.getCell(17).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(14).setCellValue("Count");
        underHeadRowNew.getCell(14).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(15).setCellValue("%");
        underHeadRowNew.getCell(15).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(16).setCellValue("Amount");
        underHeadRowNew.getCell(16).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(17).setCellValue("%");
        underHeadRowNew.getCell(17).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(14).setCellValue("Count");
        underHeadRowRepeat.getCell(14).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(15).setCellValue("%");
        underHeadRowRepeat.getCell(15).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(16).setCellValue("Amount");
        underHeadRowRepeat.getCell(16).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(17).setCellValue("%");
        underHeadRowRepeat.getCell(17).setCellStyle(styleTextHeaders);


        headRowAll.createCell(18).setCellValue("15 DPD");
        headRowAll.getCell(18).setCellStyle(styleTextHeaders);
        headRowAll.createCell(19).setCellStyle(styleTextHeaders);
        headRowAll.createCell(20).setCellStyle(styleTextHeaders);
        headRowAll.createCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 18, 21));

        headRowNew.createCell(18).setCellValue("15 DPD");
        headRowNew.getCell(18).setCellStyle(styleTextHeaders);
        headRowNew.createCell(19).setCellStyle(styleTextHeaders);
        headRowNew.createCell(20).setCellStyle(styleTextHeaders);
        headRowNew.createCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 18, 21));

        headRowRepeat.createCell(18).setCellValue("15 DPD");
        headRowRepeat.getCell(18).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(19).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(20).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 18, 21));

        underHeadRowAll.createCell(18).setCellValue("Count");
        underHeadRowAll.getCell(18).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(19).setCellValue("%");
        underHeadRowAll.getCell(19).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(20).setCellValue("Amount");
        underHeadRowAll.getCell(20).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(21).setCellValue("%");
        underHeadRowAll.getCell(21).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(18).setCellValue("Count");
        underHeadRowNew.getCell(18).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(19).setCellValue("%");
        underHeadRowNew.getCell(19).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(20).setCellValue("Amount");
        underHeadRowNew.getCell(20).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(21).setCellValue("%");
        underHeadRowNew.getCell(21).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(18).setCellValue("Count");
        underHeadRowRepeat.getCell(18).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(19).setCellValue("%");
        underHeadRowRepeat.getCell(19).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(20).setCellValue("Amount");
        underHeadRowRepeat.getCell(20).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(21).setCellValue("%");
        underHeadRowRepeat.getCell(21).setCellStyle(styleTextHeaders);


        headRowAll.createCell(22).setCellValue("20 DPD");
        headRowAll.getCell(22).setCellStyle(styleTextHeaders);
        headRowAll.createCell(23).setCellStyle(styleTextHeaders);
        headRowAll.createCell(24).setCellStyle(styleTextHeaders);
        headRowAll.createCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 22, 25));

        headRowNew.createCell(22).setCellValue("20 DPD");
        headRowNew.getCell(22).setCellStyle(styleTextHeaders);
        headRowNew.createCell(23).setCellStyle(styleTextHeaders);
        headRowNew.createCell(24).setCellStyle(styleTextHeaders);
        headRowNew.createCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 22, 25));

        headRowRepeat.createCell(22).setCellValue("20 DPD");
        headRowRepeat.getCell(22).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(23).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(24).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 22, 25));

        underHeadRowAll.createCell(22).setCellValue("Count");
        underHeadRowAll.getCell(22).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(23).setCellValue("%");
        underHeadRowAll.getCell(23).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(24).setCellValue("Amount");
        underHeadRowAll.getCell(24).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(25).setCellValue("%");
        underHeadRowAll.getCell(25).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(22).setCellValue("Count");
        underHeadRowNew.getCell(22).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(23).setCellValue("%");
        underHeadRowNew.getCell(23).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(24).setCellValue("Amount");
        underHeadRowNew.getCell(24).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(25).setCellValue("%");
        underHeadRowNew.getCell(25).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(22).setCellValue("Count");
        underHeadRowRepeat.getCell(22).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(23).setCellValue("%");
        underHeadRowRepeat.getCell(23).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(24).setCellValue("Amount");
        underHeadRowRepeat.getCell(24).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(25).setCellValue("%");
        underHeadRowRepeat.getCell(25).setCellStyle(styleTextHeaders);

        headRowAll.createCell(26).setCellValue("25 DPD");
        headRowAll.getCell(26).setCellStyle(styleTextHeaders);
        headRowAll.createCell(27).setCellStyle(styleTextHeaders);
        headRowAll.createCell(28).setCellStyle(styleTextHeaders);
        headRowAll.createCell(29).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 26, 29));

        headRowNew.createCell(26).setCellValue("25 DPD");
        headRowNew.getCell(26).setCellStyle(styleTextHeaders);
        headRowNew.createCell(27).setCellStyle(styleTextHeaders);
        headRowNew.createCell(28).setCellStyle(styleTextHeaders);
        headRowNew.createCell(29).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 26, 29));

        headRowRepeat.createCell(26).setCellValue("25 DPD");
        headRowRepeat.getCell(26).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(27).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(28).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(29).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 26, 29));

        underHeadRowAll.createCell(26).setCellValue("Count");
        underHeadRowAll.getCell(26).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(27).setCellValue("%");
        underHeadRowAll.getCell(27).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(28).setCellValue("Amount");
        underHeadRowAll.getCell(28).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(29).setCellValue("%");
        underHeadRowAll.getCell(29).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(26).setCellValue("Count");
        underHeadRowNew.getCell(26).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(27).setCellValue("%");
        underHeadRowNew.getCell(27).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(28).setCellValue("Amount");
        underHeadRowNew.getCell(28).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(29).setCellValue("%");
        underHeadRowNew.getCell(29).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(26).setCellValue("Count");
        underHeadRowRepeat.getCell(26).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(27).setCellValue("%");
        underHeadRowRepeat.getCell(27).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(28).setCellValue("Amount");
        underHeadRowRepeat.getCell(28).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(29).setCellValue("%");
        underHeadRowRepeat.getCell(29).setCellStyle(styleTextHeaders);
        
        headRowAll.createCell(30).setCellValue("30 DPD");
        headRowAll.getCell(30).setCellStyle(styleTextHeaders);
        headRowAll.createCell(31).setCellStyle(styleTextHeaders);
        headRowAll.createCell(32).setCellStyle(styleTextHeaders);
        headRowAll.createCell(33).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 30, 33));

        headRowNew.createCell(30).setCellValue("30 DPD");
        headRowNew.getCell(30).setCellStyle(styleTextHeaders);
        headRowNew.createCell(31).setCellStyle(styleTextHeaders);
        headRowNew.createCell(32).setCellStyle(styleTextHeaders);
        headRowNew.createCell(33).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 30, 33));

        headRowRepeat.createCell(30).setCellValue("30 DPD");
        headRowRepeat.getCell(30).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(31).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(32).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(33).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 30, 33));

        underHeadRowAll.createCell(30).setCellValue("Count");
        underHeadRowAll.getCell(30).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(31).setCellValue("%");
        underHeadRowAll.getCell(31).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(32).setCellValue("Amount");
        underHeadRowAll.getCell(32).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(33).setCellValue("%");
        underHeadRowAll.getCell(33).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(30).setCellValue("Count");
        underHeadRowNew.getCell(30).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(31).setCellValue("%");
        underHeadRowNew.getCell(31).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(32).setCellValue("Amount");
        underHeadRowNew.getCell(32).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(33).setCellValue("%");
        underHeadRowNew.getCell(33).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(30).setCellValue("Count");
        underHeadRowRepeat.getCell(30).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(31).setCellValue("%");
        underHeadRowRepeat.getCell(31).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(32).setCellValue("Amount");
        underHeadRowRepeat.getCell(32).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(33).setCellValue("%");
        underHeadRowRepeat.getCell(33).setCellStyle(styleTextHeaders);
        
        headRowAll.createCell(34).setCellValue("40 DPD");
        headRowAll.getCell(34).setCellStyle(styleTextHeaders);
        headRowAll.createCell(35).setCellStyle(styleTextHeaders);
        headRowAll.createCell(36).setCellStyle(styleTextHeaders);
        headRowAll.createCell(37).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 34, 37));

        headRowNew.createCell(34).setCellValue("40 DPD");
        headRowNew.getCell(34).setCellStyle(styleTextHeaders);
        headRowNew.createCell(35).setCellStyle(styleTextHeaders);
        headRowNew.createCell(36).setCellStyle(styleTextHeaders);
        headRowNew.createCell(37).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 34, 37));

        headRowRepeat.createCell(34).setCellValue("40 DPD");
        headRowRepeat.getCell(34).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(35).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(36).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(37).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 34, 37));

        underHeadRowAll.createCell(34).setCellValue("Count");
        underHeadRowAll.getCell(34).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(35).setCellValue("%");
        underHeadRowAll.getCell(35).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(36).setCellValue("Amount");
        underHeadRowAll.getCell(36).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(37).setCellValue("%");
        underHeadRowAll.getCell(37).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(34).setCellValue("Count");
        underHeadRowNew.getCell(34).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(35).setCellValue("%");
        underHeadRowNew.getCell(35).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(36).setCellValue("Amount");
        underHeadRowNew.getCell(36).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(37).setCellValue("%");
        underHeadRowNew.getCell(37).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(34).setCellValue("Count");
        underHeadRowRepeat.getCell(34).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(35).setCellValue("%");
        underHeadRowRepeat.getCell(35).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(36).setCellValue("Amount");
        underHeadRowRepeat.getCell(36).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(37).setCellValue("%");
        underHeadRowRepeat.getCell(37).setCellStyle(styleTextHeaders);


        headRowAll.createCell(38).setCellValue("50 DPD");
        headRowAll.getCell(38).setCellStyle(styleTextHeaders);
        headRowAll.createCell(39).setCellStyle(styleTextHeaders);
        headRowAll.createCell(40).setCellStyle(styleTextHeaders);
        headRowAll.createCell(41).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 38, 41));

        headRowNew.createCell(38).setCellValue("50 DPD");
        headRowNew.getCell(38).setCellStyle(styleTextHeaders);
        headRowNew.createCell(39).setCellStyle(styleTextHeaders);
        headRowNew.createCell(40).setCellStyle(styleTextHeaders);
        headRowNew.createCell(41).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 38, 41));

        headRowRepeat.createCell(38).setCellValue("50 DPD");
        headRowRepeat.getCell(38).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(39).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(40).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(41).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 38, 41));

        underHeadRowAll.createCell(38).setCellValue("Count");
        underHeadRowAll.getCell(38).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(39).setCellValue("%");
        underHeadRowAll.getCell(39).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(40).setCellValue("Amount");
        underHeadRowAll.getCell(40).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(41).setCellValue("%");
        underHeadRowAll.getCell(41).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(38).setCellValue("Count");
        underHeadRowNew.getCell(38).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(39).setCellValue("%");
        underHeadRowNew.getCell(39).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(40).setCellValue("Amount");
        underHeadRowNew.getCell(40).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(41).setCellValue("%");
        underHeadRowNew.getCell(41).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(38).setCellValue("Count");
        underHeadRowRepeat.getCell(38).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(39).setCellValue("%");
        underHeadRowRepeat.getCell(39).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(40).setCellValue("Amount");
        underHeadRowRepeat.getCell(40).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(41).setCellValue("%");
        underHeadRowRepeat.getCell(41).setCellStyle(styleTextHeaders);
        
        headRowAll.createCell(42).setCellValue("60 DPD");
        headRowAll.getCell(42).setCellStyle(styleTextHeaders);
        headRowAll.createCell(43).setCellStyle(styleTextHeaders);
        headRowAll.createCell(44).setCellStyle(styleTextHeaders);
        headRowAll.createCell(45).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 42, 45));

        headRowNew.createCell(42).setCellValue("60 DPD");
        headRowNew.getCell(42).setCellStyle(styleTextHeaders);
        headRowNew.createCell(43).setCellStyle(styleTextHeaders);
        headRowNew.createCell(44).setCellStyle(styleTextHeaders);
        headRowNew.createCell(45).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 42, 45));

        headRowRepeat.createCell(42).setCellValue("60 DPD");
        headRowRepeat.getCell(42).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(43).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(44).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(45).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 42, 45));

        underHeadRowAll.createCell(42).setCellValue("Count");
        underHeadRowAll.getCell(42).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(43).setCellValue("%");
        underHeadRowAll.getCell(43).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(44).setCellValue("Amount");
        underHeadRowAll.getCell(44).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(45).setCellValue("%");
        underHeadRowAll.getCell(45).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(42).setCellValue("Count");
        underHeadRowNew.getCell(42).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(43).setCellValue("%");
        underHeadRowNew.getCell(43).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(44).setCellValue("Amount");
        underHeadRowNew.getCell(44).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(45).setCellValue("%");
        underHeadRowNew.getCell(45).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(42).setCellValue("Count");
        underHeadRowRepeat.getCell(42).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(43).setCellValue("%");
        underHeadRowRepeat.getCell(43).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(44).setCellValue("Amount");
        underHeadRowRepeat.getCell(44).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(45).setCellValue("%");
        underHeadRowRepeat.getCell(45).setCellStyle(styleTextHeaders);
        
        headRowAll.createCell(46).setCellValue("90 DPD");
        headRowAll.getCell(46).setCellStyle(styleTextHeaders);
        headRowAll.createCell(47).setCellStyle(styleTextHeaders);
        headRowAll.createCell(48).setCellStyle(styleTextHeaders);
        headRowAll.createCell(49).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 46, 49));

        headRowNew.createCell(46).setCellValue("90 DPD");
        headRowNew.getCell(46).setCellStyle(styleTextHeaders);
        headRowNew.createCell(47).setCellStyle(styleTextHeaders);
        headRowNew.createCell(48).setCellStyle(styleTextHeaders);
        headRowNew.createCell(49).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 46, 49));

        headRowRepeat.createCell(46).setCellValue("90 DPD");
        headRowRepeat.getCell(46).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(47).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(48).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(49).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 46, 49));

        underHeadRowAll.createCell(46).setCellValue("Count");
        underHeadRowAll.getCell(46).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(47).setCellValue("%");
        underHeadRowAll.getCell(47).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(48).setCellValue("Amount");
        underHeadRowAll.getCell(48).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(49).setCellValue("%");
        underHeadRowAll.getCell(49).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(46).setCellValue("Count");
        underHeadRowNew.getCell(46).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(47).setCellValue("%");
        underHeadRowNew.getCell(47).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(48).setCellValue("Amount");
        underHeadRowNew.getCell(48).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(49).setCellValue("%");
        underHeadRowNew.getCell(49).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(46).setCellValue("Count");
        underHeadRowRepeat.getCell(46).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(47).setCellValue("%");
        underHeadRowRepeat.getCell(47).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(48).setCellValue("Amount");
        underHeadRowRepeat.getCell(48).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(49).setCellValue("%");
        underHeadRowRepeat.getCell(49).setCellStyle(styleTextHeaders);

        headRowAll.createCell(50).setCellValue("120 DPD");
        headRowAll.getCell(50).setCellStyle(styleTextHeaders);
        headRowAll.createCell(51).setCellStyle(styleTextHeaders);
        headRowAll.createCell(52).setCellStyle(styleTextHeaders);
        headRowAll.createCell(53).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 50, 53));

        headRowNew.createCell(50).setCellValue("120 DPD");
        headRowNew.getCell(50).setCellStyle(styleTextHeaders);
        headRowNew.createCell(51).setCellStyle(styleTextHeaders);
        headRowNew.createCell(52).setCellStyle(styleTextHeaders);
        headRowNew.createCell(53).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 50, 53));

        headRowRepeat.createCell(50).setCellValue("120 DPD");
        headRowRepeat.getCell(50).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(51).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(52).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(53).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 50, 53));

        underHeadRowAll.createCell(50).setCellValue("Count");
        underHeadRowAll.getCell(50).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(51).setCellValue("%");
        underHeadRowAll.getCell(51).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(52).setCellValue("Amount");
        underHeadRowAll.getCell(52).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(53).setCellValue("%");
        underHeadRowAll.getCell(53).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(50).setCellValue("Count");
        underHeadRowNew.getCell(50).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(51).setCellValue("%");
        underHeadRowNew.getCell(51).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(52).setCellValue("Amount");
        underHeadRowNew.getCell(52).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(53).setCellValue("%");
        underHeadRowNew.getCell(53).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(50).setCellValue("Count");
        underHeadRowRepeat.getCell(50).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(51).setCellValue("%");
        underHeadRowRepeat.getCell(51).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(52).setCellValue("Amount");
        underHeadRowRepeat.getCell(52).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(53).setCellValue("%");
        underHeadRowRepeat.getCell(53).setCellStyle(styleTextHeaders);

        headRowAll.createCell(54).setCellValue("150 DPD");
        headRowAll.getCell(54).setCellStyle(styleTextHeaders);
        headRowAll.createCell(55).setCellStyle(styleTextHeaders);
        headRowAll.createCell(56).setCellStyle(styleTextHeaders);
        headRowAll.createCell(57).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 54, 57));

        headRowNew.createCell(54).setCellValue("150 DPD");
        headRowNew.getCell(54).setCellStyle(styleTextHeaders);
        headRowNew.createCell(55).setCellStyle(styleTextHeaders);
        headRowNew.createCell(56).setCellStyle(styleTextHeaders);
        headRowNew.createCell(57).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 54, 57));

        headRowRepeat.createCell(54).setCellValue("150 DPD");
        headRowRepeat.getCell(54).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(55).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(56).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(57).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 54, 57));

        underHeadRowAll.createCell(54).setCellValue("Count");
        underHeadRowAll.getCell(54).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(55).setCellValue("%");
        underHeadRowAll.getCell(55).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(56).setCellValue("Amount");
        underHeadRowAll.getCell(56).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(57).setCellValue("%");
        underHeadRowAll.getCell(57).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(54).setCellValue("Count");
        underHeadRowNew.getCell(54).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(55).setCellValue("%");
        underHeadRowNew.getCell(55).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(56).setCellValue("Amount");
        underHeadRowNew.getCell(56).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(57).setCellValue("%");
        underHeadRowNew.getCell(57).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(54).setCellValue("Count");
        underHeadRowRepeat.getCell(54).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(55).setCellValue("%");
        underHeadRowRepeat.getCell(55).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(56).setCellValue("Amount");
        underHeadRowRepeat.getCell(56).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(57).setCellValue("%");
        underHeadRowRepeat.getCell(57).setCellStyle(styleTextHeaders);

        headRowAll.createCell(58).setCellValue("180 DPD");
        headRowAll.getCell(58).setCellStyle(styleTextHeaders);
        headRowAll.createCell(59).setCellStyle(styleTextHeaders);
        headRowAll.createCell(60).setCellStyle(styleTextHeaders);
        headRowAll.createCell(61).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 58, 61));

        headRowNew.createCell(58).setCellValue("180 DPD");
        headRowNew.getCell(58).setCellStyle(styleTextHeaders);
        headRowNew.createCell(59).setCellStyle(styleTextHeaders);
        headRowNew.createCell(60).setCellStyle(styleTextHeaders);
        headRowNew.createCell(61).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 58, 61));

        headRowRepeat.createCell(58).setCellValue("180 DPD");
        headRowRepeat.getCell(58).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(59).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(60).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(61).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 58, 61));

        underHeadRowAll.createCell(58).setCellValue("Count");
        underHeadRowAll.getCell(58).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(59).setCellValue("%");
        underHeadRowAll.getCell(59).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(60).setCellValue("Amount");
        underHeadRowAll.getCell(60).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(61).setCellValue("%");
        underHeadRowAll.getCell(61).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(58).setCellValue("Count");
        underHeadRowNew.getCell(58).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(59).setCellValue("%");
        underHeadRowNew.getCell(59).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(60).setCellValue("Amount");
        underHeadRowNew.getCell(60).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(61).setCellValue("%");
        underHeadRowNew.getCell(61).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(58).setCellValue("Count");
        underHeadRowRepeat.getCell(58).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(59).setCellValue("%");
        underHeadRowRepeat.getCell(59).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(60).setCellValue("Amount");
        underHeadRowRepeat.getCell(60).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(61).setCellValue("%");
        underHeadRowRepeat.getCell(61).setCellStyle(styleTextHeaders);

        headRowAll.createCell(62).setCellValue("250 DPD");
        headRowAll.getCell(62).setCellStyle(styleTextHeaders);
        headRowAll.createCell(63).setCellStyle(styleTextHeaders);
        headRowAll.createCell(64).setCellStyle(styleTextHeaders);
        headRowAll.createCell(65).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 62, 65));

        headRowNew.createCell(62).setCellValue("250 DPD");
        headRowNew.getCell(62).setCellStyle(styleTextHeaders);
        headRowNew.createCell(63).setCellStyle(styleTextHeaders);
        headRowNew.createCell(64).setCellStyle(styleTextHeaders);
        headRowNew.createCell(65).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 62, 65));

        headRowRepeat.createCell(62).setCellValue("250 DPD");
        headRowRepeat.getCell(62).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(63).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(64).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(65).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 62, 65));

        underHeadRowAll.createCell(62).setCellValue("Count");
        underHeadRowAll.getCell(62).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(63).setCellValue("%");
        underHeadRowAll.getCell(63).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(64).setCellValue("Amount");
        underHeadRowAll.getCell(64).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(65).setCellValue("%");
        underHeadRowAll.getCell(65).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(62).setCellValue("Count");
        underHeadRowNew.getCell(62).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(63).setCellValue("%");
        underHeadRowNew.getCell(63).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(64).setCellValue("Amount");
        underHeadRowNew.getCell(64).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(65).setCellValue("%");
        underHeadRowNew.getCell(65).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(62).setCellValue("Count");
        underHeadRowRepeat.getCell(62).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(63).setCellValue("%");
        underHeadRowRepeat.getCell(63).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(64).setCellValue("Amount");
        underHeadRowRepeat.getCell(64).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(65).setCellValue("%");
        underHeadRowRepeat.getCell(65).setCellStyle(styleTextHeaders);

        headRowAll.createCell(66).setCellValue("300 DPD");
        headRowAll.getCell(66).setCellStyle(styleTextHeaders);
        headRowAll.createCell(67).setCellStyle(styleTextHeaders);
        headRowAll.createCell(68).setCellStyle(styleTextHeaders);
        headRowAll.createCell(69).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 66, 69));

        headRowNew.createCell(66).setCellValue("300 DPD");
        headRowNew.getCell(66).setCellStyle(styleTextHeaders);
        headRowNew.createCell(67).setCellStyle(styleTextHeaders);
        headRowNew.createCell(68).setCellStyle(styleTextHeaders);
        headRowNew.createCell(69).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 66, 69));

        headRowRepeat.createCell(66).setCellValue("300 DPD");
        headRowRepeat.getCell(66).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(67).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(68).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(69).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 66, 69));

        underHeadRowAll.createCell(66).setCellValue("Count");
        underHeadRowAll.getCell(66).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(67).setCellValue("%");
        underHeadRowAll.getCell(67).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(68).setCellValue("Amount");
        underHeadRowAll.getCell(68).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(69).setCellValue("%");
        underHeadRowAll.getCell(69).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(66).setCellValue("Count");
        underHeadRowNew.getCell(66).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(67).setCellValue("%");
        underHeadRowNew.getCell(67).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(68).setCellValue("Amount");
        underHeadRowNew.getCell(68).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(69).setCellValue("%");
        underHeadRowNew.getCell(69).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(66).setCellValue("Count");
        underHeadRowRepeat.getCell(66).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(67).setCellValue("%");
        underHeadRowRepeat.getCell(67).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(68).setCellValue("Amount");
        underHeadRowRepeat.getCell(68).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(69).setCellValue("%");
        underHeadRowRepeat.getCell(69).setCellStyle(styleTextHeaders);

        headRowAll.createCell(70).setCellValue("500 DPD");
        headRowAll.getCell(70).setCellStyle(styleTextHeaders);
        headRowAll.createCell(71).setCellStyle(styleTextHeaders);
        headRowAll.createCell(72).setCellStyle(styleTextHeaders);
        headRowAll.createCell(73).setCellStyle(styleTextHeaders);
        sheetCommonDailyAll.addMergedRegion(new CellRangeAddress(row, row, 70, 73));

        headRowNew.createCell(70).setCellValue("500 DPD");
        headRowNew.getCell(70).setCellStyle(styleTextHeaders);
        headRowNew.createCell(71).setCellStyle(styleTextHeaders);
        headRowNew.createCell(72).setCellStyle(styleTextHeaders);
        headRowNew.createCell(73).setCellStyle(styleTextHeaders);
        sheetCommonDailyNew.addMergedRegion(new CellRangeAddress(row, row, 70, 73));

        headRowRepeat.createCell(70).setCellValue("500 DPD");
        headRowRepeat.getCell(70).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(71).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(72).setCellStyle(styleTextHeaders);
        headRowRepeat.createCell(73).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeat.addMergedRegion(new CellRangeAddress(row, row, 70, 73));

        underHeadRowAll.createCell(70).setCellValue("Count");
        underHeadRowAll.getCell(70).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(71).setCellValue("%");
        underHeadRowAll.getCell(71).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(72).setCellValue("Amount");
        underHeadRowAll.getCell(72).setCellStyle(styleTextHeaders);
        underHeadRowAll.createCell(73).setCellValue("%");
        underHeadRowAll.getCell(73).setCellStyle(styleTextHeaders);

        underHeadRowNew.createCell(70).setCellValue("Count");
        underHeadRowNew.getCell(70).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(71).setCellValue("%");
        underHeadRowNew.getCell(71).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(72).setCellValue("Amount");
        underHeadRowNew.getCell(72).setCellStyle(styleTextHeaders);
        underHeadRowNew.createCell(73).setCellValue("%");
        underHeadRowNew.getCell(73).setCellStyle(styleTextHeaders);

        underHeadRowRepeat.createCell(70).setCellValue("Count");
        underHeadRowRepeat.getCell(70).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(71).setCellValue("%");
        underHeadRowRepeat.getCell(71).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(72).setCellValue("Amount");
        underHeadRowRepeat.getCell(72).setCellStyle(styleTextHeaders);
        underHeadRowRepeat.createCell(73).setCellValue("%");
        underHeadRowRepeat.getCell(73).setCellStyle(styleTextHeaders);

        row += 2;
        int rowNumberForGroupFirst = row;
        int rowNumberForGroupLast;

        for (int a = 0; a < reportObject.getDateList().size(); a++) {
            LoanInfoExpiredInfo loanInfoDate = new LoanInfoExpiredInfo();

            for (LoanInfoExpiredInfo loan : reportObject.getLoanInfoDateList()) {
                if (loan.getDate().equals(reportObject.getDateList().get(a))) {
                    loanInfoDate = loan;
                }
            }

            if (loanInfoDate.getDate() != null) {
                Row rowCommon = sheetCommonDailyAll.createRow(row);
                Row rowCommonNew = sheetCommonDailyNew.createRow(row);
                Row rowCommonRepeat = sheetCommonDailyRepeat.createRow(row);
                
                rowCommon.createCell(0).setCellValue(loanInfoDate.getDate());
                rowCommon.getCell(0).setCellStyle(styleDate);
                
                if (loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(1).setCellValue(loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(1).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(2).setCellValue(loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(2).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalIssuedLoanAmount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(3).setCellValue(loanInfoDate.getTotalIssuedLoanAmount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(3).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalActiveLoanCount() != null) {
                    rowCommon.createCell(4).setCellValue(loanInfoDate.getTotalActiveLoanCount());
                    rowCommon.getCell(4).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalActiveLoanCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(5).setCellValue((double) loanInfoDate.getTotalActiveLoanCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(5).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn2DpdCount() != null) {
                    rowCommon.createCell(6).setCellValue(loanInfoDate.getTotalOn2DpdCount());
                    rowCommon.getCell(6).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn2DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(7).setCellValue((double) loanInfoDate.getTotalOn2DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(7).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn2DpdAmount() != null) {
                    rowCommon.createCell(8).setCellValue(loanInfoDate.getTotalOn2DpdAmount());
                    rowCommon.getCell(8).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn2DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(9).setCellValue(loanInfoDate.getTotalOn2DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(9).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn5DpdCount() != null) {
                    rowCommon.createCell(10).setCellValue(loanInfoDate.getTotalOn5DpdCount());
                    rowCommon.getCell(10).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn5DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(11).setCellValue((double) loanInfoDate.getTotalOn5DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(11).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn5DpdAmount() != null) {
                    rowCommon.createCell(12).setCellValue(loanInfoDate.getTotalOn5DpdAmount());
                    rowCommon.getCell(12).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn5DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(13).setCellValue(loanInfoDate.getTotalOn5DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(13).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn10DpdCount() != null) {
                    rowCommon.createCell(14).setCellValue(loanInfoDate.getTotalOn10DpdCount());
                    rowCommon.getCell(14).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn10DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(15).setCellValue((double) loanInfoDate.getTotalOn10DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(15).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn10DpdAmount() != null) {
                    rowCommon.createCell(16).setCellValue(loanInfoDate.getTotalOn10DpdAmount());
                    rowCommon.getCell(16).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn10DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(17).setCellValue(loanInfoDate.getTotalOn10DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(17).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn15DpdCount() != null) {
                    rowCommon.createCell(18).setCellValue(loanInfoDate.getTotalOn15DpdCount());
                    rowCommon.getCell(18).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn15DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(19).setCellValue((double) loanInfoDate.getTotalOn15DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(19).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn15DpdAmount() != null) {
                    rowCommon.createCell(20).setCellValue(loanInfoDate.getTotalOn15DpdAmount());
                    rowCommon.getCell(20).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn15DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(21).setCellValue(loanInfoDate.getTotalOn15DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(21).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn20DpdCount() != null) {
                    rowCommon.createCell(22).setCellValue(loanInfoDate.getTotalOn20DpdCount());
                    rowCommon.getCell(22).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn20DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(23).setCellValue((double) loanInfoDate.getTotalOn20DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(23).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn20DpdAmount() != null) {
                    rowCommon.createCell(24).setCellValue(loanInfoDate.getTotalOn20DpdAmount());
                    rowCommon.getCell(24).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn20DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(25).setCellValue(loanInfoDate.getTotalOn20DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(25).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn25DpdCount() != null) {
                    rowCommon.createCell(26).setCellValue(loanInfoDate.getTotalOn25DpdCount());
                    rowCommon.getCell(26).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn25DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(27).setCellValue((double) loanInfoDate.getTotalOn25DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(27).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn25DpdAmount() != null) {
                    rowCommon.createCell(28).setCellValue(loanInfoDate.getTotalOn25DpdAmount());
                    rowCommon.getCell(28).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn25DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(29).setCellValue(loanInfoDate.getTotalOn25DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(29).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn30DpdCount() != null) {
                    rowCommon.createCell(30).setCellValue(loanInfoDate.getTotalOn30DpdCount());
                    rowCommon.getCell(30).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn30DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(31).setCellValue((double) loanInfoDate.getTotalOn30DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(31).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn30DpdAmount() != null) {
                    rowCommon.createCell(32).setCellValue(loanInfoDate.getTotalOn30DpdAmount());
                    rowCommon.getCell(32).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn30DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(33).setCellValue(loanInfoDate.getTotalOn30DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(33).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn40DpdCount() != null) {
                    rowCommon.createCell(34).setCellValue(loanInfoDate.getTotalOn40DpdCount());
                    rowCommon.getCell(34).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn40DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(35).setCellValue((double) loanInfoDate.getTotalOn40DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(35).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn40DpdAmount() != null) {
                    rowCommon.createCell(36).setCellValue(loanInfoDate.getTotalOn40DpdAmount());
                    rowCommon.getCell(36).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn40DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(37).setCellValue(loanInfoDate.getTotalOn40DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(37).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn50DpdCount() != null) {
                    rowCommon.createCell(38).setCellValue(loanInfoDate.getTotalOn50DpdCount());
                    rowCommon.getCell(38).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn50DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(39).setCellValue((double) loanInfoDate.getTotalOn50DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(39).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn50DpdAmount() != null) {
                    rowCommon.createCell(40).setCellValue(loanInfoDate.getTotalOn50DpdAmount());
                    rowCommon.getCell(40).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn50DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(41).setCellValue(loanInfoDate.getTotalOn50DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(41).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn60DpdCount() != null) {
                    rowCommon.createCell(42).setCellValue(loanInfoDate.getTotalOn60DpdCount());
                    rowCommon.getCell(42).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn60DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(43).setCellValue((double) loanInfoDate.getTotalOn60DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(43).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn60DpdAmount() != null) {
                    rowCommon.createCell(44).setCellValue(loanInfoDate.getTotalOn60DpdAmount());
                    rowCommon.getCell(44).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn60DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(45).setCellValue(loanInfoDate.getTotalOn60DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(45).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn90DpdCount() != null) {
                    rowCommon.createCell(46).setCellValue(loanInfoDate.getTotalOn90DpdCount());
                    rowCommon.getCell(46).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn90DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(47).setCellValue((double) loanInfoDate.getTotalOn90DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(47).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn90DpdAmount() != null) {
                    rowCommon.createCell(48).setCellValue(loanInfoDate.getTotalOn90DpdAmount());
                    rowCommon.getCell(48).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn90DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(49).setCellValue(loanInfoDate.getTotalOn90DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(49).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn120DpdCount() != null) {
                    rowCommon.createCell(50).setCellValue(loanInfoDate.getTotalOn120DpdCount());
                    rowCommon.getCell(50).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn120DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(51).setCellValue((double) loanInfoDate.getTotalOn120DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(51).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn120DpdAmount() != null) {
                    rowCommon.createCell(52).setCellValue(loanInfoDate.getTotalOn120DpdAmount());
                    rowCommon.getCell(52).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn120DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(53).setCellValue(loanInfoDate.getTotalOn120DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(53).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn150DpdCount() != null) {
                    rowCommon.createCell(54).setCellValue(loanInfoDate.getTotalOn150DpdCount());
                    rowCommon.getCell(54).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn150DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(55).setCellValue((double) loanInfoDate.getTotalOn150DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(55).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn150DpdAmount() != null) {
                    rowCommon.createCell(56).setCellValue(loanInfoDate.getTotalOn150DpdAmount());
                    rowCommon.getCell(56).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn150DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(57).setCellValue(loanInfoDate.getTotalOn150DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(57).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn180DpdCount() != null) {
                    rowCommon.createCell(58).setCellValue(loanInfoDate.getTotalOn180DpdCount());
                    rowCommon.getCell(58).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn180DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(59).setCellValue((double) loanInfoDate.getTotalOn180DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(59).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn180DpdAmount() != null) {
                    rowCommon.createCell(60).setCellValue(loanInfoDate.getTotalOn180DpdAmount());
                    rowCommon.getCell(60).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn180DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(61).setCellValue(loanInfoDate.getTotalOn180DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(61).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn250DpdCount() != null) {
                    rowCommon.createCell(62).setCellValue(loanInfoDate.getTotalOn250DpdCount());
                    rowCommon.getCell(62).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn250DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(63).setCellValue((double) loanInfoDate.getTotalOn250DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(63).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn250DpdAmount() != null) {
                    rowCommon.createCell(64).setCellValue(loanInfoDate.getTotalOn250DpdAmount());
                    rowCommon.getCell(64).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn250DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(65).setCellValue(loanInfoDate.getTotalOn250DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(65).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn300DpdCount() != null) {
                    rowCommon.createCell(66).setCellValue(loanInfoDate.getTotalOn300DpdCount());
                    rowCommon.getCell(66).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn300DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(67).setCellValue((double) loanInfoDate.getTotalOn300DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(67).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn300DpdAmount() != null) {
                    rowCommon.createCell(68).setCellValue(loanInfoDate.getTotalOn300DpdAmount());
                    rowCommon.getCell(68).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn300DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(69).setCellValue(loanInfoDate.getTotalOn300DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(69).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn500DpdCount() != null) {
                    rowCommon.createCell(70).setCellValue(loanInfoDate.getTotalOn500DpdCount());
                    rowCommon.getCell(70).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn500DpdCount() != null && loanInfoDate.getTotalIssuedLoanCount() != null) {
                    rowCommon.createCell(71).setCellValue((double) loanInfoDate.getTotalOn500DpdCount() /
                            (double) loanInfoDate.getTotalIssuedLoanCount());
                    rowCommon.getCell(71).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getTotalOn500DpdAmount() != null) {
                    rowCommon.createCell(72).setCellValue(loanInfoDate.getTotalOn500DpdAmount());
                    rowCommon.getCell(72).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getTotalOn500DpdAmount() != null && loanInfoDate.getTotalIssuedLoanAmount() != null) {
                    rowCommon.createCell(73).setCellValue(loanInfoDate.getTotalOn500DpdAmount() /
                            loanInfoDate.getTotalIssuedLoanAmount());
                    rowCommon.getCell(73).setCellStyle(stylePercent);
                }

                rowCommonNew.createCell(0).setCellValue(loanInfoDate.getDate());
                rowCommonNew.getCell(0).setCellStyle(styleDate);

                if (loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(1).setCellValue(loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(1).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(2).setCellValue(loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(2).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialIssuedLoanAmount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(3).setCellValue(loanInfoDate.getPotentialIssuedLoanAmount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(3).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialActiveLoanCount() != null) {
                    rowCommonNew.createCell(4).setCellValue(loanInfoDate.getPotentialActiveLoanCount());
                    rowCommonNew.getCell(4).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialActiveLoanCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(5).setCellValue((double) loanInfoDate.getPotentialActiveLoanCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(5).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn2DpdCount() != null) {
                    rowCommonNew.createCell(6).setCellValue(loanInfoDate.getPotentialOn2DpdCount());
                    rowCommonNew.getCell(6).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn2DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(7).setCellValue((double) loanInfoDate.getPotentialOn2DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(7).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn2DpdAmount() != null) {
                    rowCommonNew.createCell(8).setCellValue(loanInfoDate.getPotentialOn2DpdAmount());
                    rowCommonNew.getCell(8).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn2DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(9).setCellValue(loanInfoDate.getPotentialOn2DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(9).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn5DpdCount() != null) {
                    rowCommonNew.createCell(10).setCellValue(loanInfoDate.getPotentialOn5DpdCount());
                    rowCommonNew.getCell(10).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn5DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(11).setCellValue((double) loanInfoDate.getPotentialOn5DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(11).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn5DpdAmount() != null) {
                    rowCommonNew.createCell(12).setCellValue(loanInfoDate.getPotentialOn5DpdAmount());
                    rowCommonNew.getCell(12).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn5DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(13).setCellValue(loanInfoDate.getPotentialOn5DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(13).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn10DpdCount() != null) {
                    rowCommonNew.createCell(14).setCellValue(loanInfoDate.getPotentialOn10DpdCount());
                    rowCommonNew.getCell(14).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn10DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(15).setCellValue((double) loanInfoDate.getPotentialOn10DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(15).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn10DpdAmount() != null) {
                    rowCommonNew.createCell(16).setCellValue(loanInfoDate.getPotentialOn10DpdAmount());
                    rowCommonNew.getCell(16).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn10DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(17).setCellValue(loanInfoDate.getPotentialOn10DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(17).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn15DpdCount() != null) {
                    rowCommonNew.createCell(18).setCellValue(loanInfoDate.getPotentialOn15DpdCount());
                    rowCommonNew.getCell(18).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn15DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(19).setCellValue((double) loanInfoDate.getPotentialOn15DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(19).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn15DpdAmount() != null) {
                    rowCommonNew.createCell(20).setCellValue(loanInfoDate.getPotentialOn15DpdAmount());
                    rowCommonNew.getCell(20).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn15DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(21).setCellValue(loanInfoDate.getPotentialOn15DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(21).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn20DpdCount() != null) {
                    rowCommonNew.createCell(22).setCellValue(loanInfoDate.getPotentialOn20DpdCount());
                    rowCommonNew.getCell(22).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn20DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(23).setCellValue((double) loanInfoDate.getPotentialOn20DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(23).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn20DpdAmount() != null) {
                    rowCommonNew.createCell(24).setCellValue(loanInfoDate.getPotentialOn20DpdAmount());
                    rowCommonNew.getCell(24).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn20DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(25).setCellValue(loanInfoDate.getPotentialOn20DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(25).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn25DpdCount() != null) {
                    rowCommonNew.createCell(26).setCellValue(loanInfoDate.getPotentialOn25DpdCount());
                    rowCommonNew.getCell(26).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn25DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(27).setCellValue((double) loanInfoDate.getPotentialOn25DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(27).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn25DpdAmount() != null) {
                    rowCommonNew.createCell(28).setCellValue(loanInfoDate.getPotentialOn25DpdAmount());
                    rowCommonNew.getCell(28).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn25DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(29).setCellValue(loanInfoDate.getPotentialOn25DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(29).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn30DpdCount() != null) {
                    rowCommonNew.createCell(30).setCellValue(loanInfoDate.getPotentialOn30DpdCount());
                    rowCommonNew.getCell(30).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn30DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(31).setCellValue((double) loanInfoDate.getPotentialOn30DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(31).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn30DpdAmount() != null) {
                    rowCommonNew.createCell(32).setCellValue(loanInfoDate.getPotentialOn30DpdAmount());
                    rowCommonNew.getCell(32).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn30DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(33).setCellValue(loanInfoDate.getPotentialOn30DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(33).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn40DpdCount() != null) {
                    rowCommonNew.createCell(34).setCellValue(loanInfoDate.getPotentialOn40DpdCount());
                    rowCommonNew.getCell(34).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn40DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(35).setCellValue((double) loanInfoDate.getPotentialOn40DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(35).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn40DpdAmount() != null) {
                    rowCommonNew.createCell(36).setCellValue(loanInfoDate.getPotentialOn40DpdAmount());
                    rowCommonNew.getCell(36).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn40DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(37).setCellValue(loanInfoDate.getPotentialOn40DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(37).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn50DpdCount() != null) {
                    rowCommonNew.createCell(38).setCellValue(loanInfoDate.getPotentialOn50DpdCount());
                    rowCommonNew.getCell(38).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn50DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(39).setCellValue((double) loanInfoDate.getPotentialOn50DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(39).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn50DpdAmount() != null) {
                    rowCommonNew.createCell(40).setCellValue(loanInfoDate.getPotentialOn50DpdAmount());
                    rowCommonNew.getCell(40).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn50DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(41).setCellValue(loanInfoDate.getPotentialOn50DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(41).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn60DpdCount() != null) {
                    rowCommonNew.createCell(42).setCellValue(loanInfoDate.getPotentialOn60DpdCount());
                    rowCommonNew.getCell(42).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn60DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(43).setCellValue((double) loanInfoDate.getPotentialOn60DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(43).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn60DpdAmount() != null) {
                    rowCommonNew.createCell(44).setCellValue(loanInfoDate.getPotentialOn60DpdAmount());
                    rowCommonNew.getCell(44).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn60DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(45).setCellValue(loanInfoDate.getPotentialOn60DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(45).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn90DpdCount() != null) {
                    rowCommonNew.createCell(46).setCellValue(loanInfoDate.getPotentialOn90DpdCount());
                    rowCommonNew.getCell(46).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn90DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(47).setCellValue((double) loanInfoDate.getPotentialOn90DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(47).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn90DpdAmount() != null) {
                    rowCommonNew.createCell(48).setCellValue(loanInfoDate.getPotentialOn90DpdAmount());
                    rowCommonNew.getCell(48).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn90DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(49).setCellValue(loanInfoDate.getPotentialOn90DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(49).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn120DpdCount() != null) {
                    rowCommonNew.createCell(50).setCellValue(loanInfoDate.getPotentialOn120DpdCount());
                    rowCommonNew.getCell(50).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn120DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(51).setCellValue((double) loanInfoDate.getPotentialOn120DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(51).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn120DpdAmount() != null) {
                    rowCommonNew.createCell(52).setCellValue(loanInfoDate.getPotentialOn120DpdAmount());
                    rowCommonNew.getCell(52).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn120DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(53).setCellValue(loanInfoDate.getPotentialOn120DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(53).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn150DpdCount() != null) {
                    rowCommonNew.createCell(54).setCellValue(loanInfoDate.getPotentialOn150DpdCount());
                    rowCommonNew.getCell(54).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn150DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(55).setCellValue((double) loanInfoDate.getPotentialOn150DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(55).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn150DpdAmount() != null) {
                    rowCommonNew.createCell(56).setCellValue(loanInfoDate.getPotentialOn150DpdAmount());
                    rowCommonNew.getCell(56).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn150DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(57).setCellValue(loanInfoDate.getPotentialOn150DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(57).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn180DpdCount() != null) {
                    rowCommonNew.createCell(58).setCellValue(loanInfoDate.getPotentialOn180DpdCount());
                    rowCommonNew.getCell(58).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn180DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(59).setCellValue((double) loanInfoDate.getPotentialOn180DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(59).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn180DpdAmount() != null) {
                    rowCommonNew.createCell(60).setCellValue(loanInfoDate.getPotentialOn180DpdAmount());
                    rowCommonNew.getCell(60).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn180DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(61).setCellValue(loanInfoDate.getPotentialOn180DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(61).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn250DpdCount() != null) {
                    rowCommonNew.createCell(62).setCellValue(loanInfoDate.getPotentialOn250DpdCount());
                    rowCommonNew.getCell(62).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn250DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(63).setCellValue((double) loanInfoDate.getPotentialOn250DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(63).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn250DpdAmount() != null) {
                    rowCommonNew.createCell(64).setCellValue(loanInfoDate.getPotentialOn250DpdAmount());
                    rowCommonNew.getCell(64).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn250DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(65).setCellValue(loanInfoDate.getPotentialOn250DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(65).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn300DpdCount() != null) {
                    rowCommonNew.createCell(66).setCellValue(loanInfoDate.getPotentialOn300DpdCount());
                    rowCommonNew.getCell(66).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn300DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(67).setCellValue((double) loanInfoDate.getPotentialOn300DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(67).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn300DpdAmount() != null) {
                    rowCommonNew.createCell(68).setCellValue(loanInfoDate.getPotentialOn300DpdAmount());
                    rowCommonNew.getCell(68).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn300DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(69).setCellValue(loanInfoDate.getPotentialOn300DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(69).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn500DpdCount() != null) {
                    rowCommonNew.createCell(70).setCellValue(loanInfoDate.getPotentialOn500DpdCount());
                    rowCommonNew.getCell(70).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn500DpdCount() != null && loanInfoDate.getPotentialIssuedLoanCount() != null) {
                    rowCommonNew.createCell(71).setCellValue((double) loanInfoDate.getPotentialOn500DpdCount() /
                            (double) loanInfoDate.getPotentialIssuedLoanCount());
                    rowCommonNew.getCell(71).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getPotentialOn500DpdAmount() != null) {
                    rowCommonNew.createCell(72).setCellValue(loanInfoDate.getPotentialOn500DpdAmount());
                    rowCommonNew.getCell(72).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getPotentialOn500DpdAmount() != null && loanInfoDate.getPotentialIssuedLoanAmount() != null) {
                    rowCommonNew.createCell(73).setCellValue(loanInfoDate.getPotentialOn500DpdAmount() /
                            loanInfoDate.getPotentialIssuedLoanAmount());
                    rowCommonNew.getCell(73).setCellStyle(stylePercent);
                }

                rowCommonRepeat.createCell(0).setCellValue(loanInfoDate.getDate());
                rowCommonRepeat.getCell(0).setCellStyle(styleDate);

                if (loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(1).setCellValue(loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(1).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(2).setCellValue(loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(2).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatIssuedLoanAmount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(3).setCellValue(loanInfoDate.getRepeatIssuedLoanAmount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(3).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatActiveLoanCount() != null) {
                    rowCommonRepeat.createCell(4).setCellValue(loanInfoDate.getRepeatActiveLoanCount());
                    rowCommonRepeat.getCell(4).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatActiveLoanCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(5).setCellValue((double) loanInfoDate.getRepeatActiveLoanCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(5).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn2DpdCount() != null) {
                    rowCommonRepeat.createCell(6).setCellValue(loanInfoDate.getRepeatOn2DpdCount());
                    rowCommonRepeat.getCell(6).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn2DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(7).setCellValue((double) loanInfoDate.getRepeatOn2DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(7).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn2DpdAmount() != null) {
                    rowCommonRepeat.createCell(8).setCellValue(loanInfoDate.getRepeatOn2DpdAmount());
                    rowCommonRepeat.getCell(8).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn2DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(9).setCellValue(loanInfoDate.getRepeatOn2DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(9).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn5DpdCount() != null) {
                    rowCommonRepeat.createCell(10).setCellValue(loanInfoDate.getRepeatOn5DpdCount());
                    rowCommonRepeat.getCell(10).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn5DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(11).setCellValue((double) loanInfoDate.getRepeatOn5DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(11).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn5DpdAmount() != null) {
                    rowCommonRepeat.createCell(12).setCellValue(loanInfoDate.getRepeatOn5DpdAmount());
                    rowCommonRepeat.getCell(12).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn5DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(13).setCellValue(loanInfoDate.getRepeatOn5DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(13).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn10DpdCount() != null) {
                    rowCommonRepeat.createCell(14).setCellValue(loanInfoDate.getRepeatOn10DpdCount());
                    rowCommonRepeat.getCell(14).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn10DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(15).setCellValue((double) loanInfoDate.getRepeatOn10DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(15).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn10DpdAmount() != null) {
                    rowCommonRepeat.createCell(16).setCellValue(loanInfoDate.getRepeatOn10DpdAmount());
                    rowCommonRepeat.getCell(16).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn10DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(17).setCellValue(loanInfoDate.getRepeatOn10DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(17).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn15DpdCount() != null) {
                    rowCommonRepeat.createCell(18).setCellValue(loanInfoDate.getRepeatOn15DpdCount());
                    rowCommonRepeat.getCell(18).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn15DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(19).setCellValue((double) loanInfoDate.getRepeatOn15DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(19).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn15DpdAmount() != null) {
                    rowCommonRepeat.createCell(20).setCellValue(loanInfoDate.getRepeatOn15DpdAmount());
                    rowCommonRepeat.getCell(20).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn15DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(21).setCellValue(loanInfoDate.getRepeatOn15DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(21).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn20DpdCount() != null) {
                    rowCommonRepeat.createCell(22).setCellValue(loanInfoDate.getRepeatOn20DpdCount());
                    rowCommonRepeat.getCell(22).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn20DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(23).setCellValue((double) loanInfoDate.getRepeatOn20DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(23).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn20DpdAmount() != null) {
                    rowCommonRepeat.createCell(24).setCellValue(loanInfoDate.getRepeatOn20DpdAmount());
                    rowCommonRepeat.getCell(24).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn20DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(25).setCellValue(loanInfoDate.getRepeatOn20DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(25).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn25DpdCount() != null) {
                    rowCommonRepeat.createCell(26).setCellValue(loanInfoDate.getRepeatOn25DpdCount());
                    rowCommonRepeat.getCell(26).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn25DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(27).setCellValue((double) loanInfoDate.getRepeatOn25DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(27).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn25DpdAmount() != null) {
                    rowCommonRepeat.createCell(28).setCellValue(loanInfoDate.getRepeatOn25DpdAmount());
                    rowCommonRepeat.getCell(28).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn25DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(29).setCellValue(loanInfoDate.getRepeatOn25DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(29).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn30DpdCount() != null) {
                    rowCommonRepeat.createCell(30).setCellValue(loanInfoDate.getRepeatOn30DpdCount());
                    rowCommonRepeat.getCell(30).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn30DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(31).setCellValue((double) loanInfoDate.getRepeatOn30DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(31).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn30DpdAmount() != null) {
                    rowCommonRepeat.createCell(32).setCellValue(loanInfoDate.getRepeatOn30DpdAmount());
                    rowCommonRepeat.getCell(32).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn30DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(33).setCellValue(loanInfoDate.getRepeatOn30DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(33).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn40DpdCount() != null) {
                    rowCommonRepeat.createCell(34).setCellValue(loanInfoDate.getRepeatOn40DpdCount());
                    rowCommonRepeat.getCell(34).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn40DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(35).setCellValue((double) loanInfoDate.getRepeatOn40DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(35).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn40DpdAmount() != null) {
                    rowCommonRepeat.createCell(36).setCellValue(loanInfoDate.getRepeatOn40DpdAmount());
                    rowCommonRepeat.getCell(36).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn40DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(37).setCellValue(loanInfoDate.getRepeatOn40DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(37).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn50DpdCount() != null) {
                    rowCommonRepeat.createCell(38).setCellValue(loanInfoDate.getRepeatOn50DpdCount());
                    rowCommonRepeat.getCell(38).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn50DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(39).setCellValue((double) loanInfoDate.getRepeatOn50DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(39).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn50DpdAmount() != null) {
                    rowCommonRepeat.createCell(40).setCellValue(loanInfoDate.getRepeatOn50DpdAmount());
                    rowCommonRepeat.getCell(40).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn50DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(41).setCellValue(loanInfoDate.getRepeatOn50DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(41).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn60DpdCount() != null) {
                    rowCommonRepeat.createCell(42).setCellValue(loanInfoDate.getRepeatOn60DpdCount());
                    rowCommonRepeat.getCell(42).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn60DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(43).setCellValue((double) loanInfoDate.getRepeatOn60DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(43).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn60DpdAmount() != null) {
                    rowCommonRepeat.createCell(44).setCellValue(loanInfoDate.getRepeatOn60DpdAmount());
                    rowCommonRepeat.getCell(44).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn60DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(45).setCellValue(loanInfoDate.getRepeatOn60DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(45).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn90DpdCount() != null) {
                    rowCommonRepeat.createCell(46).setCellValue(loanInfoDate.getRepeatOn90DpdCount());
                    rowCommonRepeat.getCell(46).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn90DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(47).setCellValue((double) loanInfoDate.getRepeatOn90DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(47).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn90DpdAmount() != null) {
                    rowCommonRepeat.createCell(48).setCellValue(loanInfoDate.getRepeatOn90DpdAmount());
                    rowCommonRepeat.getCell(48).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn90DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(49).setCellValue(loanInfoDate.getRepeatOn90DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(49).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn120DpdCount() != null) {
                    rowCommonRepeat.createCell(50).setCellValue(loanInfoDate.getRepeatOn120DpdCount());
                    rowCommonRepeat.getCell(50).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn120DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(51).setCellValue((double) loanInfoDate.getRepeatOn120DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(51).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn120DpdAmount() != null) {
                    rowCommonRepeat.createCell(52).setCellValue(loanInfoDate.getRepeatOn120DpdAmount());
                    rowCommonRepeat.getCell(52).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn120DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(53).setCellValue(loanInfoDate.getRepeatOn120DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(53).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn150DpdCount() != null) {
                    rowCommonRepeat.createCell(54).setCellValue(loanInfoDate.getRepeatOn150DpdCount());
                    rowCommonRepeat.getCell(54).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn150DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(55).setCellValue((double) loanInfoDate.getRepeatOn150DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(55).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn150DpdAmount() != null) {
                    rowCommonRepeat.createCell(56).setCellValue(loanInfoDate.getRepeatOn150DpdAmount());
                    rowCommonRepeat.getCell(56).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn150DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(57).setCellValue(loanInfoDate.getRepeatOn150DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(57).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn180DpdCount() != null) {
                    rowCommonRepeat.createCell(58).setCellValue(loanInfoDate.getRepeatOn180DpdCount());
                    rowCommonRepeat.getCell(58).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn180DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(59).setCellValue((double) loanInfoDate.getRepeatOn180DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(59).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn180DpdAmount() != null) {
                    rowCommonRepeat.createCell(60).setCellValue(loanInfoDate.getRepeatOn180DpdAmount());
                    rowCommonRepeat.getCell(60).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn180DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(61).setCellValue(loanInfoDate.getRepeatOn180DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(61).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn250DpdCount() != null) {
                    rowCommonRepeat.createCell(62).setCellValue(loanInfoDate.getRepeatOn250DpdCount());
                    rowCommonRepeat.getCell(62).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn250DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(63).setCellValue((double) loanInfoDate.getRepeatOn250DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(63).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn250DpdAmount() != null) {
                    rowCommonRepeat.createCell(64).setCellValue(loanInfoDate.getRepeatOn250DpdAmount());
                    rowCommonRepeat.getCell(64).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn250DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(65).setCellValue(loanInfoDate.getRepeatOn250DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(65).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn300DpdCount() != null) {
                    rowCommonRepeat.createCell(66).setCellValue(loanInfoDate.getRepeatOn300DpdCount());
                    rowCommonRepeat.getCell(66).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn300DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(67).setCellValue((double) loanInfoDate.getRepeatOn300DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(67).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn300DpdAmount() != null) {
                    rowCommonRepeat.createCell(68).setCellValue(loanInfoDate.getRepeatOn300DpdAmount());
                    rowCommonRepeat.getCell(68).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn300DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(69).setCellValue(loanInfoDate.getRepeatOn300DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(69).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn500DpdCount() != null) {
                    rowCommonRepeat.createCell(70).setCellValue(loanInfoDate.getRepeatOn500DpdCount());
                    rowCommonRepeat.getCell(70).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn500DpdCount() != null && loanInfoDate.getRepeatIssuedLoanCount() != null) {
                    rowCommonRepeat.createCell(71).setCellValue((double) loanInfoDate.getRepeatOn500DpdCount() /
                            (double) loanInfoDate.getRepeatIssuedLoanCount());
                    rowCommonRepeat.getCell(71).setCellStyle(stylePercent);
                }
                if (loanInfoDate.getRepeatOn500DpdAmount() != null) {
                    rowCommonRepeat.createCell(72).setCellValue(loanInfoDate.getRepeatOn500DpdAmount());
                    rowCommonRepeat.getCell(72).setCellStyle(styleNumber);
                }
                if (loanInfoDate.getRepeatOn500DpdAmount() != null && loanInfoDate.getRepeatIssuedLoanAmount() != null) {
                    rowCommonRepeat.createCell(73).setCellValue(loanInfoDate.getRepeatOn500DpdAmount() /
                            loanInfoDate.getRepeatIssuedLoanAmount());
                    rowCommonRepeat.getCell(73).setCellStyle(stylePercent);
                }


                row++;

                if (reportObject.getDateList().size() == a + 1 ||
                !reportObject.getDateList().get(a).getMonth()
                        .equals(reportObject.getDateList().get(a + 1).getMonth())) {
                    LocalDate month = null;
                    
                    for (LocalDate monthDate : reportObject.getMonthList()) {
                        if (monthDate.getMonth().equals(reportObject.getDateList().get(a).getMonth()) &&
                        monthDate.getYear() == reportObject.getDateList().get(a).getYear()) {
                            month = monthDate;
                        }
                    }

                    LoanInfoExpiredInfo loanInfoMonth = new LoanInfoExpiredInfo();
                    
                    for (LoanInfoExpiredInfo loanInfo : reportObject.getLoanInfoMonthList()) {
                        if (loanInfo.getDate().equals(month)) {
                            loanInfoMonth = loanInfo;
                        }
                    }
                    
                    if (loanInfoMonth.getDate() != null) {
                        rowNumberForGroupLast = row - 1;
                        sheetCommonDailyAll.groupRow(rowNumberForGroupFirst, rowNumberForGroupLast);
                        sheetCommonDailyNew.groupRow(rowNumberForGroupFirst, rowNumberForGroupLast);
                        sheetCommonDailyRepeat.groupRow(rowNumberForGroupFirst, rowNumberForGroupLast);

                        Row rowCommonMonth = sheetCommonDailyAll.createRow(row);
                        Row rowCommonMonthNew = sheetCommonDailyNew.createRow(row);
                        Row rowCommonMonthRepeat = sheetCommonDailyRepeat.createRow(row);
                        
                        rowCommonMonth.createCell(0).setCellValue(loanInfoMonth.getDate());
                        rowCommonMonth.getCell(0).setCellStyle(styleMonthBold);
                        if (loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(1).setCellValue(loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(1).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(2).setCellValue(loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(2).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalIssuedLoanAmount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(3).setCellValue(loanInfoMonth.getTotalIssuedLoanAmount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(3).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalActiveLoanCount() != null) {
                            rowCommonMonth.createCell(4).setCellValue(loanInfoMonth.getTotalActiveLoanCount());
                            rowCommonMonth.getCell(4).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalActiveLoanCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(5).setCellValue((double) loanInfoMonth.getTotalActiveLoanCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(5).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn2DpdCount() != null) {
                            rowCommonMonth.createCell(6).setCellValue(loanInfoMonth.getTotalOn2DpdCount());
                            rowCommonMonth.getCell(6).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn2DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(7).setCellValue((double) loanInfoMonth.getTotalOn2DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(7).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn2DpdAmount() != null) {
                            rowCommonMonth.createCell(8).setCellValue(loanInfoMonth.getTotalOn2DpdAmount());
                            rowCommonMonth.getCell(8).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn2DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(9).setCellValue(loanInfoMonth.getTotalOn2DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(9).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn5DpdCount() != null) {
                            rowCommonMonth.createCell(10).setCellValue(loanInfoMonth.getTotalOn5DpdCount());
                            rowCommonMonth.getCell(10).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn5DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(11).setCellValue((double) loanInfoMonth.getTotalOn5DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(11).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn5DpdAmount() != null) {
                            rowCommonMonth.createCell(12).setCellValue(loanInfoMonth.getTotalOn5DpdAmount());
                            rowCommonMonth.getCell(12).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn5DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(13).setCellValue(loanInfoMonth.getTotalOn5DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(13).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn10DpdCount() != null) {
                            rowCommonMonth.createCell(14).setCellValue(loanInfoMonth.getTotalOn10DpdCount());
                            rowCommonMonth.getCell(14).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn10DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(15).setCellValue((double) loanInfoMonth.getTotalOn10DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(15).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn10DpdAmount() != null) {
                            rowCommonMonth.createCell(16).setCellValue(loanInfoMonth.getTotalOn10DpdAmount());
                            rowCommonMonth.getCell(16).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn10DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(17).setCellValue(loanInfoMonth.getTotalOn10DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(17).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn15DpdCount() != null) {
                            rowCommonMonth.createCell(18).setCellValue(loanInfoMonth.getTotalOn15DpdCount());
                            rowCommonMonth.getCell(18).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn15DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(19).setCellValue((double) loanInfoMonth.getTotalOn15DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(19).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn15DpdAmount() != null) {
                            rowCommonMonth.createCell(20).setCellValue(loanInfoMonth.getTotalOn15DpdAmount());
                            rowCommonMonth.getCell(20).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn15DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(21).setCellValue(loanInfoMonth.getTotalOn15DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(21).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn20DpdCount() != null) {
                            rowCommonMonth.createCell(22).setCellValue(loanInfoMonth.getTotalOn20DpdCount());
                            rowCommonMonth.getCell(22).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn20DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(23).setCellValue((double) loanInfoMonth.getTotalOn20DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(23).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn20DpdAmount() != null) {
                            rowCommonMonth.createCell(24).setCellValue(loanInfoMonth.getTotalOn20DpdAmount());
                            rowCommonMonth.getCell(24).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn20DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(25).setCellValue(loanInfoMonth.getTotalOn20DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(25).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn25DpdCount() != null) {
                            rowCommonMonth.createCell(26).setCellValue(loanInfoMonth.getTotalOn25DpdCount());
                            rowCommonMonth.getCell(26).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn25DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(27).setCellValue((double) loanInfoMonth.getTotalOn25DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(27).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn25DpdAmount() != null) {
                            rowCommonMonth.createCell(28).setCellValue(loanInfoMonth.getTotalOn25DpdAmount());
                            rowCommonMonth.getCell(28).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn25DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(29).setCellValue(loanInfoMonth.getTotalOn25DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(29).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn30DpdCount() != null) {
                            rowCommonMonth.createCell(30).setCellValue(loanInfoMonth.getTotalOn30DpdCount());
                            rowCommonMonth.getCell(30).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn30DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(31).setCellValue((double) loanInfoMonth.getTotalOn30DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(31).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn30DpdAmount() != null) {
                            rowCommonMonth.createCell(32).setCellValue(loanInfoMonth.getTotalOn30DpdAmount());
                            rowCommonMonth.getCell(32).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn30DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(33).setCellValue(loanInfoMonth.getTotalOn30DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(33).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn40DpdCount() != null) {
                            rowCommonMonth.createCell(34).setCellValue(loanInfoMonth.getTotalOn40DpdCount());
                            rowCommonMonth.getCell(34).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn40DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(35).setCellValue((double) loanInfoMonth.getTotalOn40DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(35).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn40DpdAmount() != null) {
                            rowCommonMonth.createCell(36).setCellValue(loanInfoMonth.getTotalOn40DpdAmount());
                            rowCommonMonth.getCell(36).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn40DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(37).setCellValue(loanInfoMonth.getTotalOn40DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(37).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn50DpdCount() != null) {
                            rowCommonMonth.createCell(38).setCellValue(loanInfoMonth.getTotalOn50DpdCount());
                            rowCommonMonth.getCell(38).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn50DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(39).setCellValue((double) loanInfoMonth.getTotalOn50DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(39).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn50DpdAmount() != null) {
                            rowCommonMonth.createCell(40).setCellValue(loanInfoMonth.getTotalOn50DpdAmount());
                            rowCommonMonth.getCell(40).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn50DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(41).setCellValue(loanInfoMonth.getTotalOn50DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(41).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn60DpdCount() != null) {
                            rowCommonMonth.createCell(42).setCellValue(loanInfoMonth.getTotalOn60DpdCount());
                            rowCommonMonth.getCell(42).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn60DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(43).setCellValue((double) loanInfoMonth.getTotalOn60DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(43).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn60DpdAmount() != null) {
                            rowCommonMonth.createCell(44).setCellValue(loanInfoMonth.getTotalOn60DpdAmount());
                            rowCommonMonth.getCell(44).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn60DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(45).setCellValue(loanInfoMonth.getTotalOn60DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(45).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn90DpdCount() != null) {
                            rowCommonMonth.createCell(46).setCellValue(loanInfoMonth.getTotalOn90DpdCount());
                            rowCommonMonth.getCell(46).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn90DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(47).setCellValue((double) loanInfoMonth.getTotalOn90DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(47).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn90DpdAmount() != null) {
                            rowCommonMonth.createCell(48).setCellValue(loanInfoMonth.getTotalOn90DpdAmount());
                            rowCommonMonth.getCell(48).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn90DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(49).setCellValue(loanInfoMonth.getTotalOn90DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(49).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn120DpdCount() != null) {
                            rowCommonMonth.createCell(50).setCellValue(loanInfoMonth.getTotalOn120DpdCount());
                            rowCommonMonth.getCell(50).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn120DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(51).setCellValue((double) loanInfoMonth.getTotalOn120DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(51).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn120DpdAmount() != null) {
                            rowCommonMonth.createCell(52).setCellValue(loanInfoMonth.getTotalOn120DpdAmount());
                            rowCommonMonth.getCell(52).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn120DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(53).setCellValue(loanInfoMonth.getTotalOn120DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(53).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn150DpdCount() != null) {
                            rowCommonMonth.createCell(54).setCellValue(loanInfoMonth.getTotalOn150DpdCount());
                            rowCommonMonth.getCell(54).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn150DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(55).setCellValue((double) loanInfoMonth.getTotalOn150DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(55).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn150DpdAmount() != null) {
                            rowCommonMonth.createCell(56).setCellValue(loanInfoMonth.getTotalOn150DpdAmount());
                            rowCommonMonth.getCell(56).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn150DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(57).setCellValue(loanInfoMonth.getTotalOn150DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(57).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn180DpdCount() != null) {
                            rowCommonMonth.createCell(58).setCellValue(loanInfoMonth.getTotalOn180DpdCount());
                            rowCommonMonth.getCell(58).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn180DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(59).setCellValue((double) loanInfoMonth.getTotalOn180DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(59).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn180DpdAmount() != null) {
                            rowCommonMonth.createCell(60).setCellValue(loanInfoMonth.getTotalOn180DpdAmount());
                            rowCommonMonth.getCell(60).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn180DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(61).setCellValue(loanInfoMonth.getTotalOn180DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(61).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn250DpdCount() != null) {
                            rowCommonMonth.createCell(62).setCellValue(loanInfoMonth.getTotalOn250DpdCount());
                            rowCommonMonth.getCell(62).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn250DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(63).setCellValue((double) loanInfoMonth.getTotalOn250DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(63).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn250DpdAmount() != null) {
                            rowCommonMonth.createCell(64).setCellValue(loanInfoMonth.getTotalOn250DpdAmount());
                            rowCommonMonth.getCell(64).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn250DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(65).setCellValue(loanInfoMonth.getTotalOn250DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(65).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn300DpdCount() != null) {
                            rowCommonMonth.createCell(66).setCellValue(loanInfoMonth.getTotalOn300DpdCount());
                            rowCommonMonth.getCell(66).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn300DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(67).setCellValue((double) loanInfoMonth.getTotalOn300DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(67).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn300DpdAmount() != null) {
                            rowCommonMonth.createCell(68).setCellValue(loanInfoMonth.getTotalOn300DpdAmount());
                            rowCommonMonth.getCell(68).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn300DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(69).setCellValue(loanInfoMonth.getTotalOn300DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(69).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn500DpdCount() != null) {
                            rowCommonMonth.createCell(70).setCellValue(loanInfoMonth.getTotalOn500DpdCount());
                            rowCommonMonth.getCell(70).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn500DpdCount() != null && loanInfoMonth.getTotalIssuedLoanCount() != null) {
                            rowCommonMonth.createCell(71).setCellValue((double) loanInfoMonth.getTotalOn500DpdCount() /
                                    (double) loanInfoMonth.getTotalIssuedLoanCount());
                            rowCommonMonth.getCell(71).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getTotalOn500DpdAmount() != null) {
                            rowCommonMonth.createCell(72).setCellValue(loanInfoMonth.getTotalOn500DpdAmount());
                            rowCommonMonth.getCell(72).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getTotalOn500DpdAmount() != null && loanInfoMonth.getTotalIssuedLoanAmount() != null) {
                            rowCommonMonth.createCell(73).setCellValue(loanInfoMonth.getTotalOn500DpdAmount() /
                                    loanInfoMonth.getTotalIssuedLoanAmount());
                            rowCommonMonth.getCell(73).setCellStyle(stylePercentBold);
                        }

                        rowCommonMonthNew.createCell(0).setCellValue(loanInfoMonth.getDate());
                        rowCommonMonthNew.getCell(0).setCellStyle(styleMonthBold);
                        if (loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(1).setCellValue(loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(1).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(2).setCellValue(loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(2).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialIssuedLoanAmount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(3).setCellValue(loanInfoMonth.getPotentialIssuedLoanAmount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(3).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialActiveLoanCount() != null) {
                            rowCommonMonthNew.createCell(4).setCellValue(loanInfoMonth.getPotentialActiveLoanCount());
                            rowCommonMonthNew.getCell(4).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialActiveLoanCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(5).setCellValue((double) loanInfoMonth.getPotentialActiveLoanCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(5).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn2DpdCount() != null) {
                            rowCommonMonthNew.createCell(6).setCellValue(loanInfoMonth.getPotentialOn2DpdCount());
                            rowCommonMonthNew.getCell(6).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn2DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(7).setCellValue((double) loanInfoMonth.getPotentialOn2DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(7).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn2DpdAmount() != null) {
                            rowCommonMonthNew.createCell(8).setCellValue(loanInfoMonth.getPotentialOn2DpdAmount());
                            rowCommonMonthNew.getCell(8).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn2DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(9).setCellValue(loanInfoMonth.getPotentialOn2DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(9).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn5DpdCount() != null) {
                            rowCommonMonthNew.createCell(10).setCellValue(loanInfoMonth.getPotentialOn5DpdCount());
                            rowCommonMonthNew.getCell(10).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn5DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(11).setCellValue((double) loanInfoMonth.getPotentialOn5DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(11).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn5DpdAmount() != null) {
                            rowCommonMonthNew.createCell(12).setCellValue(loanInfoMonth.getPotentialOn5DpdAmount());
                            rowCommonMonthNew.getCell(12).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn5DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(13).setCellValue(loanInfoMonth.getPotentialOn5DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(13).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn10DpdCount() != null) {
                            rowCommonMonthNew.createCell(14).setCellValue(loanInfoMonth.getPotentialOn10DpdCount());
                            rowCommonMonthNew.getCell(14).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn10DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(15).setCellValue((double) loanInfoMonth.getPotentialOn10DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(15).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn10DpdAmount() != null) {
                            rowCommonMonthNew.createCell(16).setCellValue(loanInfoMonth.getPotentialOn10DpdAmount());
                            rowCommonMonthNew.getCell(16).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn10DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(17).setCellValue(loanInfoMonth.getPotentialOn10DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(17).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn15DpdCount() != null) {
                            rowCommonMonthNew.createCell(18).setCellValue(loanInfoMonth.getPotentialOn15DpdCount());
                            rowCommonMonthNew.getCell(18).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn15DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(19).setCellValue((double) loanInfoMonth.getPotentialOn15DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(19).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn15DpdAmount() != null) {
                            rowCommonMonthNew.createCell(20).setCellValue(loanInfoMonth.getPotentialOn15DpdAmount());
                            rowCommonMonthNew.getCell(20).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn15DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(21).setCellValue(loanInfoMonth.getPotentialOn15DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(21).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn20DpdCount() != null) {
                            rowCommonMonthNew.createCell(22).setCellValue(loanInfoMonth.getPotentialOn20DpdCount());
                            rowCommonMonthNew.getCell(22).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn20DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(23).setCellValue((double) loanInfoMonth.getPotentialOn20DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(23).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn20DpdAmount() != null) {
                            rowCommonMonthNew.createCell(24).setCellValue(loanInfoMonth.getPotentialOn20DpdAmount());
                            rowCommonMonthNew.getCell(24).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn20DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(25).setCellValue(loanInfoMonth.getPotentialOn20DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(25).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn25DpdCount() != null) {
                            rowCommonMonthNew.createCell(26).setCellValue(loanInfoMonth.getPotentialOn25DpdCount());
                            rowCommonMonthNew.getCell(26).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn25DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(27).setCellValue((double) loanInfoMonth.getPotentialOn25DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(27).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn25DpdAmount() != null) {
                            rowCommonMonthNew.createCell(28).setCellValue(loanInfoMonth.getPotentialOn25DpdAmount());
                            rowCommonMonthNew.getCell(28).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn25DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(29).setCellValue(loanInfoMonth.getPotentialOn25DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(29).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn30DpdCount() != null) {
                            rowCommonMonthNew.createCell(30).setCellValue(loanInfoMonth.getPotentialOn30DpdCount());
                            rowCommonMonthNew.getCell(30).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn30DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(31).setCellValue((double) loanInfoMonth.getPotentialOn30DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(31).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn30DpdAmount() != null) {
                            rowCommonMonthNew.createCell(32).setCellValue(loanInfoMonth.getPotentialOn30DpdAmount());
                            rowCommonMonthNew.getCell(32).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn30DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(33).setCellValue(loanInfoMonth.getPotentialOn30DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(33).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn40DpdCount() != null) {
                            rowCommonMonthNew.createCell(34).setCellValue(loanInfoMonth.getPotentialOn40DpdCount());
                            rowCommonMonthNew.getCell(34).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn40DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(35).setCellValue((double) loanInfoMonth.getPotentialOn40DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(35).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn40DpdAmount() != null) {
                            rowCommonMonthNew.createCell(36).setCellValue(loanInfoMonth.getPotentialOn40DpdAmount());
                            rowCommonMonthNew.getCell(36).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn40DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(37).setCellValue(loanInfoMonth.getPotentialOn40DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(37).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn50DpdCount() != null) {
                            rowCommonMonthNew.createCell(38).setCellValue(loanInfoMonth.getPotentialOn50DpdCount());
                            rowCommonMonthNew.getCell(38).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn50DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(39).setCellValue((double) loanInfoMonth.getPotentialOn50DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(39).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn50DpdAmount() != null) {
                            rowCommonMonthNew.createCell(40).setCellValue(loanInfoMonth.getPotentialOn50DpdAmount());
                            rowCommonMonthNew.getCell(40).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn50DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(41).setCellValue(loanInfoMonth.getPotentialOn50DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(41).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn60DpdCount() != null) {
                            rowCommonMonthNew.createCell(42).setCellValue(loanInfoMonth.getPotentialOn60DpdCount());
                            rowCommonMonthNew.getCell(42).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn60DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(43).setCellValue((double) loanInfoMonth.getPotentialOn60DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(43).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn60DpdAmount() != null) {
                            rowCommonMonthNew.createCell(44).setCellValue(loanInfoMonth.getPotentialOn60DpdAmount());
                            rowCommonMonthNew.getCell(44).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn60DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(45).setCellValue(loanInfoMonth.getPotentialOn60DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(45).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn90DpdCount() != null) {
                            rowCommonMonthNew.createCell(46).setCellValue(loanInfoMonth.getPotentialOn90DpdCount());
                            rowCommonMonthNew.getCell(46).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn90DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(47).setCellValue((double) loanInfoMonth.getPotentialOn90DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(47).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn90DpdAmount() != null) {
                            rowCommonMonthNew.createCell(48).setCellValue(loanInfoMonth.getPotentialOn90DpdAmount());
                            rowCommonMonthNew.getCell(48).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn90DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(49).setCellValue(loanInfoMonth.getPotentialOn90DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(49).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn120DpdCount() != null) {
                            rowCommonMonthNew.createCell(50).setCellValue(loanInfoMonth.getPotentialOn120DpdCount());
                            rowCommonMonthNew.getCell(50).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn120DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(51).setCellValue((double) loanInfoMonth.getPotentialOn120DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(51).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn120DpdAmount() != null) {
                            rowCommonMonthNew.createCell(52).setCellValue(loanInfoMonth.getPotentialOn120DpdAmount());
                            rowCommonMonthNew.getCell(52).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn120DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(53).setCellValue(loanInfoMonth.getPotentialOn120DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(53).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn150DpdCount() != null) {
                            rowCommonMonthNew.createCell(54).setCellValue(loanInfoMonth.getPotentialOn150DpdCount());
                            rowCommonMonthNew.getCell(54).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn150DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(55).setCellValue((double) loanInfoMonth.getPotentialOn150DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(55).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn150DpdAmount() != null) {
                            rowCommonMonthNew.createCell(56).setCellValue(loanInfoMonth.getPotentialOn150DpdAmount());
                            rowCommonMonthNew.getCell(56).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn150DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(57).setCellValue(loanInfoMonth.getPotentialOn150DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(57).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn180DpdCount() != null) {
                            rowCommonMonthNew.createCell(58).setCellValue(loanInfoMonth.getPotentialOn180DpdCount());
                            rowCommonMonthNew.getCell(58).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn180DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(59).setCellValue((double) loanInfoMonth.getPotentialOn180DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(59).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn180DpdAmount() != null) {
                            rowCommonMonthNew.createCell(60).setCellValue(loanInfoMonth.getPotentialOn180DpdAmount());
                            rowCommonMonthNew.getCell(60).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn180DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(61).setCellValue(loanInfoMonth.getPotentialOn180DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(61).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn250DpdCount() != null) {
                            rowCommonMonthNew.createCell(62).setCellValue(loanInfoMonth.getPotentialOn250DpdCount());
                            rowCommonMonthNew.getCell(62).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn250DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(63).setCellValue((double) loanInfoMonth.getPotentialOn250DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(63).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn250DpdAmount() != null) {
                            rowCommonMonthNew.createCell(64).setCellValue(loanInfoMonth.getPotentialOn250DpdAmount());
                            rowCommonMonthNew.getCell(64).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn250DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(65).setCellValue(loanInfoMonth.getPotentialOn250DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(65).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn300DpdCount() != null) {
                            rowCommonMonthNew.createCell(66).setCellValue(loanInfoMonth.getPotentialOn300DpdCount());
                            rowCommonMonthNew.getCell(66).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn300DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(67).setCellValue((double) loanInfoMonth.getPotentialOn300DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(67).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn300DpdAmount() != null) {
                            rowCommonMonthNew.createCell(68).setCellValue(loanInfoMonth.getPotentialOn300DpdAmount());
                            rowCommonMonthNew.getCell(68).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn300DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(69).setCellValue(loanInfoMonth.getPotentialOn300DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(69).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn500DpdCount() != null) {
                            rowCommonMonthNew.createCell(70).setCellValue(loanInfoMonth.getPotentialOn500DpdCount());
                            rowCommonMonthNew.getCell(70).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn500DpdCount() != null && loanInfoMonth.getPotentialIssuedLoanCount() != null) {
                            rowCommonMonthNew.createCell(71).setCellValue((double) loanInfoMonth.getPotentialOn500DpdCount() /
                                    (double) loanInfoMonth.getPotentialIssuedLoanCount());
                            rowCommonMonthNew.getCell(71).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getPotentialOn500DpdAmount() != null) {
                            rowCommonMonthNew.createCell(72).setCellValue(loanInfoMonth.getPotentialOn500DpdAmount());
                            rowCommonMonthNew.getCell(72).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getPotentialOn500DpdAmount() != null && loanInfoMonth.getPotentialIssuedLoanAmount() != null) {
                            rowCommonMonthNew.createCell(73).setCellValue(loanInfoMonth.getPotentialOn500DpdAmount() /
                                    loanInfoMonth.getPotentialIssuedLoanAmount());
                            rowCommonMonthNew.getCell(73).setCellStyle(stylePercentBold);
                        }

                        rowCommonMonthRepeat.createCell(0).setCellValue(loanInfoMonth.getDate());
                        rowCommonMonthRepeat.getCell(0).setCellStyle(styleMonthBold);
                        if (loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(1).setCellValue(loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(1).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(2).setCellValue(loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(2).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatIssuedLoanAmount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(3).setCellValue(loanInfoMonth.getRepeatIssuedLoanAmount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(3).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatActiveLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(4).setCellValue(loanInfoMonth.getRepeatActiveLoanCount());
                            rowCommonMonthRepeat.getCell(4).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatActiveLoanCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(5).setCellValue((double) loanInfoMonth.getRepeatActiveLoanCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(5).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn2DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(6).setCellValue(loanInfoMonth.getRepeatOn2DpdCount());
                            rowCommonMonthRepeat.getCell(6).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn2DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(7).setCellValue((double) loanInfoMonth.getRepeatOn2DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(7).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn2DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(8).setCellValue(loanInfoMonth.getRepeatOn2DpdAmount());
                            rowCommonMonthRepeat.getCell(8).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn2DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(9).setCellValue(loanInfoMonth.getRepeatOn2DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(9).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn5DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(10).setCellValue(loanInfoMonth.getRepeatOn5DpdCount());
                            rowCommonMonthRepeat.getCell(10).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn5DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(11).setCellValue((double) loanInfoMonth.getRepeatOn5DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(11).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn5DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(12).setCellValue(loanInfoMonth.getRepeatOn5DpdAmount());
                            rowCommonMonthRepeat.getCell(12).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn5DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(13).setCellValue(loanInfoMonth.getRepeatOn5DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(13).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn10DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(14).setCellValue(loanInfoMonth.getRepeatOn10DpdCount());
                            rowCommonMonthRepeat.getCell(14).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn10DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(15).setCellValue((double) loanInfoMonth.getRepeatOn10DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(15).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn10DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(16).setCellValue(loanInfoMonth.getRepeatOn10DpdAmount());
                            rowCommonMonthRepeat.getCell(16).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn10DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(17).setCellValue(loanInfoMonth.getRepeatOn10DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(17).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn15DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(18).setCellValue(loanInfoMonth.getRepeatOn15DpdCount());
                            rowCommonMonthRepeat.getCell(18).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn15DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(19).setCellValue((double) loanInfoMonth.getRepeatOn15DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(19).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn15DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(20).setCellValue(loanInfoMonth.getRepeatOn15DpdAmount());
                            rowCommonMonthRepeat.getCell(20).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn15DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(21).setCellValue(loanInfoMonth.getRepeatOn15DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(21).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn20DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(22).setCellValue(loanInfoMonth.getRepeatOn20DpdCount());
                            rowCommonMonthRepeat.getCell(22).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn20DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(23).setCellValue((double) loanInfoMonth.getRepeatOn20DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(23).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn20DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(24).setCellValue(loanInfoMonth.getRepeatOn20DpdAmount());
                            rowCommonMonthRepeat.getCell(24).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn20DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(25).setCellValue(loanInfoMonth.getRepeatOn20DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(25).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn25DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(26).setCellValue(loanInfoMonth.getRepeatOn25DpdCount());
                            rowCommonMonthRepeat.getCell(26).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn25DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(27).setCellValue((double) loanInfoMonth.getRepeatOn25DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(27).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn25DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(28).setCellValue(loanInfoMonth.getRepeatOn25DpdAmount());
                            rowCommonMonthRepeat.getCell(28).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn25DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(29).setCellValue(loanInfoMonth.getRepeatOn25DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(29).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn30DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(30).setCellValue(loanInfoMonth.getRepeatOn30DpdCount());
                            rowCommonMonthRepeat.getCell(30).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn30DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(31).setCellValue((double) loanInfoMonth.getRepeatOn30DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(31).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn30DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(32).setCellValue(loanInfoMonth.getRepeatOn30DpdAmount());
                            rowCommonMonthRepeat.getCell(32).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn30DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(33).setCellValue(loanInfoMonth.getRepeatOn30DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(33).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn40DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(34).setCellValue(loanInfoMonth.getRepeatOn40DpdCount());
                            rowCommonMonthRepeat.getCell(34).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn40DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(35).setCellValue((double) loanInfoMonth.getRepeatOn40DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(35).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn40DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(36).setCellValue(loanInfoMonth.getRepeatOn40DpdAmount());
                            rowCommonMonthRepeat.getCell(36).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn40DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(37).setCellValue(loanInfoMonth.getRepeatOn40DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(37).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn50DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(38).setCellValue(loanInfoMonth.getRepeatOn50DpdCount());
                            rowCommonMonthRepeat.getCell(38).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn50DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(39).setCellValue((double) loanInfoMonth.getRepeatOn50DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(39).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn50DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(40).setCellValue(loanInfoMonth.getRepeatOn50DpdAmount());
                            rowCommonMonthRepeat.getCell(40).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn50DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(41).setCellValue(loanInfoMonth.getRepeatOn50DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(41).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn60DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(42).setCellValue(loanInfoMonth.getRepeatOn60DpdCount());
                            rowCommonMonthRepeat.getCell(42).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn60DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(43).setCellValue((double) loanInfoMonth.getRepeatOn60DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(43).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn60DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(44).setCellValue(loanInfoMonth.getRepeatOn60DpdAmount());
                            rowCommonMonthRepeat.getCell(44).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn60DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(45).setCellValue(loanInfoMonth.getRepeatOn60DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(45).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn90DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(46).setCellValue(loanInfoMonth.getRepeatOn90DpdCount());
                            rowCommonMonthRepeat.getCell(46).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn90DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(47).setCellValue((double) loanInfoMonth.getRepeatOn90DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(47).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn90DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(48).setCellValue(loanInfoMonth.getRepeatOn90DpdAmount());
                            rowCommonMonthRepeat.getCell(48).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn90DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(49).setCellValue(loanInfoMonth.getRepeatOn90DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(49).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn120DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(50).setCellValue(loanInfoMonth.getRepeatOn120DpdCount());
                            rowCommonMonthRepeat.getCell(50).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn120DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(51).setCellValue((double) loanInfoMonth.getRepeatOn120DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(51).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn120DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(52).setCellValue(loanInfoMonth.getRepeatOn120DpdAmount());
                            rowCommonMonthRepeat.getCell(52).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn120DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(53).setCellValue(loanInfoMonth.getRepeatOn120DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(53).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn150DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(54).setCellValue(loanInfoMonth.getRepeatOn150DpdCount());
                            rowCommonMonthRepeat.getCell(54).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn150DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(55).setCellValue((double) loanInfoMonth.getRepeatOn150DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(55).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn150DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(56).setCellValue(loanInfoMonth.getRepeatOn150DpdAmount());
                            rowCommonMonthRepeat.getCell(56).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn150DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(57).setCellValue(loanInfoMonth.getRepeatOn150DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(57).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn180DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(58).setCellValue(loanInfoMonth.getRepeatOn180DpdCount());
                            rowCommonMonthRepeat.getCell(58).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn180DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(59).setCellValue((double) loanInfoMonth.getRepeatOn180DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(59).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn180DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(60).setCellValue(loanInfoMonth.getRepeatOn180DpdAmount());
                            rowCommonMonthRepeat.getCell(60).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn180DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(61).setCellValue(loanInfoMonth.getRepeatOn180DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(61).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn250DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(62).setCellValue(loanInfoMonth.getRepeatOn250DpdCount());
                            rowCommonMonthRepeat.getCell(62).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn250DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(63).setCellValue((double) loanInfoMonth.getRepeatOn250DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(63).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn250DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(64).setCellValue(loanInfoMonth.getRepeatOn250DpdAmount());
                            rowCommonMonthRepeat.getCell(64).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn250DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(65).setCellValue(loanInfoMonth.getRepeatOn250DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(65).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn300DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(66).setCellValue(loanInfoMonth.getRepeatOn300DpdCount());
                            rowCommonMonthRepeat.getCell(66).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn300DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(67).setCellValue((double) loanInfoMonth.getRepeatOn300DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(67).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn300DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(68).setCellValue(loanInfoMonth.getRepeatOn300DpdAmount());
                            rowCommonMonthRepeat.getCell(68).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn300DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(69).setCellValue(loanInfoMonth.getRepeatOn300DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(69).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn500DpdCount() != null) {
                            rowCommonMonthRepeat.createCell(70).setCellValue(loanInfoMonth.getRepeatOn500DpdCount());
                            rowCommonMonthRepeat.getCell(70).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn500DpdCount() != null && loanInfoMonth.getRepeatIssuedLoanCount() != null) {
                            rowCommonMonthRepeat.createCell(71).setCellValue((double) loanInfoMonth.getRepeatOn500DpdCount() /
                                    (double) loanInfoMonth.getRepeatIssuedLoanCount());
                            rowCommonMonthRepeat.getCell(71).setCellStyle(stylePercentBold);
                        }
                        if (loanInfoMonth.getRepeatOn500DpdAmount() != null) {
                            rowCommonMonthRepeat.createCell(72).setCellValue(loanInfoMonth.getRepeatOn500DpdAmount());
                            rowCommonMonthRepeat.getCell(72).setCellStyle(styleNumberBold);
                        }
                        if (loanInfoMonth.getRepeatOn500DpdAmount() != null && loanInfoMonth.getRepeatIssuedLoanAmount() != null) {
                            rowCommonMonthRepeat.createCell(73).setCellValue(loanInfoMonth.getRepeatOn500DpdAmount() /
                                    loanInfoMonth.getRepeatIssuedLoanAmount());
                            rowCommonMonthRepeat.getCell(73).setCellStyle(stylePercentBold);
                        }

                        row ++;
                        rowNumberForGroupFirst = row;
                    }
                }
            }
        }


        //Sheet. Row and Columns groups, width etc.
        sheetCommonDailyAll.setColumnWidth(0, 16 * 256);
        sheetCommonDailyAll.setColumnWidth(1, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(2, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(3, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(4, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(5, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(6, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(7, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(8, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(9, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(10, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(11, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(12, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(13, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(14, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(15, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(16, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(17, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(18, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(19, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(20, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(21, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(22, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(23, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(24, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(25, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(26, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(27, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(28, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(29, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(30, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(31, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(32, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(33, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(34, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(35, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(36, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(37, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(38, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(39, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(40, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(41, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(42, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(43, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(44, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(45, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(46, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(47, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(48, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(49, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(50, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(51, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(52, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(53, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(54, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(55, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(56, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(57, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(58, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(59, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(60, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(61, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(62, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(63, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(64, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(65, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(66, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(67, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(68, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(69, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(70, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(71, 14 * 256);
        sheetCommonDailyAll.setColumnWidth(72, 19 * 256);
        sheetCommonDailyAll.setColumnWidth(73, 14 * 256);

        sheetCommonDailyNew.setColumnWidth(0, 16 * 256);
        sheetCommonDailyNew.setColumnWidth(1, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(2, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(3, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(4, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(5, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(6, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(7, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(8, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(9, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(10, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(11, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(12, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(13, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(14, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(15, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(16, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(17, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(18, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(19, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(20, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(21, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(22, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(23, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(24, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(25, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(26, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(27, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(28, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(29, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(30, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(31, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(32, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(33, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(34, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(35, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(36, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(37, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(38, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(39, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(40, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(41, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(42, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(43, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(44, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(45, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(46, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(47, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(48, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(49, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(50, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(51, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(52, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(53, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(54, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(55, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(56, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(57, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(58, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(59, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(60, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(61, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(62, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(63, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(64, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(65, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(66, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(67, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(68, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(69, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(70, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(71, 14 * 256);
        sheetCommonDailyNew.setColumnWidth(72, 19 * 256);
        sheetCommonDailyNew.setColumnWidth(73, 14 * 256);

        sheetCommonDailyRepeat.setColumnWidth(0, 16 * 256);
        sheetCommonDailyRepeat.setColumnWidth(1, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(2, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(3, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(4, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(5, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(6, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(7, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(8, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(9, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(10, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(11, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(12, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(13, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(14, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(15, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(16, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(17, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(18, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(19, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(20, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(21, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(22, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(23, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(24, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(25, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(26, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(27, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(28, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(29, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(30, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(31, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(32, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(33, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(34, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(35, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(36, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(37, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(38, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(39, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(40, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(41, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(42, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(43, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(44, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(45, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(46, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(47, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(48, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(49, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(50, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(51, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(52, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(53, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(54, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(55, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(56, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(57, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(58, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(59, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(60, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(61, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(62, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(63, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(64, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(65, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(66, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(67, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(68, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(69, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(70, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(71, 14 * 256);
        sheetCommonDailyRepeat.setColumnWidth(72, 19 * 256);
        sheetCommonDailyRepeat.setColumnWidth(73, 14 * 256);

        sheetCommonDailyAll.createFreezePane(1,2);
        sheetCommonDailyNew.createFreezePane(1,2);
        sheetCommonDailyRepeat.createFreezePane(1,2);
    }

    private static void createSheetsCommonDailyVnd(Workbook workbook, MainDailyReportObject mainDailyReportObject,
                                                    CellStyle styleTextHeaders, CellStyle styleDate,
                                                    CellStyle stylePercent, CellStyle styleNumber,
                                                    CellStyle styleMonthBold, CellStyle stylePercentBold,
                                                    CellStyle styleNumberBold) {
        Sheet sheetCommonDailyAllVnd = workbook.createSheet("Общее.Всего.VND");
        Sheet sheetCommonDailyNewVnd = workbook.createSheet("Общее.Новый клиент.VND");
        Sheet sheetCommonDailyRepeatVnd = workbook.createSheet("Общее.Повторный клиент.VND");

        sheetCommonDailyAllVnd.setDisplayGridlines(false);
        sheetCommonDailyNewVnd.setDisplayGridlines(false);
        sheetCommonDailyRepeatVnd.setDisplayGridlines(false);


        //Workbook "Common" sheets
        int rowCommon = 0;

        Row headRowCommonAllVnd = sheetCommonDailyAllVnd.createRow(rowCommon);
        Row headRowCommonNewVnd = sheetCommonDailyNewVnd.createRow(rowCommon);
        Row headRowCommonRepeatVnd = sheetCommonDailyRepeatVnd.createRow(rowCommon);

        Row underHeadRowCommonAllVnd = sheetCommonDailyAllVnd.createRow(rowCommon + 1);
        Row underHeadRowCommonNewVnd = sheetCommonDailyNewVnd.createRow(rowCommon + 1);
        Row underHeadRowCommonRepeatVnd = sheetCommonDailyRepeatVnd.createRow(rowCommon + 1);

        headRowCommonAllVnd.createCell(0).setCellValue("Дата");
        headRowCommonAllVnd.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon,rowCommon + 1,0,0));

        headRowCommonNewVnd.createCell(0).setCellValue("Дата");
        headRowCommonNewVnd.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon,rowCommon + 1,0,0));

        headRowCommonRepeatVnd.createCell(0).setCellValue("Дата");
        headRowCommonRepeatVnd.getCell(0).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon,rowCommon + 1,0,0));

        headRowCommonAllVnd.createCell(1).setCellValue("Выдачи");
        headRowCommonAllVnd.getCell(1).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(2).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(3).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(4).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 1, 4));

        headRowCommonNewVnd.createCell(1).setCellValue("Выдачи");
        headRowCommonNewVnd.getCell(1).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(2).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(3).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(4).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 1, 4));

        headRowCommonRepeatVnd.createCell(1).setCellValue("Выдачи");
        headRowCommonRepeatVnd.getCell(1).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(2).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(3).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(4).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 1, 4));

        underHeadRowCommonAllVnd.createCell(1).setCellValue("Количество");
        underHeadRowCommonAllVnd.getCell(1).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(1).setCellValue("Количество");
        underHeadRowCommonNewVnd.getCell(1).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(1).setCellValue("Количество");
        underHeadRowCommonRepeatVnd.getCell(1).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllVnd.createCell(2).setCellValue("Сумма");
        underHeadRowCommonAllVnd.getCell(2).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(2).setCellValue("Сумма");
        underHeadRowCommonNewVnd.getCell(2).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(2).setCellValue("Сумма");
        underHeadRowCommonRepeatVnd.getCell(2).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllVnd.createCell(3).setCellValue("Средняя сумма");
        underHeadRowCommonAllVnd.getCell(3).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(3).setCellValue("Средняя сумма");
        underHeadRowCommonNewVnd.getCell(3).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(3).setCellValue("Средняя сумма");
        underHeadRowCommonRepeatVnd.getCell(3).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllVnd.createCell(4).setCellValue("Прирост");
        underHeadRowCommonAllVnd.getCell(4).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(4).setCellValue("Прирост");
        underHeadRowCommonNewVnd.getCell(4).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(4).setCellValue("Прирост");
        underHeadRowCommonRepeatVnd.getCell(4).setCellStyle(styleTextHeaders);

        headRowCommonAllVnd.createCell(5).setCellValue("Пролонгации");
        headRowCommonAllVnd.getCell(5).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(6).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(7).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(8).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 5, 8));

        headRowCommonNewVnd.createCell(5).setCellValue("Пролонгации");
        headRowCommonNewVnd.getCell(5).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(6).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(7).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(8).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 5, 8));

        headRowCommonRepeatVnd.createCell(5).setCellValue("Пролонгации");
        headRowCommonRepeatVnd.getCell(5).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(6).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(7).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(8).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 5, 8));

        underHeadRowCommonAllVnd.createCell(5).setCellValue("Количество");
        underHeadRowCommonAllVnd.getCell(5).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(5).setCellValue("Количество");
        underHeadRowCommonNewVnd.getCell(5).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(5).setCellValue("Количество");
        underHeadRowCommonRepeatVnd.getCell(5).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllVnd.createCell(6).setCellValue("Сумма");
        underHeadRowCommonAllVnd.getCell(6).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(6).setCellValue("Сумма");
        underHeadRowCommonNewVnd.getCell(6).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(6).setCellValue("Сумма");
        underHeadRowCommonRepeatVnd.getCell(6).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllVnd.createCell(7).setCellValue("Средняя сумма");
        underHeadRowCommonAllVnd.getCell(7).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(7).setCellValue("Средняя сумма");
        underHeadRowCommonNewVnd.getCell(7).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(7).setCellValue("Средняя сумма");
        underHeadRowCommonRepeatVnd.getCell(7).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllVnd.createCell(8).setCellValue("Прирост");
        underHeadRowCommonAllVnd.getCell(8).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(8).setCellValue("Прирост");
        underHeadRowCommonNewVnd.getCell(8).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(8).setCellValue("Прирост");
        underHeadRowCommonRepeatVnd.getCell(8).setCellStyle(styleTextHeaders);

        headRowCommonAllVnd.createCell(9).setCellValue("Сумма договоров");
        headRowCommonAllVnd.getCell(9).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(10).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 9, 10));

        headRowCommonNewVnd.createCell(9).setCellValue("Сумма договоров");
        headRowCommonNewVnd.getCell(9).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(10).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 9, 10));

        headRowCommonRepeatVnd.createCell(9).setCellValue("Сумма договоров");
        headRowCommonRepeatVnd.getCell(9).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(10).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 9, 10));

        underHeadRowCommonAllVnd.createCell(9).setCellValue("Сумма");
        underHeadRowCommonAllVnd.getCell(9).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(9).setCellValue("Сумма");
        underHeadRowCommonNewVnd.getCell(9).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(9).setCellValue("Сумма");
        underHeadRowCommonRepeatVnd.getCell(9).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllVnd.createCell(10).setCellValue("Прирост");
        underHeadRowCommonAllVnd.getCell(10).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(10).setCellValue("Прирост");
        underHeadRowCommonNewVnd.getCell(10).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(10).setCellValue("Прирост");
        underHeadRowCommonRepeatVnd.getCell(10).setCellStyle(styleTextHeaders);

        headRowCommonAllVnd.createCell(11).setCellValue("Погашения");
        headRowCommonAllVnd.getCell(11).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(12).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(13).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(14).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 11, 14));

        headRowCommonNewVnd.createCell(11).setCellValue("Погашения");
        headRowCommonNewVnd.getCell(11).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(12).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(13).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(14).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 11, 14));

        headRowCommonRepeatVnd.createCell(11).setCellValue("Погашения");
        headRowCommonRepeatVnd.getCell(11).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(12).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(13).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(14).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 11, 14));

        underHeadRowCommonAllVnd.createCell(11).setCellValue("Всего погашено");
        underHeadRowCommonAllVnd.getCell(11).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(11).setCellValue("Всего погашено");
        underHeadRowCommonNewVnd.getCell(11).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(11).setCellValue("Всего погашено");
        underHeadRowCommonRepeatVnd.getCell(11).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllVnd.createCell(12).setCellValue("Погашено тело");
        underHeadRowCommonAllVnd.getCell(12).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(12).setCellValue("Погашено тело");
        underHeadRowCommonNewVnd.getCell(12).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(12).setCellValue("Погашено тело");
        underHeadRowCommonRepeatVnd.getCell(12).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllVnd.createCell(13).setCellValue("Доход");
        underHeadRowCommonAllVnd.getCell(13).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(13).setCellValue("Доход");
        underHeadRowCommonNewVnd.getCell(13).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(13).setCellValue("Доход");
        underHeadRowCommonRepeatVnd.getCell(13).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllVnd.createCell(14).setCellValue("Прирост");
        underHeadRowCommonAllVnd.getCell(14).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(14).setCellValue("Прирост");
        underHeadRowCommonNewVnd.getCell(14).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(14).setCellValue("Прирост");
        underHeadRowCommonRepeatVnd.getCell(14).setCellStyle(styleTextHeaders);

        headRowCommonAllVnd.createCell(15).setCellValue("Заявки");
        headRowCommonAllVnd.getCell(15).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(16).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(17).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(18).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(19).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(20).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(21).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(22).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(23).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(24).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(25).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(26).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(27).setCellStyle(styleTextHeaders);
        headRowCommonAllVnd.createCell(28).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 15, 28));

        headRowCommonNewVnd.createCell(15).setCellValue("Заявки");
        headRowCommonNewVnd.getCell(15).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(16).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(17).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(18).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(19).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(20).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(21).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(22).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(23).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(24).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(25).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(26).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(27).setCellStyle(styleTextHeaders);
        headRowCommonNewVnd.createCell(28).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 15, 28));

        headRowCommonRepeatVnd.createCell(15).setCellValue("Заявки");
        headRowCommonRepeatVnd.getCell(15).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(16).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(17).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(18).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(19).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(20).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(21).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(22).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(23).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(24).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(25).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(26).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(27).setCellStyle(styleTextHeaders);
        headRowCommonRepeatVnd.createCell(28).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon, rowCommon, 15, 28));

        underHeadRowCommonAllVnd.createCell(15).setCellValue("В процессе");
        underHeadRowCommonAllVnd.getCell(15).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 15, 16));

        underHeadRowCommonNewVnd.createCell(15).setCellValue("В процессе");
        underHeadRowCommonNewVnd.getCell(15).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 15, 16));

        underHeadRowCommonRepeatVnd.createCell(15).setCellValue("В процессе");
        underHeadRowCommonRepeatVnd.getCell(15).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 15, 16));

        underHeadRowCommonAllVnd.createCell(17).setCellValue("Отменено системой");
        underHeadRowCommonAllVnd.getCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 17, 18));

        underHeadRowCommonNewVnd.createCell(17).setCellValue("Отменено системой");
        underHeadRowCommonNewVnd.getCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 17, 18));

        underHeadRowCommonRepeatVnd.createCell(17).setCellValue("Отменено системой");
        underHeadRowCommonRepeatVnd.getCell(17).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 17, 18));

        underHeadRowCommonAllVnd.createCell(19).setCellValue("Отменено клиентом");
        underHeadRowCommonAllVnd.getCell(19).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 19, 20));

        underHeadRowCommonNewVnd.createCell(19).setCellValue("Отменено клиентом");
        underHeadRowCommonNewVnd.getCell(19).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 19, 20));

        underHeadRowCommonRepeatVnd.createCell(19).setCellValue("Отменено клиентом");
        underHeadRowCommonRepeatVnd.getCell(19).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 19, 20));

        underHeadRowCommonAllVnd.createCell(21).setCellValue("Отказано");
        underHeadRowCommonAllVnd.getCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 21, 22));

        underHeadRowCommonNewVnd.createCell(21).setCellValue("Отказано");
        underHeadRowCommonNewVnd.getCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 21, 22));

        underHeadRowCommonRepeatVnd.createCell(21).setCellValue("Отказано");
        underHeadRowCommonRepeatVnd.getCell(21).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 21, 22));

        underHeadRowCommonAllVnd.createCell(23).setCellValue("Одобрено");
        underHeadRowCommonAllVnd.getCell(23).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 23, 24));

        underHeadRowCommonNewVnd.createCell(23).setCellValue("Одобрено");
        underHeadRowCommonNewVnd.getCell(23).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 23, 24));

        underHeadRowCommonRepeatVnd.createCell(23).setCellValue("Одобрено");
        underHeadRowCommonRepeatVnd.getCell(23).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 23, 24));

        underHeadRowCommonAllVnd.createCell(25).setCellValue("Выдано");
        underHeadRowCommonAllVnd.getCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyAllVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 25, 26));

        underHeadRowCommonNewVnd.createCell(25).setCellValue("Выдано");
        underHeadRowCommonNewVnd.getCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyNewVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 25, 26));

        underHeadRowCommonRepeatVnd.createCell(25).setCellValue("Выдано");
        underHeadRowCommonRepeatVnd.getCell(25).setCellStyle(styleTextHeaders);
        sheetCommonDailyRepeatVnd.addMergedRegion(new CellRangeAddress(rowCommon + 1, rowCommon + 1, 25, 26));

        underHeadRowCommonAllVnd.createCell(27).setCellValue("Всего");
        underHeadRowCommonAllVnd.getCell(27).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(27).setCellValue("Всего");
        underHeadRowCommonNewVnd.getCell(27).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(27).setCellValue("Всего");
        underHeadRowCommonRepeatVnd.getCell(27).setCellStyle(styleTextHeaders);

        underHeadRowCommonAllVnd.createCell(28).setCellValue("Прирост");
        underHeadRowCommonAllVnd.getCell(28).setCellStyle(styleTextHeaders);

        underHeadRowCommonNewVnd.createCell(28).setCellValue("Прирост");
        underHeadRowCommonNewVnd.getCell(28).setCellStyle(styleTextHeaders);

        underHeadRowCommonRepeatVnd.createCell(28).setCellValue("Прирост");
        underHeadRowCommonRepeatVnd.getCell(28).setCellStyle(styleTextHeaders);

        rowCommon += 2;

        int rowNumberForGroupFirstCommon = rowCommon;
        int rowNumberForGroupLastCommon;

        for(int a = 0; a < mainDailyReportObject.getDateList().size(); a++) {
            Row newRowCommonAllVnd = sheetCommonDailyAllVnd.createRow(rowCommon);
            Row newRowCommonNewVnd = sheetCommonDailyNewVnd.createRow(rowCommon);
            Row newRowCommonRepeatVnd = sheetCommonDailyRepeatVnd.createRow(rowCommon);

            ExportApplicationsInfoDate exportApplicationsInfoDate = new ExportApplicationsInfoDate();
            ExportLoansInfoDate exportLoansInfoDate = new ExportLoansInfoDate();
            ExportPaymentsInfoDate exportPaymentsInfoDate = new ExportPaymentsInfoDate();
            ExportProlongationsInfoDate exportProlongationsInfoDate = new ExportProlongationsInfoDate();

            ExportApplicationsInfoDate exportApplicationsInfoDatePrevious = new ExportApplicationsInfoDate();
            ExportLoansInfoDate exportLoansInfoDatePrevious = new ExportLoansInfoDate();
            ExportPaymentsInfoDate exportPaymentsInfoDatePrevious = new ExportPaymentsInfoDate();
            ExportProlongationsInfoDate exportProlongationsInfoDatePrevious = new ExportProlongationsInfoDate();

            if (a != 0) {
                for (int z = 0; z < mainDailyReportObject.getExportApplicationsInfoDateList().size(); z++){
                    if (mainDailyReportObject.getExportApplicationsInfoDateList().get(z).getDate()
                            .equals(mainDailyReportObject.getDateList().get(a - 1))) {
                        exportApplicationsInfoDatePrevious = mainDailyReportObject.getExportApplicationsInfoDateList().get(z);
                    }
                }

                for (int x = 0; x < mainDailyReportObject.getExportLoansInfoDateList().size(); x++) {
                    if (mainDailyReportObject.getExportLoansInfoDateList().get(x).getDate()
                            .equals(mainDailyReportObject.getDateList().get(a - 1))) {
                        exportLoansInfoDatePrevious = mainDailyReportObject.getExportLoansInfoDateList().get(x);
                    }
                }

                for (int s = 0; s < mainDailyReportObject.getExportPaymentsInfoDateList().size(); s++) {
                    if (mainDailyReportObject.getExportPaymentsInfoDateList().get(s).getDate()
                            .equals(mainDailyReportObject.getDateList().get(a - 1))) {
                        exportPaymentsInfoDatePrevious = mainDailyReportObject.getExportPaymentsInfoDateList().get(s);
                    }
                }

                for (int f = 0; f < mainDailyReportObject.getExportProlongationsInfoDateList().size(); f++) {
                    if (mainDailyReportObject.getExportProlongationsInfoDateList().get(f).getDate()
                            .equals(mainDailyReportObject.getDateList().get(a - 1))) {
                        exportProlongationsInfoDatePrevious = mainDailyReportObject.getExportProlongationsInfoDateList().get(f);
                    }
                }
            }

            for (int z = 0; z < mainDailyReportObject.getExportApplicationsInfoDateList().size(); z++) {
                if (mainDailyReportObject.getExportApplicationsInfoDateList().get(z).getDate()
                        .equals(mainDailyReportObject.getDateList().get(a))) {
                    exportApplicationsInfoDate = mainDailyReportObject.getExportApplicationsInfoDateList().get(z);
                }
            }

            for (int x = 0; x < mainDailyReportObject.getExportLoansInfoDateList().size(); x++) {
                if (mainDailyReportObject.getExportLoansInfoDateList().get(x).getDate()
                        .equals(mainDailyReportObject.getDateList().get(a))) {
                    exportLoansInfoDate = mainDailyReportObject.getExportLoansInfoDateList().get(x);
                }
            }

            for (int s = 0; s < mainDailyReportObject.getExportPaymentsInfoDateList().size(); s++) {
                if (mainDailyReportObject.getExportPaymentsInfoDateList().get(s).getDate()
                        .equals(mainDailyReportObject.getDateList().get(a))) {
                    exportPaymentsInfoDate = mainDailyReportObject.getExportPaymentsInfoDateList().get(s);
                }
            }

            for (int f = 0; f < mainDailyReportObject.getExportProlongationsInfoDateList().size(); f++) {
                if (mainDailyReportObject.getExportProlongationsInfoDateList().get(f).getDate()
                        .equals(mainDailyReportObject.getDateList().get(a))) {
                    exportProlongationsInfoDate = mainDailyReportObject.getExportProlongationsInfoDateList().get(f);
                }
            }


            newRowCommonAllVnd.createCell(0)
                    .setCellValue(mainDailyReportObject.getDateList().get(a));
            newRowCommonAllVnd.getCell(0)
                    .setCellStyle(styleDate);

            newRowCommonNewVnd.createCell(0)
                    .setCellValue(mainDailyReportObject.getDateList().get(a));
            newRowCommonNewVnd.getCell(0)
                    .setCellStyle(styleDate);

            newRowCommonRepeatVnd.createCell(0)
                    .setCellValue(mainDailyReportObject.getDateList().get(a));
            newRowCommonRepeatVnd.getCell(0)
                    .setCellStyle(styleDate);

            if (exportLoansInfoDate.getCountLoan() != null) {
                newRowCommonAllVnd.createCell(1).setCellValue(exportLoansInfoDate.getCountLoan());
                newRowCommonAllVnd.getCell(1).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getCountLoanNew() != null) {
                newRowCommonNewVnd.createCell(1).setCellValue(exportLoansInfoDate.getCountLoanNew());
                newRowCommonNewVnd.getCell(1).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getCountLoanRepeat() != null) {
                newRowCommonRepeatVnd.createCell(1).setCellValue(exportLoansInfoDate.getCountLoanRepeat());
                newRowCommonRepeatVnd.getCell(1).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoan() != null) {
                newRowCommonAllVnd.createCell(2).setCellValue(exportLoansInfoDate.getAmountLoan());
                newRowCommonAllVnd.getCell(2).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoanNew() != null) {
                newRowCommonNewVnd.createCell(2).setCellValue(exportLoansInfoDate.getAmountLoanNew());
                newRowCommonNewVnd.getCell(2).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoanRepeat() != null) {
                newRowCommonRepeatVnd.createCell(2).setCellValue(exportLoansInfoDate.getAmountLoanRepeat());
                newRowCommonRepeatVnd.getCell(2).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getCountLoan() != null &&
                    exportLoansInfoDate.getAmountLoan() != null) {
                newRowCommonAllVnd.createCell(3).setCellValue(exportLoansInfoDate.getAmountLoan() /
                        exportLoansInfoDate.getCountLoan());
                newRowCommonAllVnd.getCell(3).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getCountLoanNew() != null &&
                    exportLoansInfoDate.getAmountLoanNew() != null) {
                newRowCommonNewVnd.createCell(3).setCellValue(exportLoansInfoDate.getAmountLoanNew() /
                        exportLoansInfoDate.getCountLoanNew());
                newRowCommonNewVnd.getCell(3).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getCountLoanRepeat() != null &&
                    exportLoansInfoDate.getAmountLoanRepeat() != null) {
                newRowCommonRepeatVnd.createCell(3).setCellValue(exportLoansInfoDate.getAmountLoanRepeat() /
                        exportLoansInfoDate.getCountLoanRepeat());
                newRowCommonRepeatVnd.getCell(3).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoan() != null &&
                    exportLoansInfoDatePrevious.getAmountLoan() != null) {
                newRowCommonAllVnd.createCell(4).setCellValue((exportLoansInfoDate.getAmountLoan() -
                        exportLoansInfoDatePrevious.getAmountLoan()) / exportLoansInfoDatePrevious.getAmountLoan());
                newRowCommonAllVnd.getCell(4).setCellStyle(stylePercent);
            }

            if (exportLoansInfoDate.getAmountLoanNew() != null &&
                    exportLoansInfoDatePrevious.getAmountLoanNew() != null) {
                newRowCommonNewVnd.createCell(4).setCellValue((exportLoansInfoDate.getAmountLoanNew() -
                        exportLoansInfoDatePrevious.getAmountLoanNew()) / exportLoansInfoDatePrevious.getAmountLoanNew());
                newRowCommonNewVnd.getCell(4).setCellStyle(stylePercent);
            }

            if (exportLoansInfoDate.getAmountLoanRepeat() != null &&
                    exportLoansInfoDatePrevious.getAmountLoanRepeat() != null) {
                newRowCommonRepeatVnd.createCell(4).setCellValue((exportLoansInfoDate.getAmountLoanRepeat() -
                        exportLoansInfoDatePrevious.getAmountLoanRepeat()) / exportLoansInfoDatePrevious.getAmountLoanRepeat());
                newRowCommonRepeatVnd.getCell(4).setCellStyle(stylePercent);
            }

            if (exportProlongationsInfoDate.getCountProlonged() != null) {
                newRowCommonAllVnd.createCell(5).setCellValue(exportProlongationsInfoDate.getCountProlonged());
                newRowCommonAllVnd.getCell(5).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getCountProlongedNew() != null) {
                newRowCommonNewVnd.createCell(5).setCellValue(exportProlongationsInfoDate.getCountProlongedNew());
                newRowCommonNewVnd.getCell(5).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getCountProlongedRepeat() != null) {
                newRowCommonRepeatVnd.createCell(5).setCellValue(exportProlongationsInfoDate.getCountProlongedRepeat());
                newRowCommonRepeatVnd.getCell(5).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlonged() != null) {
                newRowCommonAllVnd.createCell(6).setCellValue(exportProlongationsInfoDate.getPrincipalAmountProlonged());
                newRowCommonAllVnd.getCell(6).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlongedNew() != null) {
                newRowCommonNewVnd.createCell(6).setCellValue(exportProlongationsInfoDate.getPrincipalAmountProlongedNew());
                newRowCommonNewVnd.getCell(6).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() != null) {
                newRowCommonRepeatVnd.createCell(6).setCellValue(exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat());
                newRowCommonRepeatVnd.getCell(6).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getCountProlonged() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlonged() != null) {
                newRowCommonAllVnd.createCell(7)
                        .setCellValue(exportProlongationsInfoDate.getPrincipalAmountProlonged() /
                                exportProlongationsInfoDate.getCountProlonged());
                newRowCommonAllVnd.getCell(7).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getCountProlongedNew() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlongedNew() != null) {
                newRowCommonNewVnd.createCell(7)
                        .setCellValue(exportProlongationsInfoDate.getPrincipalAmountProlongedNew() /
                                exportProlongationsInfoDate.getCountProlongedNew());
                newRowCommonNewVnd.getCell(7).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getCountProlongedRepeat() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() != null) {
                newRowCommonRepeatVnd.createCell(7)
                        .setCellValue(exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() /
                                exportProlongationsInfoDate.getCountProlongedRepeat());
                newRowCommonRepeatVnd.getCell(7).setCellStyle(styleNumber);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlonged() != null &&
                    exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged() != null) {
                newRowCommonAllVnd.createCell(8)
                        .setCellValue((exportProlongationsInfoDate.getPrincipalAmountProlonged() -
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged()) /
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged());
                newRowCommonAllVnd.getCell(8).setCellStyle(stylePercent);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlongedNew() != null &&
                    exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew() != null) {
                newRowCommonNewVnd.createCell(8)
                        .setCellValue((exportProlongationsInfoDate.getPrincipalAmountProlongedNew() -
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew()) /
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew());
                newRowCommonNewVnd.getCell(8).setCellStyle(stylePercent);
            }

            if (exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() != null &&
                    exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat() != null) {
                newRowCommonRepeatVnd.createCell(8)
                        .setCellValue((exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() -
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat()) /
                                exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat());
                newRowCommonRepeatVnd.getCell(8).setCellStyle(stylePercent);
            }

            if (exportLoansInfoDate.getAmountLoan() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlonged() != null) {
                newRowCommonAllVnd.createCell(9)
                        .setCellValue(exportLoansInfoDate.getAmountLoan() +
                                exportProlongationsInfoDate.getPrincipalAmountProlonged());
                newRowCommonAllVnd.getCell(9).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoanNew() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlongedNew() != null) {
                newRowCommonNewVnd.createCell(9)
                        .setCellValue(exportLoansInfoDate.getAmountLoanNew() +
                                exportProlongationsInfoDate.getPrincipalAmountProlongedNew());
                newRowCommonNewVnd.getCell(9).setCellStyle(styleNumber);
            }

            if (exportLoansInfoDate.getAmountLoanRepeat() != null &&
                    exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() != null) {
                newRowCommonRepeatVnd.createCell(9)
                        .setCellValue(exportLoansInfoDate.getAmountLoanRepeat() +
                                exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat());
                newRowCommonRepeatVnd.getCell(9).setCellStyle(styleNumber);
            }

            if ((exportLoansInfoDate.getAmountLoan() != null &&
                    exportLoansInfoDatePrevious.getAmountLoan() != null) &&
                    (exportProlongationsInfoDate.getPrincipalAmountProlonged() != null &&
                            exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged() != null)) {
                newRowCommonAllVnd.createCell(10)
                        .setCellValue(((exportLoansInfoDate.getAmountLoan() +
                                exportProlongationsInfoDate.getPrincipalAmountProlonged()) -
                                (exportLoansInfoDatePrevious.getAmountLoan() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged())) /
                                (exportLoansInfoDatePrevious.getAmountLoan() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlonged()));
                newRowCommonAllVnd.getCell(10).setCellStyle(stylePercent);
            }

            if ((exportLoansInfoDate.getAmountLoanNew() != null &&
                    exportLoansInfoDatePrevious.getAmountLoanNew() != null) &&
                    (exportProlongationsInfoDate.getPrincipalAmountProlongedNew() != null &&
                            exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew() != null)) {
                newRowCommonNewVnd.createCell(10)
                        .setCellValue(((exportLoansInfoDate.getAmountLoanNew() +
                                exportProlongationsInfoDate.getPrincipalAmountProlongedNew()) -
                                (exportLoansInfoDatePrevious.getAmountLoanNew() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew())) /
                                (exportLoansInfoDatePrevious.getAmountLoanNew() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedNew()));
                newRowCommonNewVnd.getCell(10).setCellStyle(stylePercent);
            }

            if ((exportLoansInfoDate.getAmountLoanRepeat() != null &&
                    exportLoansInfoDatePrevious.getAmountLoanRepeat() != null) &&
                    (exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat() != null &&
                            exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat() != null)) {
                newRowCommonRepeatVnd.createCell(10)
                        .setCellValue(((exportLoansInfoDate.getAmountLoanRepeat() +
                                exportProlongationsInfoDate.getPrincipalAmountProlongedRepeat()) -
                                (exportLoansInfoDatePrevious.getAmountLoanRepeat() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat())) /
                                (exportLoansInfoDatePrevious.getAmountLoanRepeat() +
                                        exportProlongationsInfoDatePrevious.getPrincipalAmountProlongedRepeat()));
                newRowCommonRepeatVnd.getCell(10).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoDate.getPaidTotal() != null) {
                newRowCommonAllVnd.createCell(11).setCellValue(exportPaymentsInfoDate.getPaidTotal());
                newRowCommonAllVnd.getCell(11).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidTotalNew() != null) {
                newRowCommonNewVnd.createCell(11).setCellValue(exportPaymentsInfoDate.getPaidTotalNew());
                newRowCommonNewVnd.getCell(11).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidTotalRepeat() != null) {
                newRowCommonRepeatVnd.createCell(11).setCellValue(exportPaymentsInfoDate.getPaidTotalRepeat());
                newRowCommonRepeatVnd.getCell(11).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidPrincipal() != null) {
                newRowCommonAllVnd.createCell(12).setCellValue(exportPaymentsInfoDate.getPaidPrincipal());
                newRowCommonAllVnd.getCell(12).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidPrincipalNew() != null) {
                newRowCommonNewVnd.createCell(12).setCellValue(exportPaymentsInfoDate.getPaidPrincipalNew());
                newRowCommonNewVnd.getCell(12).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidPrincipalRepeat() != null) {
                newRowCommonRepeatVnd.createCell(12).setCellValue(exportPaymentsInfoDate.getPaidPrincipalRepeat());
                newRowCommonRepeatVnd.getCell(12).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidIncome() != null) {
                newRowCommonAllVnd.createCell(13).setCellValue(exportPaymentsInfoDate.getPaidIncome());
                newRowCommonAllVnd.getCell(13).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidIncomeNew() != null) {
                newRowCommonNewVnd.createCell(13).setCellValue(exportPaymentsInfoDate.getPaidIncomeNew());
                newRowCommonNewVnd.getCell(13).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidIncomeRepeat() != null) {
                newRowCommonRepeatVnd.createCell(13).setCellValue(exportPaymentsInfoDate.getPaidIncomeRepeat());
                newRowCommonRepeatVnd.getCell(13).setCellStyle(styleNumber);
            }

            if (exportPaymentsInfoDate.getPaidTotal() != null &&
                    exportPaymentsInfoDatePrevious.getPaidTotal() != null) {
                newRowCommonAllVnd.createCell(14).setCellValue((exportPaymentsInfoDate.getPaidTotal() -
                        exportPaymentsInfoDatePrevious.getPaidTotal()) /
                        exportPaymentsInfoDatePrevious.getPaidTotal());
                newRowCommonAllVnd.getCell(14).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoDate.getPaidTotalNew() != null &&
                    exportPaymentsInfoDatePrevious.getPaidTotalNew() != null) {
                newRowCommonNewVnd.createCell(14).setCellValue((exportPaymentsInfoDate.getPaidTotalNew() -
                        exportPaymentsInfoDatePrevious.getPaidTotalNew()) /
                        exportPaymentsInfoDatePrevious.getPaidTotalNew());
                newRowCommonNewVnd.getCell(14).setCellStyle(stylePercent);
            }

            if (exportPaymentsInfoDate.getPaidTotalRepeat() != null &&
                    exportPaymentsInfoDatePrevious.getPaidTotalRepeat() != null) {
                newRowCommonRepeatVnd.createCell(14).setCellValue((exportPaymentsInfoDate.getPaidTotalRepeat() -
                        exportPaymentsInfoDatePrevious.getPaidTotalRepeat()) /
                        exportPaymentsInfoDatePrevious.getPaidTotalRepeat());
                newRowCommonRepeatVnd.getCell(14).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgress() != null) {
                newRowCommonAllVnd.createCell(15).setCellValue(exportApplicationsInfoDate.getCountAppsInProgress());
                newRowCommonAllVnd.getCell(15).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgressNew() != null) {
                newRowCommonNewVnd.createCell(15).setCellValue(exportApplicationsInfoDate.getCountAppsInProgressNew());
                newRowCommonNewVnd.getCell(15).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgressRepeat() != null) {
                newRowCommonRepeatVnd.createCell(15).setCellValue(exportApplicationsInfoDate.getCountAppsInProgressRepeat());
                newRowCommonRepeatVnd.getCell(15).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgress() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllVnd.createCell(16)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsInProgress() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllVnd.getCell(16).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgressNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewVnd.createCell(16)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsInProgressNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewVnd.getCell(16).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsInProgressRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatVnd.createCell(16)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsInProgressRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatVnd.getCell(16).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystem() != null) {
                newRowCommonAllVnd.createCell(17)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledBySystem());
                newRowCommonAllVnd.getCell(17).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystemNew() != null) {
                newRowCommonNewVnd.createCell(17)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledBySystemNew());
                newRowCommonNewVnd.getCell(17).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystemRepeat() != null) {
                newRowCommonRepeatVnd.createCell(17)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledBySystemRepeat());
                newRowCommonRepeatVnd.getCell(17).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystem() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllVnd.createCell(18)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledBySystem() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllVnd.getCell(18).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystemNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewVnd.createCell(18)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledBySystemNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewVnd.getCell(18).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledBySystemRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatVnd.createCell(18)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledBySystemRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatVnd.getCell(18).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClient() != null) {
                newRowCommonAllVnd.createCell(19)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledByClient());
                newRowCommonAllVnd.getCell(19).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClientNew() != null) {
                newRowCommonNewVnd.createCell(19)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledByClientNew());
                newRowCommonNewVnd.getCell(19).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClientRepeat() != null) {
                newRowCommonRepeatVnd.createCell(19)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsCanceledByClientRepeat());
                newRowCommonRepeatVnd.getCell(19).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClient() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllVnd.createCell(20)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledByClient() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllVnd.getCell(20).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClientNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewVnd.createCell(20)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledByClientNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewVnd.getCell(20).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsCanceledByClientRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatVnd.createCell(20)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsCanceledByClientRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatVnd.getCell(20).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsRejected() != null) {
                newRowCommonAllVnd.createCell(21)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsRejected());
                newRowCommonAllVnd.getCell(21).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsRejectedNew() != null) {
                newRowCommonNewVnd.createCell(21)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsRejectedNew());
                newRowCommonNewVnd.getCell(21).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsRejectedRepeat() != null) {
                newRowCommonRepeatVnd.createCell(21)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsRejectedRepeat());
                newRowCommonRepeatVnd.getCell(21).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsRejected() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllVnd.createCell(22)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsRejected() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllVnd.getCell(22).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsRejectedNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewVnd.createCell(22)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsRejectedNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewVnd.getCell(22).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsRejectedRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatVnd.createCell(22)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsRejectedRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatVnd.getCell(22).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApproved() != null) {
                newRowCommonAllVnd.createCell(23)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsWasApproved());
                newRowCommonAllVnd.getCell(23).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApprovedNew() != null) {
                newRowCommonNewVnd.createCell(23)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsWasApprovedNew());
                newRowCommonNewVnd.getCell(23).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApprovedRepeat() != null) {
                newRowCommonRepeatVnd.createCell(23)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsWasApprovedRepeat());
                newRowCommonRepeatVnd.getCell(23).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApproved() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllVnd.createCell(24)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsWasApproved() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllVnd.getCell(24).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApprovedNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewVnd.createCell(24)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsWasApprovedNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewVnd.getCell(24).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsWasApprovedRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatVnd.createCell(24)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsWasApprovedRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatVnd.getCell(24).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsIssued() != null) {
                newRowCommonAllVnd.createCell(25)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsIssued());
                newRowCommonAllVnd.getCell(25).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsIssuedNew() != null) {
                newRowCommonNewVnd.createCell(25)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsIssuedNew());
                newRowCommonNewVnd.getCell(25).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsIssuedRepeat() != null) {
                newRowCommonRepeatVnd.createCell(25)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsIssuedRepeat());
                newRowCommonRepeatVnd.getCell(25).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsIssued() != null &&
                    exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllVnd.createCell(26)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsIssued() /
                                (double) exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllVnd.getCell(26).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsIssuedNew() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewVnd.createCell(26)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsIssuedNew() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewVnd.getCell(26).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsIssuedRepeat() != null &&
                    exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatVnd.createCell(26)
                        .setCellValue((double) exportApplicationsInfoDate.getCountAppsIssuedRepeat() /
                                (double) exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatVnd.getCell(26).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsTotal() != null) {
                newRowCommonAllVnd.createCell(27)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsTotal());
                newRowCommonAllVnd.getCell(27).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsTotalNew() != null) {
                newRowCommonNewVnd.createCell(27)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsTotalNew());
                newRowCommonNewVnd.getCell(27).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatVnd.createCell(27)
                        .setCellValue(exportApplicationsInfoDate.getCountAppsTotalRepeat());
                newRowCommonRepeatVnd.getCell(27).setCellStyle(styleNumber);
            }

            if (exportApplicationsInfoDate.getCountAppsTotal() != null &&
                    exportApplicationsInfoDatePrevious.getCountAppsTotal() != null) {
                newRowCommonAllVnd.createCell(28)
                        .setCellValue((double) (exportApplicationsInfoDate.getCountAppsTotal() -
                                exportApplicationsInfoDatePrevious.getCountAppsTotal()) /
                                (double) exportApplicationsInfoDatePrevious.getCountAppsTotal());
                newRowCommonAllVnd.getCell(28).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsTotalNew() != null &&
                    exportApplicationsInfoDatePrevious.getCountAppsTotalNew() != null) {
                newRowCommonNewVnd.createCell(28)
                        .setCellValue((double) (exportApplicationsInfoDate.getCountAppsTotalNew() -
                                exportApplicationsInfoDatePrevious.getCountAppsTotalNew()) /
                                (double) exportApplicationsInfoDatePrevious.getCountAppsTotalNew());
                newRowCommonNewVnd.getCell(28).setCellStyle(stylePercent);
            }

            if (exportApplicationsInfoDate.getCountAppsTotalRepeat() != null &&
                    exportApplicationsInfoDatePrevious.getCountAppsTotalRepeat() != null) {
                newRowCommonRepeatVnd.createCell(28)
                        .setCellValue((double) (exportApplicationsInfoDate.getCountAppsTotalRepeat() -
                                exportApplicationsInfoDatePrevious.getCountAppsTotalRepeat()) /
                                (double) exportApplicationsInfoDatePrevious.getCountAppsTotalRepeat());
                newRowCommonRepeatVnd.getCell(28).setCellStyle(stylePercent);
            }

            rowCommon += 1;

            if (mainDailyReportObject.getDateList().size() == a + 1 ||
                    !mainDailyReportObject.getDateList().get(a).getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a + 1).getMonth())) {
                LocalDate monthCommon = null;

                for (int z = 0; z < mainDailyReportObject.getMonthList().size(); z++) {
                    if (mainDailyReportObject.getMonthList().get(z).getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a).getMonth()) &&
                            mainDailyReportObject.getMonthList().get(z).getYear() ==
                                    mainDailyReportObject.getDateList().get(a).getYear()) {
                        monthCommon = mainDailyReportObject.getMonthList().get(z);
                    }
                }

                ExportApplicationsInfoDate exportCommonApplicationsInfoMonth = new ExportApplicationsInfoDate();
                ExportLoansInfoDate exportCommonLoansInfoMonth = new ExportLoansInfoDate();
                ExportProlongationsInfoDate exportCommonProlongationsInfoMonth = new ExportProlongationsInfoDate();
                ExportPaymentsInfoDate exportCommonPaymentsInfoMonth = new ExportPaymentsInfoDate();

                ExportApplicationsInfoDate exportCommonApplicationsInfoMonthPrevious = new ExportApplicationsInfoDate();
                ExportLoansInfoDate exportCommonLoansInfoMonthPrevious = new ExportLoansInfoDate();
                ExportProlongationsInfoDate exportCommonProlongationsInfoMonthPrevious = new ExportProlongationsInfoDate();
                ExportPaymentsInfoDate exportCommonPaymentsInfoMonthPrevious = new ExportPaymentsInfoDate();

                for (int z = 0; z < mainDailyReportObject.getExportApplicationsInfoMonthList().size(); z++) {
                    if (mainDailyReportObject.getExportApplicationsInfoMonthList().get(z).getDate().getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a).getMonth()) &&
                            mainDailyReportObject.getExportApplicationsInfoMonthList().get(z).getDate().getYear() ==
                                    mainDailyReportObject.getDateList().get(a).getYear()) {
                        exportCommonApplicationsInfoMonth =
                                mainDailyReportObject.getExportApplicationsInfoMonthList().get(z);
                    }
                }

                for (int z = 0; z < mainDailyReportObject.getExportLoansInfoMonthList().size(); z++) {
                    if (mainDailyReportObject.getExportLoansInfoMonthList().get(z).getDate().getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a).getMonth()) &&
                            mainDailyReportObject.getExportLoansInfoMonthList().get(z).getDate().getYear() ==
                                    mainDailyReportObject.getDateList().get(a).getYear()) {
                        exportCommonLoansInfoMonth =
                                mainDailyReportObject.getExportLoansInfoMonthList().get(z);
                    }
                }

                for (int z = 0; z < mainDailyReportObject.getExportProlongationsInfoMonthList().size(); z++) {
                    if (mainDailyReportObject.getExportProlongationsInfoMonthList().get(z).getDate().getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a).getMonth()) &&
                            mainDailyReportObject.getExportProlongationsInfoMonthList().get(z).getDate().getYear() ==
                                    mainDailyReportObject.getDateList().get(a).getYear()) {
                        exportCommonProlongationsInfoMonth =
                                mainDailyReportObject.getExportProlongationsInfoMonthList().get(z);
                    }
                }

                for (int z = 0; z < mainDailyReportObject.getExportPaymentsInfoMonthList().size(); z++) {
                    if (mainDailyReportObject.getExportPaymentsInfoMonthList().get(z).getDate().getMonth()
                            .equals(mainDailyReportObject.getDateList().get(a).getMonth()) &&
                            mainDailyReportObject.getExportPaymentsInfoMonthList().get(z).getDate().getYear() ==
                                    mainDailyReportObject.getDateList().get(a).getYear()) {
                        exportCommonPaymentsInfoMonth =
                                mainDailyReportObject.getExportPaymentsInfoMonthList().get(z);
                    }
                }

                if (!mainDailyReportObject.getDateList().get(a).getMonth()
                        .equals(mainDailyReportObject.getDateList().get(0).getMonth())) {

                    for (int z = 0; z < mainDailyReportObject.getExportApplicationsInfoMonthList().size(); z++) {
                        if (mainDailyReportObject.getExportApplicationsInfoMonthList().get(z).getDate().getMonth()
                                .equals(mainDailyReportObject.getDateList().get(a).minusMonths(1).getMonth()) &&
                                mainDailyReportObject.getExportApplicationsInfoMonthList().get(z).getDate().getYear() ==
                                        mainDailyReportObject.getDateList().get(a).minusMonths(1).getYear()) {
                            exportCommonApplicationsInfoMonthPrevious =
                                    mainDailyReportObject.getExportApplicationsInfoMonthList().get(z);
                        }
                    }

                    for (int z = 0; z < mainDailyReportObject.getExportLoansInfoMonthList().size(); z++) {
                        if (mainDailyReportObject.getExportLoansInfoMonthList().get(z).getDate().getMonth()
                                .equals(mainDailyReportObject.getDateList().get(a).minusMonths(1).getMonth()) &&
                                mainDailyReportObject.getExportLoansInfoMonthList().get(z).getDate().getYear() ==
                                        mainDailyReportObject.getDateList().get(a).minusMonths(1).getYear()) {
                            exportCommonLoansInfoMonthPrevious =
                                    mainDailyReportObject.getExportLoansInfoMonthList().get(z);
                        }
                    }

                    for (int z = 0; z < mainDailyReportObject.getExportProlongationsInfoMonthList().size(); z++) {
                        if (mainDailyReportObject.getExportProlongationsInfoMonthList().get(z).getDate().getMonth()
                                .equals(mainDailyReportObject.getDateList().get(a).minusMonths(1).getMonth()) &&
                                mainDailyReportObject.getExportProlongationsInfoMonthList().get(z).getDate().getYear() ==
                                        mainDailyReportObject.getDateList().get(a).minusMonths(1).getYear()) {
                            exportCommonProlongationsInfoMonthPrevious =
                                    mainDailyReportObject.getExportProlongationsInfoMonthList().get(z);
                        }
                    }

                    for (int z = 0; z < mainDailyReportObject.getExportPaymentsInfoMonthList().size(); z++) {
                        if (mainDailyReportObject.getExportPaymentsInfoMonthList().get(z).getDate().getMonth()
                                .equals(mainDailyReportObject.getDateList().get(a).minusMonths(1).getMonth()) &&
                                mainDailyReportObject.getExportPaymentsInfoMonthList().get(z).getDate().getYear() ==
                                        mainDailyReportObject.getDateList().get(a).minusMonths(1).getYear()) {
                            exportCommonPaymentsInfoMonthPrevious =
                                    mainDailyReportObject.getExportPaymentsInfoMonthList().get(z);
                        }
                    }
                }

                rowNumberForGroupLastCommon = rowCommon - 1;

                sheetCommonDailyAllVnd.groupRow(rowNumberForGroupFirstCommon, rowNumberForGroupLastCommon);
                sheetCommonDailyNewVnd.groupRow(rowNumberForGroupFirstCommon, rowNumberForGroupLastCommon);
                sheetCommonDailyRepeatVnd.groupRow(rowNumberForGroupFirstCommon, rowNumberForGroupLastCommon);

                Row newRowCommonTotalMonthAllVnd = sheetCommonDailyAllVnd.createRow(rowCommon);
                Row newRowCommonTotalMonthNewVnd = sheetCommonDailyNewVnd.createRow(rowCommon);
                Row newRowCommonTotalMonthRepeatVnd = sheetCommonDailyRepeatVnd.createRow(rowCommon);

                newRowCommonTotalMonthAllVnd.createCell(0)
                        .setCellValue(monthCommon);
                newRowCommonTotalMonthAllVnd.getCell(0).setCellStyle(styleMonthBold);

                newRowCommonTotalMonthNewVnd.createCell(0)
                        .setCellValue(monthCommon);
                newRowCommonTotalMonthNewVnd.getCell(0).setCellStyle(styleMonthBold);

                newRowCommonTotalMonthRepeatVnd.createCell(0)
                        .setCellValue(monthCommon);
                newRowCommonTotalMonthRepeatVnd.getCell(0).setCellStyle(styleMonthBold);

                if (exportCommonLoansInfoMonth.getCountLoan() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(1)
                            .setCellValue(exportCommonLoansInfoMonth.getCountLoan());
                    newRowCommonTotalMonthAllVnd.getCell(1).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getCountLoanNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(1)
                            .setCellValue(exportCommonLoansInfoMonth.getCountLoanNew());
                    newRowCommonTotalMonthNewVnd.getCell(1).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getCountLoanRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(1)
                            .setCellValue(exportCommonLoansInfoMonth.getCountLoanRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(1).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoan() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(2)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoan());
                    newRowCommonTotalMonthAllVnd.getCell(2).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(2)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoanNew());
                    newRowCommonTotalMonthNewVnd.getCell(2).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(2)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoanRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(2).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoan() != null &&
                        exportCommonLoansInfoMonth.getCountLoan() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(3)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoan() /
                                    exportCommonLoansInfoMonth.getCountLoan());
                    newRowCommonTotalMonthAllVnd.getCell(3).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanNew() != null &&
                        exportCommonLoansInfoMonth.getCountLoanNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(3)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoanNew() /
                                    exportCommonLoansInfoMonth.getCountLoanNew());
                    newRowCommonTotalMonthNewVnd.getCell(3).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanRepeat() != null &&
                        exportCommonLoansInfoMonth.getCountLoanRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(3)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoanRepeat() /
                                    exportCommonLoansInfoMonth.getCountLoanRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(3).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoan() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoan() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(4)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoan() -
                                    exportCommonLoansInfoMonthPrevious.getAmountLoan()) /
                                    exportCommonLoansInfoMonthPrevious.getAmountLoan());
                    newRowCommonTotalMonthAllVnd.getCell(4).setCellStyle(stylePercentBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanNew() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoanNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(4)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoanNew() -
                                    exportCommonLoansInfoMonthPrevious.getAmountLoanNew()) /
                                    exportCommonLoansInfoMonthPrevious.getAmountLoanNew());
                    newRowCommonTotalMonthNewVnd.getCell(4).setCellStyle(stylePercentBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanRepeat() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(4)
                            .setCellValue((exportCommonLoansInfoMonth.getAmountLoanRepeat() -
                                    exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat()) /
                                    exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(4).setCellStyle(stylePercentBold);
                }

                if (exportCommonProlongationsInfoMonth.getCountProlonged() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(5)
                            .setCellValue(exportCommonProlongationsInfoMonth.getCountProlonged());
                    newRowCommonTotalMonthAllVnd.getCell(5).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getCountProlongedNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(5)
                            .setCellValue(exportCommonProlongationsInfoMonth.getCountProlongedNew());
                    newRowCommonTotalMonthNewVnd.getCell(5).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getCountProlongedRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(5)
                            .setCellValue(exportCommonProlongationsInfoMonth.getCountProlongedRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(5).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(6)
                            .setCellValue(exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged());
                    newRowCommonTotalMonthAllVnd.getCell(6).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(6)
                            .setCellValue(exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew());
                    newRowCommonTotalMonthNewVnd.getCell(6).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(6)
                            .setCellValue(exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(6).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() != null &&
                        exportCommonProlongationsInfoMonth.getCountProlonged() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(7)
                            .setCellValue(exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() /
                                    exportCommonProlongationsInfoMonth.getCountProlonged());
                    newRowCommonTotalMonthAllVnd.getCell(7).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() != null &&
                        exportCommonProlongationsInfoMonth.getCountProlongedNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(7)
                            .setCellValue(exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() /
                                    exportCommonProlongationsInfoMonth.getCountProlongedNew());
                    newRowCommonTotalMonthNewVnd.getCell(7).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null &&
                        exportCommonProlongationsInfoMonth.getCountProlongedRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(7)
                            .setCellValue(exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() /
                                    exportCommonProlongationsInfoMonth.getCountProlongedRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(7).setCellStyle(styleNumberBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() != null &&
                        exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(8)
                            .setCellValue((exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() -
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged()) /
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged());
                    newRowCommonTotalMonthAllVnd.getCell(8).setCellStyle(stylePercentBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() != null &&
                        exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(8)
                            .setCellValue((exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() -
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew()) /
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew());
                    newRowCommonTotalMonthNewVnd.getCell(8).setCellStyle(stylePercentBold);
                }

                if (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null &&
                        exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(8)
                            .setCellValue((exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() -
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat()) /
                                    exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(8).setCellStyle(stylePercentBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoan() != null &&
                        exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(9)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoan() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged());
                    newRowCommonTotalMonthAllVnd.getCell(9).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanNew() != null &&
                        exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(9)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoanNew() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew());
                    newRowCommonTotalMonthNewVnd.getCell(9).setCellStyle(styleNumberBold);
                }

                if (exportCommonLoansInfoMonth.getAmountLoanRepeat() != null &&
                        exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(9)
                            .setCellValue(exportCommonLoansInfoMonth.getAmountLoanRepeat() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(9).setCellStyle(styleNumberBold);
                }

                if ((exportCommonLoansInfoMonth.getAmountLoan() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoan() != null) &&
                        (exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged() != null &&
                                exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged() != null)) {
                    newRowCommonTotalMonthAllVnd.createCell(10)
                            .setCellValue(((exportCommonLoansInfoMonth.getAmountLoan() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlonged()) -
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoan() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged())) /
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoan() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlonged()));
                    newRowCommonTotalMonthAllVnd.getCell(10).setCellStyle(stylePercentBold);
                }

                if ((exportCommonLoansInfoMonth.getAmountLoanNew() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoanNew() != null) &&
                        (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew() != null &&
                                exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew() != null)) {
                    newRowCommonTotalMonthNewVnd.createCell(10)
                            .setCellValue(((exportCommonLoansInfoMonth.getAmountLoanNew() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedNew()) -
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoanNew() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew())) /
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoanNew() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedNew()));
                    newRowCommonTotalMonthNewVnd.getCell(10).setCellStyle(stylePercentBold);
                }

                if ((exportCommonLoansInfoMonth.getAmountLoanRepeat() != null &&
                        exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat() != null) &&
                        (exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat() != null &&
                                exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat() != null)) {
                    newRowCommonTotalMonthRepeatVnd.createCell(10)
                            .setCellValue(((exportCommonLoansInfoMonth.getAmountLoanRepeat() +
                                    exportCommonProlongationsInfoMonth.getPrincipalAmountProlongedRepeat()) -
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat())) /
                                    (exportCommonLoansInfoMonthPrevious.getAmountLoanRepeat() +
                                            exportCommonProlongationsInfoMonthPrevious.getPrincipalAmountProlongedRepeat()));
                    newRowCommonTotalMonthRepeatVnd.getCell(10).setCellStyle(stylePercentBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotal() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(11)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidTotal());
                    newRowCommonTotalMonthAllVnd.getCell(11).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotalNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(11)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidTotalNew());
                    newRowCommonTotalMonthNewVnd.getCell(11).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(11)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidTotalRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(11).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidPrincipal() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(12)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidPrincipal());
                    newRowCommonTotalMonthAllVnd.getCell(12).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidPrincipalNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(12)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidPrincipalNew());
                    newRowCommonTotalMonthNewVnd.getCell(12).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidPrincipalRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(12)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidPrincipalRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(12).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidIncome() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(13)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidIncome());
                    newRowCommonTotalMonthAllVnd.getCell(13).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidIncomeNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(13)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidIncomeNew());
                    newRowCommonTotalMonthNewVnd.getCell(13).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidIncomeRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(13)
                            .setCellValue(exportCommonPaymentsInfoMonth.getPaidIncomeRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(13).setCellStyle(styleNumberBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotal() != null &&
                        exportCommonPaymentsInfoMonthPrevious.getPaidTotal() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(14)
                            .setCellValue((exportCommonPaymentsInfoMonth.getPaidTotal() -
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotal()) /
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotal());
                    newRowCommonTotalMonthAllVnd.getCell(14).setCellStyle(stylePercentBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotalNew() != null &&
                        exportCommonPaymentsInfoMonthPrevious.getPaidTotalNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(14)
                            .setCellValue((exportCommonPaymentsInfoMonth.getPaidTotalNew() -
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotalNew()) /
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotalNew());
                    newRowCommonTotalMonthNewVnd.getCell(14).setCellStyle(stylePercentBold);
                }

                if (exportCommonPaymentsInfoMonth.getPaidTotalRepeat() != null &&
                        exportCommonPaymentsInfoMonthPrevious.getPaidTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(14)
                            .setCellValue((exportCommonPaymentsInfoMonth.getPaidTotalRepeat() -
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotalRepeat()) /
                                    exportCommonPaymentsInfoMonthPrevious.getPaidTotalRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(14).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgress() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(15)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsInProgress());
                    newRowCommonTotalMonthAllVnd.getCell(15).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgressNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(15)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsInProgressNew());
                    newRowCommonTotalMonthNewVnd.getCell(15).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgressRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(15)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsInProgressRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(15).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgress() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(16)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsInProgress() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllVnd.getCell(16).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgressNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(16)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsInProgressNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewVnd.getCell(16).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsInProgressRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(16)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsInProgressRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(16).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystem() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(17)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystem());
                    newRowCommonTotalMonthAllVnd.getCell(17).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(17)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemNew());
                    newRowCommonTotalMonthNewVnd.getCell(17).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(17)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(17).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystem() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(18)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystem() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllVnd.getCell(18).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(18)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewVnd.getCell(18).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(18)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledBySystemRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(18).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClient() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(19)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledByClient());
                    newRowCommonTotalMonthAllVnd.getCell(19).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(19)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientNew());
                    newRowCommonTotalMonthNewVnd.getCell(19).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(19)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(19).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClient() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(20)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledByClient() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllVnd.getCell(20).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(20)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewVnd.getCell(20).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(20)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsCanceledByClientRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(20).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejected() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(21)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsRejected());
                    newRowCommonTotalMonthAllVnd.getCell(21).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejectedNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(21)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsRejectedNew());
                    newRowCommonTotalMonthNewVnd.getCell(21).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejectedRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(21)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsRejectedRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(21).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejected() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(22)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsRejected() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllVnd.getCell(22).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejectedNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(22)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsRejectedNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewVnd.getCell(22).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsRejectedRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(22)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsRejectedRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(22).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApproved() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(23)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsWasApproved());
                    newRowCommonTotalMonthAllVnd.getCell(23).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApprovedNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(23)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsWasApprovedNew());
                    newRowCommonTotalMonthNewVnd.getCell(23).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApprovedRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(23)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsWasApprovedRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(23).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApproved() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(24)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsWasApproved() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllVnd.getCell(24).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApprovedNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(24)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsWasApprovedNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewVnd.getCell(24).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsWasApprovedRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(24)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsWasApprovedRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(24).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssued() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(25)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsIssued());
                    newRowCommonTotalMonthAllVnd.getCell(25).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssuedNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(25)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsIssuedNew());
                    newRowCommonTotalMonthNewVnd.getCell(25).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssuedRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(25)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsIssuedRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(25).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssued() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(26)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsIssued() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllVnd.getCell(26).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssuedNew() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(26)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsIssuedNew() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewVnd.getCell(26).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsIssuedRepeat() != null &&
                        exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(26)
                            .setCellValue((double) exportCommonApplicationsInfoMonth.getCountAppsIssuedRepeat() /
                                    (double) exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(26).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(27)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsTotal());
                    newRowCommonTotalMonthAllVnd.getCell(27).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(27)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewVnd.getCell(27).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(27)
                            .setCellValue(exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(27).setCellStyle(styleNumberBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotal() != null &&
                        exportCommonApplicationsInfoMonthPrevious.getCountAppsTotal() != null) {
                    newRowCommonTotalMonthAllVnd.createCell(28)
                            .setCellValue((double) (exportCommonApplicationsInfoMonth.getCountAppsTotal() -
                                    exportCommonApplicationsInfoMonthPrevious.getCountAppsTotal()) /
                                    (double) exportCommonApplicationsInfoMonthPrevious.getCountAppsTotal());
                    newRowCommonTotalMonthAllVnd.getCell(28).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotalNew() != null &&
                        exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalNew() != null) {
                    newRowCommonTotalMonthNewVnd.createCell(28)
                            .setCellValue((double) (exportCommonApplicationsInfoMonth.getCountAppsTotalNew() -
                                    exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalNew()) /
                                    (double) exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalNew());
                    newRowCommonTotalMonthNewVnd.getCell(28).setCellStyle(stylePercentBold);
                }

                if (exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() != null &&
                        exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalRepeat() != null) {
                    newRowCommonTotalMonthRepeatVnd.createCell(28)
                            .setCellValue((double) (exportCommonApplicationsInfoMonth.getCountAppsTotalRepeat() -
                                    exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalRepeat()) /
                                    (double) exportCommonApplicationsInfoMonthPrevious.getCountAppsTotalRepeat());
                    newRowCommonTotalMonthRepeatVnd.getCell(28).setCellStyle(stylePercentBold);
                }

                rowCommon += 1;
                rowNumberForGroupFirstCommon = rowCommon;

            }
        }

        //rules,Conditions
        SheetConditionalFormatting sheetCommonDailyAllVndCF = sheetCommonDailyAllVnd.getSheetConditionalFormatting();
        SheetConditionalFormatting sheetCommonDailyNewVndCF = sheetCommonDailyNewVnd.getSheetConditionalFormatting();
        SheetConditionalFormatting sheetCommonDailyRepeatVndCF = sheetCommonDailyRepeatVnd.getSheetConditionalFormatting();

        //rule #1 common
        ConditionalFormattingRule ruleSheetCommonDailyAllVnd1 = sheetCommonDailyAllVndCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.00");
        PatternFormatting pfSheetCommonDailyAllVnd1 = ruleSheetCommonDailyAllVnd1.createPatternFormatting();
        pfSheetCommonDailyAllVnd1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetCommonDailyAllVnd1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyAllVnd1 = new ConditionalFormattingRule[] {ruleSheetCommonDailyAllVnd1};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyAllVnd1 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyAllVndCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyAllVnd1,
                conditionalFormattingRulesSheetCommonDailyAllVnd1);

        ConditionalFormattingRule ruleSheetCommonDailyNewVnd1 = sheetCommonDailyNewVndCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.00");
        PatternFormatting pfSheetCommonDailyNewVnd1 = ruleSheetCommonDailyNewVnd1.createPatternFormatting();
        pfSheetCommonDailyNewVnd1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetCommonDailyNewVnd1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyNewVnd1 = new ConditionalFormattingRule[] {ruleSheetCommonDailyNewVnd1};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyNewVnd1 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyNewVndCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyNewVnd1,
                conditionalFormattingRulesSheetCommonDailyNewVnd1);

        ConditionalFormattingRule ruleSheetCommonDailyRepeatVnd1 = sheetCommonDailyRepeatVndCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.00");
        PatternFormatting pfSheetCommonDailyRepeatVnd1 = ruleSheetCommonDailyRepeatVnd1.createPatternFormatting();
        pfSheetCommonDailyRepeatVnd1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetCommonDailyRepeatVnd1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyRepeatVnd1 = new ConditionalFormattingRule[] {ruleSheetCommonDailyRepeatVnd1};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyRepeatVnd1 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyRepeatVndCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyRepeatVnd1,
                conditionalFormattingRulesSheetCommonDailyRepeatVnd1);

        //rule #2 common
        ConditionalFormattingRule ruleSheetCommonDailyAllVnd2 = sheetCommonDailyAllVndCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.00");
        PatternFormatting pfSheetCommonDailyAllVnd2 = ruleSheetCommonDailyAllVnd2.createPatternFormatting();
        pfSheetCommonDailyAllVnd2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetCommonDailyAllVnd2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyAllVnd2 = new ConditionalFormattingRule[] {ruleSheetCommonDailyAllVnd2};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyAllVnd2 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyAllVndCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyAllVnd2,
                conditionalFormattingRulesSheetCommonDailyAllVnd2);

        ConditionalFormattingRule ruleSheetCommonDailyNewVnd2 = sheetCommonDailyNewVndCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.00");
        PatternFormatting pfSheetCommonDailyNewVnd2 = ruleSheetCommonDailyNewVnd2.createPatternFormatting();
        pfSheetCommonDailyNewVnd2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetCommonDailyNewVnd2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyNewVnd2 = new ConditionalFormattingRule[] {ruleSheetCommonDailyNewVnd2};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyNewVnd2 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyNewVndCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyNewVnd2,
                conditionalFormattingRulesSheetCommonDailyNewVnd2);

        ConditionalFormattingRule ruleSheetCommonDailyRepeatVnd2 = sheetCommonDailyRepeatVndCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.00");
        PatternFormatting pfSheetCommonDailyRepeatVnd2 = ruleSheetCommonDailyRepeatVnd2.createPatternFormatting();
        pfSheetCommonDailyRepeatVnd2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetCommonDailyRepeatVnd2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetCommonDailyRepeatVnd2 = new ConditionalFormattingRule[] {ruleSheetCommonDailyRepeatVnd2};
        CellRangeAddress[] cellRangeAddressesSheetCommonDailyRepeatVnd2 =
                new CellRangeAddress[] {CellRangeAddress.valueOf("E4:E" + rowCommon),
                        CellRangeAddress.valueOf("I4:I" + rowCommon),
                        CellRangeAddress.valueOf("K4:K" + rowCommon),
                        CellRangeAddress.valueOf("O4:O" + rowCommon),
                        CellRangeAddress.valueOf("AC4:AC" + rowCommon)};
        sheetCommonDailyRepeatVndCF.addConditionalFormatting(cellRangeAddressesSheetCommonDailyRepeatVnd2,
                conditionalFormattingRulesSheetCommonDailyRepeatVnd2);


        //Sheet. Row and Columns groups, width etc.
        sheetCommonDailyAllVnd.setColumnWidth(0, 12 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(1, 14 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(2, 20 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(3, 17 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(4, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(5, 14 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(6, 20 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(7, 17 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(8, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(9, 20 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(10, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(11, 20 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(12, 20 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(13, 20 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(14, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(15, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(16, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(17, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(18, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(19, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(20, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(21, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(22, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(23, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(24, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(25, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(26, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(27, 11 * 256);
        sheetCommonDailyAllVnd.setColumnWidth(28, 11 * 256);

        sheetCommonDailyNewVnd.setColumnWidth(0, 12 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(1, 14 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(2, 20 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(3, 17 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(4, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(5, 14 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(6, 20 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(7, 17 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(8, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(9, 20 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(10, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(11, 20 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(12, 20 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(13, 20 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(14, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(15, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(16, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(17, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(18, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(19, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(20, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(21, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(22, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(23, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(24, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(25, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(26, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(27, 11 * 256);
        sheetCommonDailyNewVnd.setColumnWidth(28, 11 * 256);

        sheetCommonDailyRepeatVnd.setColumnWidth(0, 12 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(1, 14 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(2, 20 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(3, 17 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(4, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(5, 14 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(6, 20 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(7, 17 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(8, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(9, 20 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(10, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(11, 20 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(12, 20 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(13, 20 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(14, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(15, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(16, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(17, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(18, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(19, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(20, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(21, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(22, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(23, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(24, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(25, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(26, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(27, 11 * 256);
        sheetCommonDailyRepeatVnd.setColumnWidth(28, 11 * 256);

        sheetCommonDailyAllVnd.createFreezePane(1,2);
        sheetCommonDailyNewVnd.createFreezePane(1,2);
        sheetCommonDailyRepeatVnd.createFreezePane(1,2);
    }

    private static void createSheetsExpiredLoansVnd(Workbook workbook, MainDailyReportObject mainDailyReportObject,
                                                    CellStyle styleTextHeaders, CellStyle styleDate,
                                                    CellStyle stylePercent, CellStyle styleNumber,
                                                    CellStyle styleMonthBold, CellStyle stylePercentBold,
                                                    CellStyle styleNumberBold) {
        Sheet sheetExpiredLoansAllVnd = workbook.createSheet("Просрочка.Всего.VND");
        Sheet sheetExpiredLoansNewVnd = workbook.createSheet("Просрочка.Новый клиент.VND");
        Sheet sheetExpiredLoansRepeatVnd = workbook.createSheet("Просрочка.Повторный клиент.VND");

        sheetExpiredLoansAllVnd.setDisplayGridlines(false);
        sheetExpiredLoansNewVnd.setDisplayGridlines(false);
        sheetExpiredLoansRepeatVnd.setDisplayGridlines(false);

        //Workbook. "Expired Loans" sheets
        int rowExpiredLoans = 0;

        Row headRowExpiredAllVnd = sheetExpiredLoansAllVnd.createRow(rowExpiredLoans);
        Row headRowExpiredNewVnd = sheetExpiredLoansNewVnd.createRow(rowExpiredLoans);
        Row headRowExpiredRepeatVnd = sheetExpiredLoansRepeatVnd.createRow(rowExpiredLoans);
        headRowExpiredAllVnd.createCell(0).setCellValue("Дата");
        headRowExpiredAllVnd.getCell(0).setCellStyle(styleTextHeaders);
        headRowExpiredNewVnd.createCell(0).setCellValue("Дата");
        headRowExpiredNewVnd.getCell(0).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatVnd.createCell(0).setCellValue("Дата");
        headRowExpiredRepeatVnd.getCell(0).setCellStyle(styleTextHeaders);

        headRowExpiredAllVnd.createCell(1).setCellValue("Просрочка, %");
        headRowExpiredAllVnd.getCell(1).setCellStyle(styleTextHeaders);
        headRowExpiredNewVnd.createCell(1).setCellValue("Просрочка, %");
        headRowExpiredNewVnd.getCell(1).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatVnd.createCell(1).setCellValue("Просрочка, %");
        headRowExpiredRepeatVnd.getCell(1).setCellStyle(styleTextHeaders);

        headRowExpiredAllVnd.createCell(2).setCellValue("Максимально возможная просрочка, %");
        headRowExpiredAllVnd.getCell(2).setCellStyle(styleTextHeaders);
        headRowExpiredNewVnd.createCell(2).setCellValue("Максимально возможная просрочка, %");
        headRowExpiredNewVnd.getCell(2).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatVnd.createCell(2).setCellValue("Максимально возможная просрочка, %");
        headRowExpiredRepeatVnd.getCell(2).setCellStyle(styleTextHeaders);

        headRowExpiredAllVnd.createCell(3).setCellValue("Окупаемость, %");
        headRowExpiredAllVnd.getCell(3).setCellStyle(styleTextHeaders);
        headRowExpiredNewVnd.createCell(3).setCellValue("Окупаемость, %");
        headRowExpiredNewVnd.getCell(3).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatVnd.createCell(3).setCellValue("Окупаемость, %");
        headRowExpiredRepeatVnd.getCell(3).setCellStyle(styleTextHeaders);

        headRowExpiredAllVnd.createCell(4).setCellValue("Выдано кредитов");
        headRowExpiredAllVnd.getCell(4).setCellStyle(styleTextHeaders);
        headRowExpiredNewVnd.createCell(4).setCellValue("Выдано кредитов");
        headRowExpiredNewVnd.getCell(4).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatVnd.createCell(4).setCellValue("Выдано кредитов");
        headRowExpiredRepeatVnd.getCell(4).setCellStyle(styleTextHeaders);

        headRowExpiredAllVnd.createCell(5).setCellValue("Погашено тело кредитов");
        headRowExpiredAllVnd.getCell(5).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,5,6));
        headRowExpiredNewVnd.createCell(5).setCellValue("Погашено тело кредитов");
        headRowExpiredNewVnd.getCell(5).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,5,6));
        headRowExpiredRepeatVnd.createCell(5).setCellValue("Погашено тело кредитов");
        headRowExpiredRepeatVnd.getCell(5).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,5,6));

        headRowExpiredAllVnd.createCell(7).setCellValue("Действующие кредиты");
        headRowExpiredAllVnd.getCell(7).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,7,8));
        headRowExpiredNewVnd.createCell(7).setCellValue("Действующие кредиты");
        headRowExpiredNewVnd.getCell(7).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,7,8));
        headRowExpiredRepeatVnd.createCell(7).setCellValue("Действующие кредиты");
        headRowExpiredRepeatVnd.getCell(7).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,7,8));

        headRowExpiredAllVnd.createCell(9).setCellValue("Грейс период");
        headRowExpiredAllVnd.getCell(9).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,9,10));
        headRowExpiredNewVnd.createCell(9).setCellValue("Грейс период");
        headRowExpiredNewVnd.getCell(9).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,9,10));
        headRowExpiredRepeatVnd.createCell(9).setCellValue("Грейс период");
        headRowExpiredRepeatVnd.getCell(9).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,9,10));

        headRowExpiredAllVnd.createCell(11).setCellValue("Просрочка. 1-30 дней");
        headRowExpiredAllVnd.getCell(11).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,11,12));
        headRowExpiredNewVnd.createCell(11).setCellValue("Просрочка. 1-30 дней");
        headRowExpiredNewVnd.getCell(11).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,11,12));
        headRowExpiredRepeatVnd.createCell(11).setCellValue("Просрочка. 1-30 дней");
        headRowExpiredRepeatVnd.getCell(11).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,11,12));

        headRowExpiredAllVnd.createCell(13).setCellValue("Просрочка. 31-60 дней");
        headRowExpiredAllVnd.getCell(13).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,13,14));
        headRowExpiredNewVnd.createCell(13).setCellValue("Просрочка. 31-60 дней");
        headRowExpiredNewVnd.getCell(13).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,13,14));
        headRowExpiredRepeatVnd.createCell(13).setCellValue("Просрочка. 31-60 дней");
        headRowExpiredRepeatVnd.getCell(13).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,13,14));

        headRowExpiredAllVnd.createCell(15).setCellValue("Просрочка. 61-90 дней");
        headRowExpiredAllVnd.getCell(15).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,15,16));
        headRowExpiredNewVnd.createCell(15).setCellValue("Просрочка. 61-90 дней");
        headRowExpiredNewVnd.getCell(15).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,15,16));
        headRowExpiredRepeatVnd.createCell(15).setCellValue("Просрочка. 61-90 дней");
        headRowExpiredRepeatVnd.getCell(15).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,15,16));

        headRowExpiredAllVnd.createCell(17).setCellValue("Просрочка. 91-120 дней");
        headRowExpiredAllVnd.getCell(17).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,17,18));
        headRowExpiredNewVnd.createCell(17).setCellValue("Просрочка. 91-120 дней");
        headRowExpiredNewVnd.getCell(17).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,17,18));
        headRowExpiredRepeatVnd.createCell(17).setCellValue("Просрочка. 91-120 дней");
        headRowExpiredRepeatVnd.getCell(17).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,17,18));

        headRowExpiredAllVnd.createCell(19).setCellValue("Просрочка. 121-180 дней");
        headRowExpiredAllVnd.getCell(19).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,19,20));
        headRowExpiredNewVnd.createCell(19).setCellValue("Просрочка. 121-180 дней");
        headRowExpiredNewVnd.getCell(19).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,19,20));
        headRowExpiredRepeatVnd.createCell(19).setCellValue("Просрочка. 121-180 дней");
        headRowExpiredRepeatVnd.getCell(19).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,19,20));

        headRowExpiredAllVnd.createCell(21).setCellValue("Просрочка. >= 181 дней");
        headRowExpiredAllVnd.getCell(21).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,21,22));
        headRowExpiredNewVnd.createCell(21).setCellValue("Просрочка. >= 181 дней");
        headRowExpiredNewVnd.getCell(21).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,21,22));
        headRowExpiredRepeatVnd.createCell(21).setCellValue("Просрочка. >= 181 дней");
        headRowExpiredRepeatVnd.getCell(21).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,21,22));

        headRowExpiredAllVnd.createCell(23).setCellValue("Просрочка. Всего");
        headRowExpiredAllVnd.getCell(23).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,23,24));
        headRowExpiredNewVnd.createCell(23).setCellValue("Просрочка. Всего");
        headRowExpiredNewVnd.getCell(23).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,23,24));
        headRowExpiredRepeatVnd.createCell(23).setCellValue("Просрочка. Всего");
        headRowExpiredRepeatVnd.getCell(23).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatVnd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,23,24));

        headRowExpiredAllVnd.createCell(25).setCellValue("Доход");
        headRowExpiredAllVnd.getCell(25).setCellStyle(styleTextHeaders);
        headRowExpiredNewVnd.createCell(25).setCellValue("Доход");
        headRowExpiredNewVnd.getCell(25).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatVnd.createCell(25).setCellValue("Доход");
        headRowExpiredRepeatVnd.getCell(25).setCellStyle(styleTextHeaders);

        rowExpiredLoans += 1;
        int rowNumberForGroupFirstExpiredLoans = rowExpiredLoans;
        int rowNumberForGroupSecondExpiredLoans;
        for (int a = 0; a < mainDailyReportObject.getExportCollectionDebtsInfoDateList().size(); a++) {
            Row newRowExpLoansAllVnd = sheetExpiredLoansAllVnd.createRow(rowExpiredLoans);
            Row newRowExpLoansNewVnd = sheetExpiredLoansNewVnd.createRow(rowExpiredLoans);
            Row newRowExpLoansRepeatVnd = sheetExpiredLoansRepeatVnd.createRow(rowExpiredLoans);

            newRowExpLoansAllVnd.createCell(0)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate());
            newRowExpLoansAllVnd.getCell(0).setCellStyle(styleDate);
            newRowExpLoansNewVnd.createCell(0)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate());
            newRowExpLoansNewVnd.getCell(0).setCellStyle(styleDate);
            newRowExpLoansRepeatVnd.createCell(0)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate());
            newRowExpLoansRepeatVnd.getCell(0).setCellStyle(styleDate);

            newRowExpLoansAllVnd.createCell(1)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotal() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(1).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(1)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(1).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(1)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(1).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(2)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount() -
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaid()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(2).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(2)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew() -
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidNew()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(2).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(2)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat() -
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidRepeat()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(2).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(3)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaid() +
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaid()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(3).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(3)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaidNew() +
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidNew()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(3).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(3)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaidRepeat() +
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidRepeat()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(3).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(4)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(4).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(4)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(4).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(4)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(4).setCellStyle(styleNumber);

            newRowExpLoansAllVnd.createCell(5)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaid());
            newRowExpLoansAllVnd.getCell(5).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(5)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidNew());
            newRowExpLoansNewVnd.getCell(5).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(5)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidRepeat());
            newRowExpLoansRepeatVnd.getCell(5).setCellStyle(styleNumber);

            newRowExpLoansAllVnd.createCell(6)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaid() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(6).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(6)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(6).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(6)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(6).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(7)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipal());
            newRowExpLoansAllVnd.getCell(7).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(7)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipalNew());
            newRowExpLoansNewVnd.getCell(7).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(7)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipalRepeat());
            newRowExpLoansRepeatVnd.getCell(7).setCellStyle(styleNumber);

            newRowExpLoansAllVnd.createCell(8)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipal() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(8).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(8)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipalNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(8).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(8)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipalRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(8).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(9)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmount());
            newRowExpLoansAllVnd.getCell(9).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(9)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmountNew());
            newRowExpLoansNewVnd.getCell(9).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(9)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(9).setCellStyle(styleNumber);

            newRowExpLoansAllVnd.createCell(10)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmount() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(10).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(10)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmountNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(10).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(10)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmountRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(10).setCellStyle(stylePercent);


            newRowExpLoansAllVnd.createCell(11)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30Days());
            newRowExpLoansAllVnd.getCell(11).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(11)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30DaysNew());
            newRowExpLoansNewVnd.getCell(11).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(11)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30DaysRepeat());
            newRowExpLoansRepeatVnd.getCell(11).setCellStyle(styleNumber);

            newRowExpLoansAllVnd.createCell(12)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(12).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(12)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(12).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(12)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(12).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(13)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60Days());
            newRowExpLoansAllVnd.getCell(13).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(13)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60DaysNew());
            newRowExpLoansNewVnd.getCell(13).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(13)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60DaysRepeat());
            newRowExpLoansRepeatVnd.getCell(13).setCellStyle(styleNumber);

            newRowExpLoansAllVnd.createCell(14)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(14).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(14)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(14).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(14)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(14).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(15)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90Days());
            newRowExpLoansAllVnd.getCell(15).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(15)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90DaysNew());
            newRowExpLoansNewVnd.getCell(15).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(15)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90DaysRepeat());
            newRowExpLoansRepeatVnd.getCell(15).setCellStyle(styleNumber);

            newRowExpLoansAllVnd.createCell(16)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(16).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(16)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(16).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(16)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(16).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(17)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120Days());
            newRowExpLoansAllVnd.getCell(17).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(17)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120DaysNew());
            newRowExpLoansNewVnd.getCell(17).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(17)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120DaysRepeat());
            newRowExpLoansRepeatVnd.getCell(17).setCellStyle(styleNumber);

            newRowExpLoansAllVnd.createCell(18)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(18).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(18)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(18).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(18)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(18).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(19)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180Days());
            newRowExpLoansAllVnd.getCell(19).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(19)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180DaysNew());
            newRowExpLoansNewVnd.getCell(19).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(19)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180DaysRepeat());
            newRowExpLoansRepeatVnd.getCell(19).setCellStyle(styleNumber);

            newRowExpLoansAllVnd.createCell(20)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(20).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(20)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(20).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(20)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(20).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(21)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181Days());
            newRowExpLoansAllVnd.getCell(21).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(21)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181DaysNew());
            newRowExpLoansNewVnd.getCell(21).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(21)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181DaysRepeat());
            newRowExpLoansRepeatVnd.getCell(21).setCellStyle(styleNumber);

            newRowExpLoansAllVnd.createCell(22)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(22).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(22)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(22).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(22)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(22).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(23)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotal());
            newRowExpLoansAllVnd.getCell(23).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(23)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalNew());
            newRowExpLoansNewVnd.getCell(23).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(23)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalRepeat());
            newRowExpLoansRepeatVnd.getCell(23).setCellStyle(styleNumber);

            newRowExpLoansAllVnd.createCell(24)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotal() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllVnd.getCell(24).setCellStyle(stylePercent);
            newRowExpLoansNewVnd.createCell(24)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewVnd.getCell(24).setCellStyle(stylePercent);
            newRowExpLoansRepeatVnd.createCell(24)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatVnd.getCell(24).setCellStyle(stylePercent);

            newRowExpLoansAllVnd.createCell(25)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaid());
            newRowExpLoansAllVnd.getCell(25).setCellStyle(styleNumber);
            newRowExpLoansNewVnd.createCell(25)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaidNew());
            newRowExpLoansNewVnd.getCell(25).setCellStyle(styleNumber);
            newRowExpLoansRepeatVnd.createCell(25)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaidRepeat());
            newRowExpLoansRepeatVnd.getCell(25).setCellStyle(styleNumber);

            rowExpiredLoans += 1;


            if (mainDailyReportObject.getExportCollectionDebtsInfoDateList().size() == a + 1 ||
                    !mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate().getMonth()
                            .equals(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a + 1).getDate().getMonth())) {
                for (int b = 0; b < mainDailyReportObject.getExportCollectionDebtsInfoMonthList().size(); b++) {
                    if (mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate().getMonth()
                            .equals(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate().getMonth()) &&
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate().getYear() ==
                                    mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate().getYear()) {
                        rowNumberForGroupSecondExpiredLoans = rowExpiredLoans - 1;

                        sheetExpiredLoansAllVnd.groupRow(rowNumberForGroupFirstExpiredLoans,
                                rowNumberForGroupSecondExpiredLoans);
                        sheetExpiredLoansNewVnd.groupRow(rowNumberForGroupFirstExpiredLoans,
                                rowNumberForGroupSecondExpiredLoans);
                        sheetExpiredLoansRepeatVnd.groupRow(rowNumberForGroupFirstExpiredLoans,
                                rowNumberForGroupSecondExpiredLoans);

                        Row newRowTotalMonthExpLoansAllVnd = sheetExpiredLoansAllVnd.createRow(rowExpiredLoans);
                        Row newRowTotalMonthExpLoansNewVnd = sheetExpiredLoansNewVnd.createRow(rowExpiredLoans);
                        Row newRowTotalMonthExpLoansRepeatVnd = sheetExpiredLoansRepeatVnd.createRow(rowExpiredLoans);

                        newRowTotalMonthExpLoansAllVnd.createCell(0)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate());
                        newRowTotalMonthExpLoansAllVnd.getCell(0).setCellStyle(styleMonthBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(0)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate());
                        newRowTotalMonthExpLoansNewVnd.getCell(0).setCellStyle(styleMonthBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(0)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(0).setCellStyle(styleMonthBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(1)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotal() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(1).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(1)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(1).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(1)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(1).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(2)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount() -
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaid()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(2).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(2)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew() -
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidNew()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(2).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(2)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat() -
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidRepeat()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(2).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(3)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaid() +
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaid()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(3).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(3)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaidNew() +
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidNew()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(3).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(3)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaidRepeat() +
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidRepeat()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(3).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(4)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(4).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(4)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(4).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(4)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(4).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(5)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaid());
                        newRowTotalMonthExpLoansAllVnd.getCell(5).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(5)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(5).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(5)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(5).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(6)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaid() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(6).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(6)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(6).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(6)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(6).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(7)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipal());
                        newRowTotalMonthExpLoansAllVnd.getCell(7).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(7)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipalNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(7).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(7)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipalRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(7).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(8)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipal() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(8).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(8)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipalNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(8).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(8)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipalRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(8).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(9)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(9).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(9)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(9).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(9)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(9).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(10)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmount() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(10).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(10)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmountNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(10).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(10)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmountRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(10).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(11)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30Days());
                        newRowTotalMonthExpLoansAllVnd.getCell(11).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(11)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30DaysNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(11).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(11)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30DaysRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(11).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(12)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(12).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(12)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(12).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(12)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(12).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(13)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60Days());
                        newRowTotalMonthExpLoansAllVnd.getCell(13).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(13)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60DaysNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(13).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(13)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60DaysRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(13).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(14)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(14).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(14)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(14).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(14)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(14).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(15)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90Days());
                        newRowTotalMonthExpLoansAllVnd.getCell(15).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(15)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90DaysNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(15).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(15)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90DaysRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(15).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(16)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(16).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(16)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(16).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(16)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(16).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(17)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120Days());
                        newRowTotalMonthExpLoansAllVnd.getCell(17).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(17)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120DaysNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(17).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(17)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120DaysRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(17).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(18)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(18).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(18)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(18).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(18)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(18).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(19)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180Days());
                        newRowTotalMonthExpLoansAllVnd.getCell(19).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(19)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180DaysNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(19).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(19)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180DaysRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(19).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(20)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(20).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(20)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(20).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(20)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(20).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(21)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181Days());
                        newRowTotalMonthExpLoansAllVnd.getCell(21).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(21)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181DaysNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(21).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(21)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181DaysRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(21).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(22)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(22).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(22)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(22).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(22)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(22).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(23)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotal());
                        newRowTotalMonthExpLoansAllVnd.getCell(23).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(23)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(23).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(23)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(23).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(24)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotal() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllVnd.getCell(24).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(24)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(24).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(24)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(24).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllVnd.createCell(25)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaid());
                        newRowTotalMonthExpLoansAllVnd.getCell(25).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewVnd.createCell(25)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaidNew());
                        newRowTotalMonthExpLoansNewVnd.getCell(25).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatVnd.createCell(25)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaidRepeat());
                        newRowTotalMonthExpLoansRepeatVnd.getCell(25).setCellStyle(styleNumberBold);

                        rowExpiredLoans += 1;
                        rowNumberForGroupFirstExpiredLoans = rowExpiredLoans;
                    }
                }
            }
        }

        //rules,Conditions
        SheetConditionalFormatting sheetExpiredLoansAllVndCF = sheetExpiredLoansAllVnd.getSheetConditionalFormatting();
        SheetConditionalFormatting sheetExpiredLoansNewVndCF = sheetExpiredLoansNewVnd.getSheetConditionalFormatting();
        SheetConditionalFormatting sheetExpiredLoansRepeatVndCF = sheetExpiredLoansRepeatVnd.getSheetConditionalFormatting();


        //rule #1
        ConditionalFormattingRule ruleSheetExpiredLoansAllVndExp1 = sheetExpiredLoansAllVndCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.28");
        PatternFormatting pfSheetExpiredLoansAllVndExp1 = ruleSheetExpiredLoansAllVndExp1.createPatternFormatting();
        pfSheetExpiredLoansAllVndExp1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansAllVndExp1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansAllVndExp1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansAllVndExp1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansAllVndExp1 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansAllVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansAllVndExp1,
                conditionalFormattingRulesSheetExpiredLoansAllVndExp1);

        ConditionalFormattingRule ruleSheetExpiredLoansNewVndExp1 = sheetExpiredLoansNewVndCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.30");
        PatternFormatting pfSheetExpiredLoansNewVndExp1 = ruleSheetExpiredLoansNewVndExp1.createPatternFormatting();
        pfSheetExpiredLoansNewVndExp1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansNewVndExp1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansNewVndExp1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansNewVndExp1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansNewVndExp1 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansNewVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansNewVndExp1,
                conditionalFormattingRulesSheetExpiredLoansNewVndExp1);

        ConditionalFormattingRule ruleSheetExpiredLoansRepeatVndExp1 = sheetExpiredLoansRepeatVndCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.20");
        PatternFormatting pfSheetExpiredLoansRepeatVndExp1 = ruleSheetExpiredLoansRepeatVndExp1.createPatternFormatting();
        pfSheetExpiredLoansRepeatVndExp1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansRepeatVndExp1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansRepeatVndExp1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansRepeatVndExp1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansRepeatVndExp1 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansRepeatVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansRepeatVndExp1,
                conditionalFormattingRulesSheetExpiredLoansRepeatVndExp1);

        //rule#2
        ConditionalFormattingRule ruleSheetExpiredLoansAllVndExp2 = sheetExpiredLoansAllVndCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.15");
        PatternFormatting pfSheetExpiredLoansAllVndExp2 = ruleSheetExpiredLoansAllVndExp2.createPatternFormatting();
        pfSheetExpiredLoansAllVndExp2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansAllVndExp2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansAllVndExp2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansAllVndExp2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansAllVndExp2 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansAllVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansAllVndExp2,
                conditionalFormattingRulesSheetExpiredLoansAllVndExp2);

        ConditionalFormattingRule ruleSheetExpiredLoansNewVndExp2 = sheetExpiredLoansNewVndCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.245");
        PatternFormatting pfSheetExpiredLoansNewVndExp2 = ruleSheetExpiredLoansNewVndExp2.createPatternFormatting();
        pfSheetExpiredLoansNewVndExp2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansNewVndExp2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansNewVndExp2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansNewVndExp2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansNewVndExp2 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansNewVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansNewVndExp2,
                conditionalFormattingRulesSheetExpiredLoansNewVndExp2);

        ConditionalFormattingRule ruleSheetExpiredLoansRepeatVndExp2 = sheetExpiredLoansRepeatVndCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.135");
        PatternFormatting pfSheetExpiredLoansRepeatVndExp2 = ruleSheetExpiredLoansRepeatVndExp2.createPatternFormatting();
        pfSheetExpiredLoansRepeatVndExp2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansRepeatVndExp2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansRepeatVndExp2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansRepeatVndExp2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansRepeatVndExp2 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansRepeatVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansRepeatVndExp2,
                conditionalFormattingRulesSheetExpiredLoansRepeatVndExp2);

        //rule #4
        ConditionalFormattingRule ruleSheetExpiredLoansAllVndRecovery1 = sheetExpiredLoansAllVndCF.createConditionalFormattingRule(ComparisonOperator.LE, "1.00");
        PatternFormatting pfSheetExpiredLoansAllVndRecovery1 = ruleSheetExpiredLoansAllVndRecovery1.createPatternFormatting();
        pfSheetExpiredLoansAllVndRecovery1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansAllVndRecovery1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansAllVndRecovery1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansAllVndRecovery1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansAllVndRecovery1 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansAllVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansAllVndRecovery1,
                conditionalFormattingRulesSheetExpiredLoansAllVndRecovery1);

        ConditionalFormattingRule ruleSheetExpiredLoansNewVndRecovery1 = sheetExpiredLoansNewVndCF.createConditionalFormattingRule(ComparisonOperator.LE, "1.00");
        PatternFormatting pfSheetExpiredLoansNewVndRecovery1 = ruleSheetExpiredLoansNewVndRecovery1.createPatternFormatting();
        pfSheetExpiredLoansNewVndRecovery1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansNewVndRecovery1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansNewVndRecovery1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansNewVndRecovery1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansNewVndRecovery1 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansNewVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansNewVndRecovery1,
                conditionalFormattingRulesSheetExpiredLoansNewVndRecovery1);

        ConditionalFormattingRule ruleSheetExpiredLoansRepeatVndRecovery1 = sheetExpiredLoansRepeatVndCF.createConditionalFormattingRule(ComparisonOperator.LE, "1.00");
        PatternFormatting pfSheetExpiredLoansRepeatVndRecovery1 = ruleSheetExpiredLoansRepeatVndRecovery1.createPatternFormatting();
        pfSheetExpiredLoansRepeatVndRecovery1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansRepeatVndRecovery1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansRepeatVndRecovery1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansRepeatVndRecovery1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansRepeatVndRecovery1 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansRepeatVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansRepeatVndRecovery1,
                conditionalFormattingRulesSheetExpiredLoansRepeatVndRecovery1);

        //rule #5
        ConditionalFormattingRule ruleSheetExpiredLoansAllVndRecovery2 = sheetExpiredLoansAllVndCF.createConditionalFormattingRule(ComparisonOperator.GE, "1.15");
        PatternFormatting pfSheetExpiredLoansAllVndRecovery2 = ruleSheetExpiredLoansAllVndRecovery2.createPatternFormatting();
        pfSheetExpiredLoansAllVndRecovery2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansAllVndRecovery2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansAllVndRecovery2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansAllVndRecovery2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansAllVndRecovery2 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansAllVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansAllVndRecovery2,
                conditionalFormattingRulesSheetExpiredLoansAllVndRecovery2);

        ConditionalFormattingRule ruleSheetExpiredLoansNewVndRecovery2 = sheetExpiredLoansNewVndCF.createConditionalFormattingRule(ComparisonOperator.GE, "1.01");
        PatternFormatting pfSheetExpiredLoansNewVndRecovery2 = ruleSheetExpiredLoansNewVndRecovery2.createPatternFormatting();
        pfSheetExpiredLoansNewVndRecovery2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansNewVndRecovery2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansNewVndRecovery2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansNewVndRecovery2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansNewVndRecovery2 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansNewVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansNewVndRecovery2,
                conditionalFormattingRulesSheetExpiredLoansNewVndRecovery2);

        ConditionalFormattingRule ruleSheetExpiredLoansRepeatVndRecovery2 = sheetExpiredLoansRepeatVndCF.createConditionalFormattingRule(ComparisonOperator.GE, "1.20");
        PatternFormatting pfSheetExpiredLoansRepeatVndRecovery2 = ruleSheetExpiredLoansRepeatVndRecovery2.createPatternFormatting();
        pfSheetExpiredLoansRepeatVndRecovery2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansRepeatVndRecovery2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansRepeatVndRecovery2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansRepeatVndRecovery2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansRepeatVndRecovery2 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansRepeatVndCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansRepeatVndRecovery2,
                conditionalFormattingRulesSheetExpiredLoansRepeatVndRecovery2);

        //Sheet. Row and Columns groups, width etc.
        sheetExpiredLoansAllVnd.groupColumn(11,22);
        sheetExpiredLoansNewVnd.groupColumn(11,22);
        sheetExpiredLoansRepeatVnd.groupColumn(11,22);

        sheetExpiredLoansAllVnd.setColumnWidth(0, 12 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(1, 16 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(2, 16 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(3, 16 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(4, 24 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(5, 24 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(6, 12 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(7, 24 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(8, 12 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(9, 24 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(10, 12 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(11, 24 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(12, 12 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(13, 24 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(14, 12 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(15, 24 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(16, 12 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(17, 24 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(18, 12 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(19, 24 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(20, 12 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(21, 24 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(22, 12 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(23, 24 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(24, 12 * 256);
        sheetExpiredLoansAllVnd.setColumnWidth(25, 24 * 256);

        sheetExpiredLoansNewVnd.setColumnWidth(0, 12 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(1, 16 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(2, 16 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(3, 16 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(4, 24 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(5, 24 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(6, 12 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(7, 24 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(8, 12 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(9, 24 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(10, 12 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(11, 24 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(12, 12 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(13, 24 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(14, 12 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(15, 24 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(16, 12 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(17, 24 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(18, 12 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(19, 24 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(20, 12 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(21, 24 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(22, 12 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(23, 24 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(24, 12 * 256);
        sheetExpiredLoansNewVnd.setColumnWidth(25, 24 * 256);

        sheetExpiredLoansRepeatVnd.setColumnWidth(0, 12 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(1, 16 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(2, 16 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(3, 16 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(4, 24 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(5, 24 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(6, 12 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(7, 24 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(8, 12 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(9, 24 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(10, 12 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(11, 24 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(12, 12 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(13, 24 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(14, 12 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(15, 24 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(16, 12 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(17, 24 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(18, 12 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(19, 24 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(20, 12 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(21, 24 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(22, 12 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(23, 24 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(24, 12 * 256);
        sheetExpiredLoansRepeatVnd.setColumnWidth(25, 24 * 256);

        sheetExpiredLoansAllVnd.createFreezePane(1,1);
        sheetExpiredLoansNewVnd.createFreezePane(1,1);
        sheetExpiredLoansRepeatVnd.createFreezePane(1,1);
    }

    private static void createSheetsExpiredLoansUsd(Workbook workbook, MainDailyReportObject mainDailyReportObject,
                                                    CellStyle styleTextHeaders, CellStyle styleDate,
                                                    CellStyle stylePercent, CellStyle styleNumber,
                                                    CellStyle styleMonthBold, CellStyle stylePercentBold,
                                                    CellStyle styleNumberBold) {
        Sheet sheetExpiredLoansAllUsd = workbook.createSheet("Просрочка.Всего.USD");
        Sheet sheetExpiredLoansNewUsd = workbook.createSheet("Просрочка.Новый клиент.USD");
        Sheet sheetExpiredLoansRepeatUsd = workbook.createSheet("Просрочка.Повторный клиент.USD");

        sheetExpiredLoansAllUsd.setDisplayGridlines(false);
        sheetExpiredLoansNewUsd.setDisplayGridlines(false);
        sheetExpiredLoansRepeatUsd.setDisplayGridlines(false);

        //Workbook. "Expired Loans" sheets
        int rowExpiredLoans = 0;

        Row headRowExpiredAllUsd = sheetExpiredLoansAllUsd.createRow(rowExpiredLoans);
        Row headRowExpiredNewUsd = sheetExpiredLoansNewUsd.createRow(rowExpiredLoans);
        Row headRowExpiredRepeatUsd = sheetExpiredLoansRepeatUsd.createRow(rowExpiredLoans);

        headRowExpiredAllUsd.createCell(0).setCellValue("Дата");
        headRowExpiredAllUsd.getCell(0).setCellStyle(styleTextHeaders);
        headRowExpiredNewUsd.createCell(0).setCellValue("Дата");
        headRowExpiredNewUsd.getCell(0).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatUsd.createCell(0).setCellValue("Дата");
        headRowExpiredRepeatUsd.getCell(0).setCellStyle(styleTextHeaders);

        headRowExpiredAllUsd.createCell(1).setCellValue("Просрочка, %");
        headRowExpiredAllUsd.getCell(1).setCellStyle(styleTextHeaders);
        headRowExpiredNewUsd.createCell(1).setCellValue("Просрочка, %");
        headRowExpiredNewUsd.getCell(1).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatUsd.createCell(1).setCellValue("Просрочка, %");
        headRowExpiredRepeatUsd.getCell(1).setCellStyle(styleTextHeaders);

        headRowExpiredAllUsd.createCell(2).setCellValue("Максимально возможная просрочка, %");
        headRowExpiredAllUsd.getCell(2).setCellStyle(styleTextHeaders);
        headRowExpiredNewUsd.createCell(2).setCellValue("Максимально возможная просрочка, %");
        headRowExpiredNewUsd.getCell(2).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatUsd.createCell(2).setCellValue("Максимально возможная просрочка, %");
        headRowExpiredRepeatUsd.getCell(2).setCellStyle(styleTextHeaders);

        headRowExpiredAllUsd.createCell(3).setCellValue("Окупаемость, %");
        headRowExpiredAllUsd.getCell(3).setCellStyle(styleTextHeaders);
        headRowExpiredNewUsd.createCell(3).setCellValue("Окупаемость, %");
        headRowExpiredNewUsd.getCell(3).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatUsd.createCell(3).setCellValue("Окупаемость, %");
        headRowExpiredRepeatUsd.getCell(3).setCellStyle(styleTextHeaders);

        headRowExpiredAllUsd.createCell(4).setCellValue("Выдано кредитов");
        headRowExpiredAllUsd.getCell(4).setCellStyle(styleTextHeaders);
        headRowExpiredNewUsd.createCell(4).setCellValue("Выдано кредитов");
        headRowExpiredNewUsd.getCell(4).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatUsd.createCell(4).setCellValue("Выдано кредитов");
        headRowExpiredRepeatUsd.getCell(4).setCellStyle(styleTextHeaders);

        headRowExpiredAllUsd.createCell(5).setCellValue("Погашено тело кредитов");
        headRowExpiredAllUsd.getCell(5).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,5,6));
        headRowExpiredNewUsd.createCell(5).setCellValue("Погашено тело кредитов");
        headRowExpiredNewUsd.getCell(5).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,5,6));
        headRowExpiredRepeatUsd.createCell(5).setCellValue("Погашено тело кредитов");
        headRowExpiredRepeatUsd.getCell(5).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,5,6));

        headRowExpiredAllUsd.createCell(7).setCellValue("Действующие кредиты");
        headRowExpiredAllUsd.getCell(7).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,7,8));
        headRowExpiredNewUsd.createCell(7).setCellValue("Действующие кредиты");
        headRowExpiredNewUsd.getCell(7).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,7,8));
        headRowExpiredRepeatUsd.createCell(7).setCellValue("Действующие кредиты");
        headRowExpiredRepeatUsd.getCell(7).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,7,8));

        headRowExpiredAllUsd.createCell(9).setCellValue("Грейс период");
        headRowExpiredAllUsd.getCell(9).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,9,10));
        headRowExpiredNewUsd.createCell(9).setCellValue("Грейс период");
        headRowExpiredNewUsd.getCell(9).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,9,10));
        headRowExpiredRepeatUsd.createCell(9).setCellValue("Грейс период");
        headRowExpiredRepeatUsd.getCell(9).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,9,10));

        headRowExpiredAllUsd.createCell(11).setCellValue("Просрочка. 1-30 дней");
        headRowExpiredAllUsd.getCell(11).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,11,12));
        headRowExpiredNewUsd.createCell(11).setCellValue("Просрочка. 1-30 дней");
        headRowExpiredNewUsd.getCell(11).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,11,12));
        headRowExpiredRepeatUsd.createCell(11).setCellValue("Просрочка. 1-30 дней");
        headRowExpiredRepeatUsd.getCell(11).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,11,12));

        headRowExpiredAllUsd.createCell(13).setCellValue("Просрочка. 31-60 дней");
        headRowExpiredAllUsd.getCell(13).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,13,14));
        headRowExpiredNewUsd.createCell(13).setCellValue("Просрочка. 31-60 дней");
        headRowExpiredNewUsd.getCell(13).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,13,14));
        headRowExpiredRepeatUsd.createCell(13).setCellValue("Просрочка. 31-60 дней");
        headRowExpiredRepeatUsd.getCell(13).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,13,14));

        headRowExpiredAllUsd.createCell(15).setCellValue("Просрочка. 61-90 дней");
        headRowExpiredAllUsd.getCell(15).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,15,16));
        headRowExpiredNewUsd.createCell(15).setCellValue("Просрочка. 61-90 дней");
        headRowExpiredNewUsd.getCell(15).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,15,16));
        headRowExpiredRepeatUsd.createCell(15).setCellValue("Просрочка. 61-90 дней");
        headRowExpiredRepeatUsd.getCell(15).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,15,16));

        headRowExpiredAllUsd.createCell(17).setCellValue("Просрочка. 91-120 дней");
        headRowExpiredAllUsd.getCell(17).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,17,18));
        headRowExpiredNewUsd.createCell(17).setCellValue("Просрочка. 91-120 дней");
        headRowExpiredNewUsd.getCell(17).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,17,18));
        headRowExpiredRepeatUsd.createCell(17).setCellValue("Просрочка. 91-120 дней");
        headRowExpiredRepeatUsd.getCell(17).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,17,18));

        headRowExpiredAllUsd.createCell(19).setCellValue("Просрочка. 121-180 дней");
        headRowExpiredAllUsd.getCell(19).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,19,20));
        headRowExpiredNewUsd.createCell(19).setCellValue("Просрочка. 121-180 дней");
        headRowExpiredNewUsd.getCell(19).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,19,20));
        headRowExpiredRepeatUsd.createCell(19).setCellValue("Просрочка. 121-180 дней");
        headRowExpiredRepeatUsd.getCell(19).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,19,20));

        headRowExpiredAllUsd.createCell(21).setCellValue("Просрочка. >= 181 дней");
        headRowExpiredAllUsd.getCell(21).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,21,22));
        headRowExpiredNewUsd.createCell(21).setCellValue("Просрочка. >= 181 дней");
        headRowExpiredNewUsd.getCell(21).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,21,22));
        headRowExpiredRepeatUsd.createCell(21).setCellValue("Просрочка. >= 181 дней");
        headRowExpiredRepeatUsd.getCell(21).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,21,22));

        headRowExpiredAllUsd.createCell(23).setCellValue("Просрочка. Всего");
        headRowExpiredAllUsd.getCell(23).setCellStyle(styleTextHeaders);
        sheetExpiredLoansAllUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,23,24));
        headRowExpiredNewUsd.createCell(23).setCellValue("Просрочка. Всего");
        headRowExpiredNewUsd.getCell(23).setCellStyle(styleTextHeaders);
        sheetExpiredLoansNewUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,23,24));
        headRowExpiredRepeatUsd.createCell(23).setCellValue("Просрочка. Всего");
        headRowExpiredRepeatUsd.getCell(23).setCellStyle(styleTextHeaders);
        sheetExpiredLoansRepeatUsd.addMergedRegion(new CellRangeAddress(rowExpiredLoans,rowExpiredLoans,23,24));

        headRowExpiredAllUsd.createCell(25).setCellValue("Доход");
        headRowExpiredAllUsd.getCell(25).setCellStyle(styleTextHeaders);
        headRowExpiredNewUsd.createCell(25).setCellValue("Доход");
        headRowExpiredNewUsd.getCell(25).setCellStyle(styleTextHeaders);
        headRowExpiredRepeatUsd.createCell(25).setCellValue("Доход");
        headRowExpiredRepeatUsd.getCell(25).setCellStyle(styleTextHeaders);
        rowExpiredLoans += 1;
        int rowNumberForGroupFirstExpiredLoans = rowExpiredLoans;
        int rowNumberForGroupSecondExpiredLoans;
        for (int a = 0; a < mainDailyReportObject.getExportCollectionDebtsInfoDateList().size(); a++) {
            Row newRowExpLoansAllUsd = sheetExpiredLoansAllUsd.createRow(rowExpiredLoans);
            Row newRowExpLoansNewUsd = sheetExpiredLoansNewUsd.createRow(rowExpiredLoans);
            Row newRowExpLoansRepeatUsd = sheetExpiredLoansRepeatUsd.createRow(rowExpiredLoans);

            CurrencyRate currencyRateForDate = new CurrencyRate();

            for (int c = 0; c < mainDailyReportObject.getCurrencyRateList().size(); c++) {
                if (mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate()
                        .equals(mainDailyReportObject.getCurrencyRateList().get(c).getDate())) {
                    currencyRateForDate = mainDailyReportObject.getCurrencyRateList().get(c);
                }
            }

            newRowExpLoansAllUsd.createCell(0)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate());
            newRowExpLoansAllUsd.getCell(0).setCellStyle(styleDate);
            newRowExpLoansNewUsd.createCell(0)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate());
            newRowExpLoansNewUsd.getCell(0).setCellStyle(styleDate);
            newRowExpLoansRepeatUsd.createCell(0)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate());
            newRowExpLoansRepeatUsd.getCell(0).setCellStyle(styleDate);

            newRowExpLoansAllUsd.createCell(1)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotal() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(1).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(1)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(1).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(1)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(1).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(2)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount() -
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaid()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(2).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(2)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew() -
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidNew()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(2).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(2)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat() -
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidRepeat()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(2).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(3)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaid() +
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaid()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(3).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(3)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaidNew() +
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidNew()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(3).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(3)
                    .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaidRepeat() +
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidRepeat()) /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(3).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(4)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(4).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(4)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(4).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(4)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(4).setCellStyle(styleNumber);

            newRowExpLoansAllUsd.createCell(5)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaid() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(5).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(5)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(5).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(5)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(5).setCellStyle(styleNumber);

            newRowExpLoansAllUsd.createCell(6)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaid() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(6).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(6)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(6).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(6)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPrincipalRepaidRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(6).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(7)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipal() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(7).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(7)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipalNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(7).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(7)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipalRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(7).setCellStyle(styleNumber);

            newRowExpLoansAllUsd.createCell(8)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipal() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(8).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(8)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipalNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(8).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(8)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getCurrentDebtPrincipalRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(8).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(9)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmount() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(9).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(9)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmountNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(9).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(9)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmountRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(9).setCellStyle(styleNumber);

            newRowExpLoansAllUsd.createCell(10)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmount() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(10).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(10)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmountNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(10).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(10)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getGracePeriodAmountRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(10).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(11)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30Days() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(11).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(11)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30DaysNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(11).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(11)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30DaysRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(11).setCellStyle(styleNumber);

            newRowExpLoansAllUsd.createCell(12)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(12).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(12)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(12).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(12)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTo30DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(12).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(13)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60Days() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(13).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(13)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60DaysNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(13).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(13)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60DaysRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(13).setCellStyle(styleNumber);

            newRowExpLoansAllUsd.createCell(14)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(14).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(14)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(14).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(14)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom31To60DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(14).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(15)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90Days() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(15).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(15)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90DaysNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(15).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(15)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90DaysRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(15).setCellStyle(styleNumber);

            newRowExpLoansAllUsd.createCell(16)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(16).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(16)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(16).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(16)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom61To90DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(16).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(17)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120Days() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(17).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(17)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120DaysNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(17).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(17)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120DaysRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(17).setCellStyle(styleNumber);

            newRowExpLoansAllUsd.createCell(18)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(18).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(18)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(18).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(18)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom91To120DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(18).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(19)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180Days() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(19).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(19)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180DaysNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(19).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(19)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180DaysRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(19).setCellStyle(styleNumber);

            newRowExpLoansAllUsd.createCell(20)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(20).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(20)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(20).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(20)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom121To180DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(20).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(21)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181Days() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(21).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(21)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181DaysNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(21).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(21)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181DaysRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(21).setCellStyle(styleNumber);

            newRowExpLoansAllUsd.createCell(22)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181Days() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(22).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(22)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181DaysNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(22).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(22)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountFrom181DaysRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(22).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(23)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotal() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(23).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(23)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(23).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(23)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(23).setCellStyle(styleNumber);

            newRowExpLoansAllUsd.createCell(24)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotal() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmount());
            newRowExpLoansAllUsd.getCell(24).setCellStyle(stylePercent);
            newRowExpLoansNewUsd.createCell(24)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalNew() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountNew());
            newRowExpLoansNewUsd.getCell(24).setCellStyle(stylePercent);
            newRowExpLoansRepeatUsd.createCell(24)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getExpiredAmountTotalRepeat() /
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getTotalIssuedAmountRepeat());
            newRowExpLoansRepeatUsd.getCell(24).setCellStyle(stylePercent);

            newRowExpLoansAllUsd.createCell(25)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaid() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansAllUsd.getCell(25).setCellStyle(styleNumber);
            newRowExpLoansNewUsd.createCell(25)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaidNew() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansNewUsd.getCell(25).setCellStyle(styleNumber);
            newRowExpLoansRepeatUsd.createCell(25)
                    .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getPercentRepaidRepeat() /
                            currencyRateForDate.getUsdVnd());
            newRowExpLoansRepeatUsd.getCell(25).setCellStyle(styleNumber);

            rowExpiredLoans += 1;


            if (mainDailyReportObject.getExportCollectionDebtsInfoDateList().size() == a + 1 ||
                    !mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate().getMonth()
                            .equals(mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a + 1).getDate().getMonth())) {
                for (int b = 0; b < mainDailyReportObject.getExportCollectionDebtsInfoMonthList().size(); b++) {
                    if (mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate().getMonth()
                            .equals(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate().getMonth()) &&
                            mainDailyReportObject.getExportCollectionDebtsInfoDateList().get(a).getDate().getYear() ==
                                    mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate().getYear()) {
                        rowNumberForGroupSecondExpiredLoans = rowExpiredLoans - 1;

                        sheetExpiredLoansAllUsd.groupRow(rowNumberForGroupFirstExpiredLoans,
                                rowNumberForGroupSecondExpiredLoans);
                        sheetExpiredLoansNewUsd.groupRow(rowNumberForGroupFirstExpiredLoans,
                                rowNumberForGroupSecondExpiredLoans);
                        sheetExpiredLoansRepeatUsd.groupRow(rowNumberForGroupFirstExpiredLoans,
                                rowNumberForGroupSecondExpiredLoans);

                        Row newRowTotalMonthExpLoansAllUsd = sheetExpiredLoansAllUsd.createRow(rowExpiredLoans);
                        Row newRowTotalMonthExpLoansNewUsd = sheetExpiredLoansNewUsd.createRow(rowExpiredLoans);
                        Row newRowTotalMonthExpLoansRepeatUsd = sheetExpiredLoansRepeatUsd.createRow(rowExpiredLoans);

                        newRowTotalMonthExpLoansAllUsd.createCell(0)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate());
                        newRowTotalMonthExpLoansAllUsd.getCell(0).setCellStyle(styleMonthBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(0)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate());
                        newRowTotalMonthExpLoansNewUsd.getCell(0).setCellStyle(styleMonthBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(0)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(0).setCellStyle(styleMonthBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(1)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotal() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(1).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(1)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(1).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(1)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(1).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(2)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount() -
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaid()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(2).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(2)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew() -
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidNew()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(2).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(2)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat() -
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidRepeat()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(2).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(3)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaid() +
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaid()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(3).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(3)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaidNew() +
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidNew()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(3).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(3)
                                .setCellValue((mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaidRepeat() +
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidRepeat()) /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(3).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(4)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(4).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(4)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(4).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(4)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(4).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(5)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaid() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(5).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(5)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(5).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(5)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(5).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(6)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaid() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(6).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(6)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(6).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(6)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPrincipalRepaidRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(6).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(7)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipal() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(7).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(7)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipalNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(7).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(7)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipalRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(7).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(8)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipal() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(8).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(8)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipalNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(8).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(8)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getCurrentDebtPrincipalRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(8).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(9)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmount() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(9).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(9)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmountNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(9).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(9)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmountRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(9).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(10)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmount() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(10).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(10)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmountNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(10).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(10)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getGracePeriodAmountRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(10).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(11)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30Days() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(11).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(11)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30DaysNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(11).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(11)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30DaysRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(11).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(12)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(12).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(12)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(12).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(12)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTo30DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(12).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(13)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60Days() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(13).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(13)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60DaysNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(13).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(13)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60DaysRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(13).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(14)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(14).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(14)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(14).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(14)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom31To60DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(14).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(15)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90Days() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(15).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(15)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90DaysNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(15).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(15)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90DaysRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(15).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(16)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(16).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(16)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(16).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(16)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom61To90DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(16).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(17)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120Days() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(17).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(17)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120DaysNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(17).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(17)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120DaysRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(17).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(18)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(18).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(18)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(18).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(18)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom91To120DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(18).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(19)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180Days() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(19).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(19)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180DaysNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(19).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(19)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180DaysRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(19).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(20)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(20).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(20)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(20).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(20)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom121To180DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(20).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(21)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181Days() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(21).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(21)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181DaysNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(21).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(21)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181DaysRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(21).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(22)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181Days() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(22).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(22)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181DaysNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(22).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(22)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountFrom181DaysRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(22).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(23)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotal() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(23).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(23)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(23).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(23)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(23).setCellStyle(styleNumberBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(24)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotal() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmount());
                        newRowTotalMonthExpLoansAllUsd.getCell(24).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(24)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalNew() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountNew());
                        newRowTotalMonthExpLoansNewUsd.getCell(24).setCellStyle(stylePercentBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(24)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getExpiredAmountTotalRepeat() /
                                        mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getTotalIssuedAmountRepeat());
                        newRowTotalMonthExpLoansRepeatUsd.getCell(24).setCellStyle(stylePercentBold);

                        newRowTotalMonthExpLoansAllUsd.createCell(25)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaid() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansAllUsd.getCell(25).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansNewUsd.createCell(25)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaidNew() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansNewUsd.getCell(25).setCellStyle(styleNumberBold);
                        newRowTotalMonthExpLoansRepeatUsd.createCell(25)
                                .setCellValue(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getPercentRepaidRepeat() /
                                        mainDailyReportObject.getMapMonthAndAverageCurrencyRateUsdVnd()
                                                .get(mainDailyReportObject.getExportCollectionDebtsInfoMonthList().get(b).getDate()));
                        newRowTotalMonthExpLoansRepeatUsd.getCell(25).setCellStyle(styleNumberBold);

                        rowExpiredLoans += 1;
                        rowNumberForGroupFirstExpiredLoans = rowExpiredLoans;
                    }
                }
            }
        }

        //rules,Conditions
        SheetConditionalFormatting sheetExpiredLoansAllUsdCF = sheetExpiredLoansAllUsd.getSheetConditionalFormatting();
        SheetConditionalFormatting sheetExpiredLoansNewUsdCF = sheetExpiredLoansNewUsd.getSheetConditionalFormatting();
        SheetConditionalFormatting sheetExpiredLoansRepeatUsdCF = sheetExpiredLoansRepeatUsd.getSheetConditionalFormatting();


        //rule #1
        ConditionalFormattingRule ruleSheetExpiredLoansAllUsdExp1 = sheetExpiredLoansAllUsdCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.28");
        PatternFormatting pfSheetExpiredLoansAllUsdExp1 = ruleSheetExpiredLoansAllUsdExp1.createPatternFormatting();
        pfSheetExpiredLoansAllUsdExp1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansAllUsdExp1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansAllUsdExp1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansAllUsdExp1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansAllUsdExp1 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansAllUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansAllUsdExp1,
                conditionalFormattingRulesSheetExpiredLoansAllUsdExp1);

        ConditionalFormattingRule ruleSheetExpiredLoansNewUsdExp1 = sheetExpiredLoansNewUsdCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.30");
        PatternFormatting pfSheetExpiredLoansNewUsdExp1 = ruleSheetExpiredLoansNewUsdExp1.createPatternFormatting();
        pfSheetExpiredLoansNewUsdExp1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansNewUsdExp1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansNewUsdExp1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansNewUsdExp1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansNewUsdExp1 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansNewUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansNewUsdExp1,
                conditionalFormattingRulesSheetExpiredLoansNewUsdExp1);

        ConditionalFormattingRule ruleSheetExpiredLoansRepeatUsdExp1 = sheetExpiredLoansRepeatUsdCF.createConditionalFormattingRule(ComparisonOperator.GE, "0.20");
        PatternFormatting pfSheetExpiredLoansRepeatUsdExp1 = ruleSheetExpiredLoansRepeatUsdExp1.createPatternFormatting();
        pfSheetExpiredLoansRepeatUsdExp1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansRepeatUsdExp1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansRepeatUsdExp1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansRepeatUsdExp1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansRepeatUsdExp1 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansRepeatUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansRepeatUsdExp1,
                conditionalFormattingRulesSheetExpiredLoansRepeatUsdExp1);
        //rule#2
        ConditionalFormattingRule ruleSheetExpiredLoansAllUsdExp2 = sheetExpiredLoansAllUsdCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.15");
        PatternFormatting pfSheetExpiredLoansAllUsdExp2 = ruleSheetExpiredLoansAllUsdExp2.createPatternFormatting();
        pfSheetExpiredLoansAllUsdExp2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansAllUsdExp2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansAllUsdExp2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansAllUsdExp2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansAllUsdExp2 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansAllUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansAllUsdExp2,
                conditionalFormattingRulesSheetExpiredLoansAllUsdExp2);

        ConditionalFormattingRule ruleSheetExpiredLoansNewUsdExp2 = sheetExpiredLoansNewUsdCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.245");
        PatternFormatting pfSheetExpiredLoansNewUsdExp2 = ruleSheetExpiredLoansNewUsdExp2.createPatternFormatting();
        pfSheetExpiredLoansNewUsdExp2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansNewUsdExp2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansNewUsdExp2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansNewUsdExp2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansNewUsdExp2 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansNewUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansNewUsdExp2,
                conditionalFormattingRulesSheetExpiredLoansNewUsdExp2);

        ConditionalFormattingRule ruleSheetExpiredLoansRepeatUsdExp2 = sheetExpiredLoansRepeatUsdCF.createConditionalFormattingRule(ComparisonOperator.LE, "0.135");
        PatternFormatting pfSheetExpiredLoansRepeatUsdExp2 = ruleSheetExpiredLoansRepeatUsdExp2.createPatternFormatting();
        pfSheetExpiredLoansRepeatUsdExp2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansRepeatUsdExp2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansRepeatUsdExp2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansRepeatUsdExp2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansRepeatUsdExp2 = new CellRangeAddress[] {CellRangeAddress.valueOf("B2:C" + rowExpiredLoans)};
        sheetExpiredLoansRepeatUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansRepeatUsdExp2,
                conditionalFormattingRulesSheetExpiredLoansRepeatUsdExp2);
        //rule #4
        ConditionalFormattingRule ruleSheetExpiredLoansAllUsdRecovery1 = sheetExpiredLoansAllUsdCF.createConditionalFormattingRule(ComparisonOperator.LE, "1.00");
        PatternFormatting pfSheetExpiredLoansAllUsdRecovery1 = ruleSheetExpiredLoansAllUsdRecovery1.createPatternFormatting();
        pfSheetExpiredLoansAllUsdRecovery1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansAllUsdRecovery1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansAllUsdRecovery1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansAllUsdRecovery1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansAllUsdRecovery1 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansAllUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansAllUsdRecovery1,
                conditionalFormattingRulesSheetExpiredLoansAllUsdRecovery1);

        ConditionalFormattingRule ruleSheetExpiredLoansNewUsdRecovery1 = sheetExpiredLoansNewUsdCF.createConditionalFormattingRule(ComparisonOperator.LE, "1.00");
        PatternFormatting pfSheetExpiredLoansNewUsdRecovery1 = ruleSheetExpiredLoansNewUsdRecovery1.createPatternFormatting();
        pfSheetExpiredLoansNewUsdRecovery1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansNewUsdRecovery1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansNewUsdRecovery1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansNewUsdRecovery1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansNewUsdRecovery1 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansNewUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansNewUsdRecovery1,
                conditionalFormattingRulesSheetExpiredLoansNewUsdRecovery1);

        ConditionalFormattingRule ruleSheetExpiredLoansRepeatUsdRecovery1 = sheetExpiredLoansRepeatUsdCF.createConditionalFormattingRule(ComparisonOperator.LE, "1.00");
        PatternFormatting pfSheetExpiredLoansRepeatUsdRecovery1 = ruleSheetExpiredLoansRepeatUsdRecovery1.createPatternFormatting();
        pfSheetExpiredLoansRepeatUsdRecovery1.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
        pfSheetExpiredLoansRepeatUsdRecovery1.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansRepeatUsdRecovery1 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansRepeatUsdRecovery1};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansRepeatUsdRecovery1 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansRepeatUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansRepeatUsdRecovery1,
                conditionalFormattingRulesSheetExpiredLoansRepeatUsdRecovery1);
        //rule #5
        ConditionalFormattingRule ruleSheetExpiredLoansAllUsdRecovery2 = sheetExpiredLoansAllUsdCF.createConditionalFormattingRule(ComparisonOperator.GE, "1.15");
        PatternFormatting pfSheetExpiredLoansAllUsdRecovery2 = ruleSheetExpiredLoansAllUsdRecovery2.createPatternFormatting();
        pfSheetExpiredLoansAllUsdRecovery2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansAllUsdRecovery2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansAllUsdRecovery2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansAllUsdRecovery2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansAllUsdRecovery2 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansAllUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansAllUsdRecovery2,
                conditionalFormattingRulesSheetExpiredLoansAllUsdRecovery2);

        ConditionalFormattingRule ruleSheetExpiredLoansNewUsdRecovery2 = sheetExpiredLoansNewUsdCF.createConditionalFormattingRule(ComparisonOperator.GE, "1.01");
        PatternFormatting pfSheetExpiredLoansNewUsdRecovery2 = ruleSheetExpiredLoansNewUsdRecovery2.createPatternFormatting();
        pfSheetExpiredLoansNewUsdRecovery2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansNewUsdRecovery2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansNewUsdRecovery2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansNewUsdRecovery2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansNewUsdRecovery2 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansNewUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansNewUsdRecovery2,
                conditionalFormattingRulesSheetExpiredLoansNewUsdRecovery2);

        ConditionalFormattingRule ruleSheetExpiredLoansRepeatUsdRecovery2 = sheetExpiredLoansRepeatUsdCF.createConditionalFormattingRule(ComparisonOperator.GE, "1.20");
        PatternFormatting pfSheetExpiredLoansRepeatUsdRecovery2 = ruleSheetExpiredLoansRepeatUsdRecovery2.createPatternFormatting();
        pfSheetExpiredLoansRepeatUsdRecovery2.setFillBackgroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        pfSheetExpiredLoansRepeatUsdRecovery2.setFillPattern(PatternFormatting.SOLID_FOREGROUND);
        ConditionalFormattingRule[] conditionalFormattingRulesSheetExpiredLoansRepeatUsdRecovery2 = new ConditionalFormattingRule[] {ruleSheetExpiredLoansRepeatUsdRecovery2};
        CellRangeAddress[] cellRangeAddressesSheetExpiredLoansRepeatUsdRecovery2 = new CellRangeAddress[] {CellRangeAddress.valueOf("D2:D" + rowExpiredLoans)};
        sheetExpiredLoansRepeatUsdCF.addConditionalFormatting(cellRangeAddressesSheetExpiredLoansRepeatUsdRecovery2,
                conditionalFormattingRulesSheetExpiredLoansRepeatUsdRecovery2);

        //Sheet. Row and Columns groups, width etc.
        sheetExpiredLoansAllUsd.groupColumn(11,22);
        sheetExpiredLoansNewUsd.groupColumn(11,22);
        sheetExpiredLoansRepeatUsd.groupColumn(11,22);

        sheetExpiredLoansAllUsd.setColumnWidth(0, 12 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(1, 16 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(2, 16 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(3, 16 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(4, 24 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(5, 24 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(6, 12 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(7, 24 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(8, 12 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(9, 24 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(10, 12 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(11, 24 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(12, 12 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(13, 24 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(14, 12 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(15, 24 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(16, 12 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(17, 24 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(18, 12 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(19, 24 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(20, 12 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(21, 24 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(22, 12 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(23, 24 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(24, 12 * 256);
        sheetExpiredLoansAllUsd.setColumnWidth(25, 24 * 256);

        sheetExpiredLoansNewUsd.setColumnWidth(0, 12 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(1, 16 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(2, 16 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(3, 16 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(4, 24 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(5, 24 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(6, 12 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(7, 24 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(8, 12 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(9, 24 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(10, 12 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(11, 24 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(12, 12 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(13, 24 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(14, 12 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(15, 24 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(16, 12 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(17, 24 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(18, 12 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(19, 24 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(20, 12 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(21, 24 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(22, 12 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(23, 24 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(24, 12 * 256);
        sheetExpiredLoansNewUsd.setColumnWidth(25, 24 * 256);

        sheetExpiredLoansRepeatUsd.setColumnWidth(0, 12 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(1, 16 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(2, 16 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(3, 16 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(4, 24 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(5, 24 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(6, 12 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(7, 24 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(8, 12 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(9, 24 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(10, 12 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(11, 24 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(12, 12 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(13, 24 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(14, 12 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(15, 24 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(16, 12 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(17, 24 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(18, 12 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(19, 24 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(20, 12 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(21, 24 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(22, 12 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(23, 24 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(24, 12 * 256);
        sheetExpiredLoansRepeatUsd.setColumnWidth(25, 24 * 256);

        sheetExpiredLoansAllUsd.createFreezePane(1,1);
        sheetExpiredLoansNewUsd.createFreezePane(1,1);
        sheetExpiredLoansRepeatUsd.createFreezePane(1,1);
    }


    private static void createFontHeaders(Font fontHeaders) {
        fontHeaders.setFontName("Arial");
        fontHeaders.setFontHeightInPoints((short) 11);
        fontHeaders.setBold(true);
    }

    private static void createFontSimpleCells(Font fontSimpleCells) {
        fontSimpleCells.setFontName("Arial");
        fontSimpleCells.setFontHeightInPoints((short) 11);
        fontSimpleCells.setBold(false);
    }

    private static void createCellStyleTitle(CellStyle styleTitle, Font font) {
        styleTitle.setFont(font);
        styleTitle.setWrapText(true);
        styleTitle.setBorderBottom(BorderStyle.THIN);
        styleTitle.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        styleTitle.setBorderLeft(BorderStyle.THIN);
        styleTitle.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        styleTitle.setBorderRight(BorderStyle.THIN);
        styleTitle.setRightBorderColor(IndexedColors.BLACK.getIndex());
        styleTitle.setBorderTop(BorderStyle.THIN);
        styleTitle.setTopBorderColor(IndexedColors.BLACK.getIndex());
        styleTitle.setAlignment(HorizontalAlignment.CENTER);
        styleTitle.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    private static void createCellStyleSimpleText(CellStyle styleSimpleText, Font font) {
        styleSimpleText.setFont(font);
        styleSimpleText.setWrapText(true);
        styleSimpleText.setBorderBottom(BorderStyle.THIN);
        styleSimpleText.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        styleSimpleText.setBorderLeft(BorderStyle.THIN);
        styleSimpleText.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        styleSimpleText.setBorderRight(BorderStyle.THIN);
        styleSimpleText.setRightBorderColor(IndexedColors.BLACK.getIndex());
        styleSimpleText.setBorderTop(BorderStyle.THIN);
        styleSimpleText.setTopBorderColor(IndexedColors.BLACK.getIndex());
        styleSimpleText.setAlignment(HorizontalAlignment.CENTER);
        styleSimpleText.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    private static void createCellStyleTextHeaders(CellStyle styleTextHeaders, Font font) {
        styleTextHeaders.setFillForegroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        styleTextHeaders.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        styleTextHeaders.setFont(font);
        styleTextHeaders.setWrapText(true);
        styleTextHeaders.setBorderBottom(BorderStyle.THIN);
        styleTextHeaders.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        styleTextHeaders.setBorderLeft(BorderStyle.THIN);
        styleTextHeaders.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        styleTextHeaders.setBorderRight(BorderStyle.THIN);
        styleTextHeaders.setRightBorderColor(IndexedColors.BLACK.getIndex());
        styleTextHeaders.setBorderTop(BorderStyle.THIN);
        styleTextHeaders.setTopBorderColor(IndexedColors.BLACK.getIndex());
        styleTextHeaders.setAlignment(HorizontalAlignment.CENTER);
        styleTextHeaders.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    private static void createCellStyleDateAndTime(CellStyle styleDateAndTime, Font font, CreationHelper creationHelper) {
        styleDateAndTime.setFont(font);
        styleDateAndTime.setWrapText(true);
        styleDateAndTime.setBorderBottom(BorderStyle.THIN);
        styleDateAndTime.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        styleDateAndTime.setBorderLeft(BorderStyle.THIN);
        styleDateAndTime.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        styleDateAndTime.setBorderRight(BorderStyle.THIN);
        styleDateAndTime.setRightBorderColor(IndexedColors.BLACK.getIndex());
        styleDateAndTime.setBorderTop(BorderStyle.THIN);
        styleDateAndTime.setTopBorderColor(IndexedColors.BLACK.getIndex());
        styleDateAndTime.setDataFormat(creationHelper.createDataFormat().getFormat("dd.MM.yyyy HH:mm:ss"));
        styleDateAndTime.setAlignment(HorizontalAlignment.CENTER);
        styleDateAndTime.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    private static void createCellStyleDate(CellStyle styleDate, Font font, CreationHelper creationHelper) {
        styleDate.setFont(font);
        styleDate.setWrapText(true);
        styleDate.setBorderBottom(BorderStyle.THIN);
        styleDate.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        styleDate.setBorderLeft(BorderStyle.THIN);
        styleDate.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        styleDate.setBorderRight(BorderStyle.THIN);
        styleDate.setRightBorderColor(IndexedColors.BLACK.getIndex());
        styleDate.setBorderTop(BorderStyle.THIN);
        styleDate.setTopBorderColor(IndexedColors.BLACK.getIndex());
        styleDate.setDataFormat(creationHelper.createDataFormat().getFormat("dd.MM.yyyy"));
        styleDate.setAlignment(HorizontalAlignment.CENTER);
        styleDate.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    private static void createCellStyleDateBold(CellStyle styleDateBold, Font font, CreationHelper creationHelper) {
        styleDateBold.setFont(font);
        styleDateBold.setWrapText(true);
        styleDateBold.setBorderBottom(BorderStyle.THIN);
        styleDateBold.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        styleDateBold.setBorderLeft(BorderStyle.THIN);
        styleDateBold.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        styleDateBold.setBorderRight(BorderStyle.THIN);
        styleDateBold.setRightBorderColor(IndexedColors.BLACK.getIndex());
        styleDateBold.setBorderTop(BorderStyle.THIN);
        styleDateBold.setTopBorderColor(IndexedColors.BLACK.getIndex());
        styleDateBold.setDataFormat(creationHelper.createDataFormat().getFormat("dd.MM.yyyy"));
        styleDateBold.setAlignment(HorizontalAlignment.CENTER);
        styleDateBold.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    private static void createCellStyleMonth(CellStyle styleMonth, Font font, CreationHelper creationHelper) {
        styleMonth.setFont(font);
        styleMonth.setWrapText(true);
        styleMonth.setBorderBottom(BorderStyle.THIN);
        styleMonth.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        styleMonth.setBorderLeft(BorderStyle.THIN);
        styleMonth.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        styleMonth.setBorderRight(BorderStyle.THIN);
        styleMonth.setRightBorderColor(IndexedColors.BLACK.getIndex());
        styleMonth.setBorderTop(BorderStyle.THIN);
        styleMonth.setTopBorderColor(IndexedColors.BLACK.getIndex());
        styleMonth.setDataFormat(creationHelper.createDataFormat().getFormat("MMM yyyy"));
        styleMonth.setAlignment(HorizontalAlignment.CENTER);
        styleMonth.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    private static void createCellStyleMonthBold(CellStyle styleMonthBold, Font font, CreationHelper creationHelper) {
        styleMonthBold.setFont(font);
        styleMonthBold.setWrapText(true);
        styleMonthBold.setBorderBottom(BorderStyle.THIN);
        styleMonthBold.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        styleMonthBold.setBorderLeft(BorderStyle.THIN);
        styleMonthBold.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        styleMonthBold.setBorderRight(BorderStyle.THIN);
        styleMonthBold.setRightBorderColor(IndexedColors.BLACK.getIndex());
        styleMonthBold.setBorderTop(BorderStyle.THIN);
        styleMonthBold.setTopBorderColor(IndexedColors.BLACK.getIndex());
        styleMonthBold.setDataFormat(creationHelper.createDataFormat().getFormat("MMM yyyy"));
        styleMonthBold.setAlignment(HorizontalAlignment.CENTER);
        styleMonthBold.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    private static void createCellStylePercent(CellStyle stylePercent, Font font, CreationHelper creationHelper) {
        stylePercent.setFont(font);
        stylePercent.setBorderBottom(BorderStyle.THIN);
        stylePercent.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        stylePercent.setBorderLeft(BorderStyle.THIN);
        stylePercent.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        stylePercent.setBorderRight(BorderStyle.THIN);
        stylePercent.setRightBorderColor(IndexedColors.BLACK.getIndex());
        stylePercent.setBorderTop(BorderStyle.THIN);
        stylePercent.setTopBorderColor(IndexedColors.BLACK.getIndex());
        stylePercent.setDataFormat(creationHelper.createDataFormat().getFormat("##.##%"));
        stylePercent.setAlignment(HorizontalAlignment.CENTER);
        stylePercent.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    private static void createCellStylePercentBold(CellStyle stylePercentBold, Font font, CreationHelper creationHelper) {
        stylePercentBold.setFont(font);
        stylePercentBold.setBorderBottom(BorderStyle.THIN);
        stylePercentBold.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        stylePercentBold.setBorderLeft(BorderStyle.THIN);
        stylePercentBold.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        stylePercentBold.setBorderRight(BorderStyle.THIN);
        stylePercentBold.setRightBorderColor(IndexedColors.BLACK.getIndex());
        stylePercentBold.setBorderTop(BorderStyle.THIN);
        stylePercentBold.setTopBorderColor(IndexedColors.BLACK.getIndex());
        stylePercentBold.setDataFormat(creationHelper.createDataFormat().getFormat("##.##%"));
        stylePercentBold.setAlignment(HorizontalAlignment.CENTER);
        stylePercentBold.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    private static void createCellStyleNumber(CellStyle styleNumber, Font font, CreationHelper creationHelper) {
        styleNumber.setFont(font);
        styleNumber.setBorderBottom(BorderStyle.THIN);
        styleNumber.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        styleNumber.setBorderLeft(BorderStyle.THIN);
        styleNumber.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        styleNumber.setBorderRight(BorderStyle.THIN);
        styleNumber.setRightBorderColor(IndexedColors.BLACK.getIndex());
        styleNumber.setBorderTop(BorderStyle.THIN);
        styleNumber.setTopBorderColor(IndexedColors.BLACK.getIndex());
        styleNumber.setDataFormat(creationHelper.createDataFormat().getFormat("#,##0"));
        styleNumber.setAlignment(HorizontalAlignment.CENTER);
        styleNumber.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    private static void createCellStyleNumberBold(CellStyle styleNumberBold, Font font, CreationHelper creationHelper) {
        styleNumberBold.setFont(font);
        styleNumberBold.setBorderBottom(BorderStyle.THIN);
        styleNumberBold.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        styleNumberBold.setBorderLeft(BorderStyle.THIN);
        styleNumberBold.setLeftBorderColor(IndexedColors.BLACK.getIndex());
        styleNumberBold.setBorderRight(BorderStyle.THIN);
        styleNumberBold.setRightBorderColor(IndexedColors.BLACK.getIndex());
        styleNumberBold.setBorderTop(BorderStyle.THIN);
        styleNumberBold.setTopBorderColor(IndexedColors.BLACK.getIndex());
        styleNumberBold.setDataFormat(creationHelper.createDataFormat().getFormat("#,##0"));
        styleNumberBold.setAlignment(HorizontalAlignment.CENTER);
        styleNumberBold.setVerticalAlignment(VerticalAlignment.CENTER);
    }

}
